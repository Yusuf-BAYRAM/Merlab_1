
AC_Triac_Dimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a95c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800aa70  0800aa70  0001aa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af64  0800af64  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800af64  0800af64  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af64  0800af64  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af64  0800af64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800af6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000210  0800b17c  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800b17c  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f07e  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f1  00000000  00000000  0002f2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  000316a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001913c  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001208b  00000000  00000000  0004c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7c8  00000000  00000000  0005e8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed0a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d18  00000000  00000000  000ed0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa54 	.word	0x0800aa54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800aa54 	.word	0x0800aa54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2319      	movs	r3, #25
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	463b      	mov	r3, r7
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2288      	movs	r2, #136	; 0x88
 8001198:	21ec      	movs	r1, #236	; 0xec
 800119a:	4857      	ldr	r0, [pc, #348]	; (80012f8 <TrimRead+0x178>)
 800119c:	f002 fc66 	bl	8003a6c <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80011a0:	463b      	mov	r3, r7
 80011a2:	3319      	adds	r3, #25
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	9202      	str	r2, [sp, #8]
 80011aa:	2207      	movs	r2, #7
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	22e1      	movs	r2, #225	; 0xe1
 80011b4:	21ec      	movs	r1, #236	; 0xec
 80011b6:	4850      	ldr	r0, [pc, #320]	; (80012f8 <TrimRead+0x178>)
 80011b8:	f002 fc58 	bl	8003a6c <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	783b      	ldrb	r3, [r7, #0]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <TrimRead+0x17c>)
 80011ce:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	78bb      	ldrb	r3, [r7, #2]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b48      	ldr	r3, [pc, #288]	; (8001300 <TrimRead+0x180>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	793b      	ldrb	r3, [r7, #4]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b44      	ldr	r3, [pc, #272]	; (8001304 <TrimRead+0x184>)
 80011f2:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	797b      	ldrb	r3, [r7, #5]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <TrimRead+0x188>)
 8001206:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001208:	7a7b      	ldrb	r3, [r7, #9]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <TrimRead+0x18c>)
 8001218:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	7abb      	ldrb	r3, [r7, #10]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b39      	ldr	r3, [pc, #228]	; (8001310 <TrimRead+0x190>)
 800122a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800122c:	7b7b      	ldrb	r3, [r7, #13]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b36      	ldr	r3, [pc, #216]	; (8001314 <TrimRead+0x194>)
 800123c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <TrimRead+0x198>)
 800124e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001250:	7c7b      	ldrb	r3, [r7, #17]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7c3b      	ldrb	r3, [r7, #16]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <TrimRead+0x19c>)
 8001260:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001262:	7cfb      	ldrb	r3, [r7, #19]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7cbb      	ldrb	r3, [r7, #18]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <TrimRead+0x1a0>)
 8001272:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7d3b      	ldrb	r3, [r7, #20]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21a      	sxth	r2, r3
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <TrimRead+0x1a4>)
 8001284:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <TrimRead+0x1a8>)
 8001296:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001298:	7e3b      	ldrb	r3, [r7, #24]
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <TrimRead+0x1ac>)
 800129e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80012a0:	7ebb      	ldrb	r3, [r7, #26]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	7e7b      	ldrb	r3, [r7, #25]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <TrimRead+0x1b0>)
 80012b0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80012b2:	7efb      	ldrb	r3, [r7, #27]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <TrimRead+0x1b4>)
 80012b8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80012ba:	7f3b      	ldrb	r3, [r7, #28]
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7f7b      	ldrb	r3, [r7, #29]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <TrimRead+0x1b8>)
 80012d0:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80012d2:	7fbb      	ldrb	r3, [r7, #30]
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7f7b      	ldrb	r3, [r7, #29]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <TrimRead+0x1bc>)
 80012e6:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <TrimRead+0x1c0>)
 80012ee:	801a      	strh	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000250 	.word	0x20000250
 80012fc:	2000022c 	.word	0x2000022c
 8001300:	20000234 	.word	0x20000234
 8001304:	20000236 	.word	0x20000236
 8001308:	2000022e 	.word	0x2000022e
 800130c:	20000238 	.word	0x20000238
 8001310:	2000023a 	.word	0x2000023a
 8001314:	2000023c 	.word	0x2000023c
 8001318:	2000023e 	.word	0x2000023e
 800131c:	20000240 	.word	0x20000240
 8001320:	20000242 	.word	0x20000242
 8001324:	20000244 	.word	0x20000244
 8001328:	20000246 	.word	0x20000246
 800132c:	20000230 	.word	0x20000230
 8001330:	20000248 	.word	0x20000248
 8001334:	20000232 	.word	0x20000232
 8001338:	2000024a 	.word	0x2000024a
 800133c:	2000024c 	.word	0x2000024c
 8001340:	2000024e 	.word	0x2000024e

08001344 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af04      	add	r7, sp, #16
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	4603      	mov	r3, r0
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	460b      	mov	r3, r1
 800135c:	717b      	strb	r3, [r7, #5]
 800135e:	4613      	mov	r3, r2
 8001360:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001362:	f7ff ff0d 	bl	8001180 <TrimRead>


	uint8_t datatowrite = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800136e:	23b6      	movs	r3, #182	; 0xb6
 8001370:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	f107 030f 	add.w	r3, r7, #15
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	22e0      	movs	r2, #224	; 0xe0
 8001386:	21ec      	movs	r1, #236	; 0xec
 8001388:	4858      	ldr	r0, [pc, #352]	; (80014ec <BME280_Config+0x1a8>)
 800138a:	f002 fa75 	bl	8003878 <HAL_I2C_Mem_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <BME280_Config+0x56>
	{
		return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	e0a3      	b.n	80014e2 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f001 fc3c 	bl	8002c18 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	f107 030f 	add.w	r3, r7, #15
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	22f2      	movs	r2, #242	; 0xf2
 80013b8:	21ec      	movs	r1, #236	; 0xec
 80013ba:	484c      	ldr	r0, [pc, #304]	; (80014ec <BME280_Config+0x1a8>)
 80013bc:	f002 fa5c 	bl	8003878 <HAL_I2C_Mem_Write>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <BME280_Config+0x88>
	{
		return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e08a      	b.n	80014e2 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f001 fc23 	bl	8002c18 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2301      	movs	r3, #1
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f107 030e 	add.w	r3, r7, #14
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	22f2      	movs	r2, #242	; 0xf2
 80013e6:	21ec      	movs	r1, #236	; 0xec
 80013e8:	4840      	ldr	r0, [pc, #256]	; (80014ec <BME280_Config+0x1a8>)
 80013ea:	f002 fb3f 	bl	8003a6c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ee:	7bba      	ldrb	r2, [r7, #14]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d002      	beq.n	80013fc <BME280_Config+0xb8>
	{
		return -1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e072      	b.n	80014e2 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80013fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001400:	015b      	lsls	r3, r3, #5
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b25b      	sxtb	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2301      	movs	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	f107 030f 	add.w	r3, r7, #15
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	22f5      	movs	r2, #245	; 0xf5
 8001428:	21ec      	movs	r1, #236	; 0xec
 800142a:	4830      	ldr	r0, [pc, #192]	; (80014ec <BME280_Config+0x1a8>)
 800142c:	f002 fa24 	bl	8003878 <HAL_I2C_Mem_Write>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <BME280_Config+0xf8>
	{
		return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e052      	b.n	80014e2 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800143c:	2064      	movs	r0, #100	; 0x64
 800143e:	f001 fbeb 	bl	8002c18 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2301      	movs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	f107 030e 	add.w	r3, r7, #14
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	22f5      	movs	r2, #245	; 0xf5
 8001456:	21ec      	movs	r1, #236	; 0xec
 8001458:	4824      	ldr	r0, [pc, #144]	; (80014ec <BME280_Config+0x1a8>)
 800145a:	f002 fb07 	bl	8003a6c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145e:	7bba      	ldrb	r2, [r7, #14]
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	429a      	cmp	r2, r3
 8001464:	d002      	beq.n	800146c <BME280_Config+0x128>
	{
		return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	e03a      	b.n	80014e2 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	015b      	lsls	r3, r3, #5
 8001470:	b25a      	sxtb	r2, r3
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b25a      	sxtb	r2, r3
 800147c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2301      	movs	r3, #1
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f107 030f 	add.w	r3, r7, #15
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	22f4      	movs	r2, #244	; 0xf4
 800149c:	21ec      	movs	r1, #236	; 0xec
 800149e:	4813      	ldr	r0, [pc, #76]	; (80014ec <BME280_Config+0x1a8>)
 80014a0:	f002 f9ea 	bl	8003878 <HAL_I2C_Mem_Write>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <BME280_Config+0x16c>
	{
		return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e018      	b.n	80014e2 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80014b0:	2064      	movs	r0, #100	; 0x64
 80014b2:	f001 fbb1 	bl	8002c18 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2301      	movs	r3, #1
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	f107 030e 	add.w	r3, r7, #14
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	22f4      	movs	r2, #244	; 0xf4
 80014ca:	21ec      	movs	r1, #236	; 0xec
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <BME280_Config+0x1a8>)
 80014ce:	f002 facd 	bl	8003a6c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d002      	beq.n	80014e0 <BME280_Config+0x19c>
	{
		return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e000      	b.n	80014e2 <BME280_Config+0x19e>
	}

	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000250 	.word	0x20000250

080014f0 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <delay_us+0x2c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8001502:	bf00      	nop
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <delay_us+0x2c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3f9      	bcc.n	8001504 <delay_us+0x14>
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	200002a4 	.word	0x200002a4

08001520 <delay>:

void delay (uint16_t us)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <delay+0x2c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001532:	bf00      	nop
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <delay+0x2c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3f9      	bcc.n	8001534 <delay+0x14>
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	200002ec 	.word	0x200002ec

08001550 <NEXTION_SendString>:


uint8_t Cmd_End[3] = {0xFF,0xFF,0xFF};  // command end sequence
char MSG[40] = {0};
void NEXTION_SendString (char *ID, char *string)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b090      	sub	sp, #64	; 0x40
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 800155a:	f107 0008 	add.w	r0, r7, #8
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	490b      	ldr	r1, [pc, #44]	; (8001590 <NEXTION_SendString+0x40>)
 8001564:	f005 fcba 	bl	8006edc <siprintf>
 8001568:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156c:	b29a      	uxth	r2, r3
 800156e:	f107 0108 	add.w	r1, r7, #8
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <NEXTION_SendString+0x44>)
 8001578:	f004 fa5d 	bl	8005a36 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	2203      	movs	r2, #3
 8001580:	4905      	ldr	r1, [pc, #20]	; (8001598 <NEXTION_SendString+0x48>)
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <NEXTION_SendString+0x44>)
 8001584:	f004 fa57 	bl	8005a36 <HAL_UART_Transmit>
}
 8001588:	bf00      	nop
 800158a:	3740      	adds	r7, #64	; 0x40
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800aa70 	.word	0x0800aa70
 8001594:	20000334 	.word	0x20000334
 8001598:	20000000 	.word	0x20000000

0800159c <Set_Pin_Output>:
float ortam_Sicaklik;

float fark=0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2302      	movs	r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f001 fe45 	bl	8003258 <HAL_GPIO_Init>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 fe28 	bl	8003258 <HAL_GPIO_Init>
}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_3

uint8_t DS18B20_Start (void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800161a:	2108      	movs	r1, #8
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <DS18B20_Start+0x5c>)
 800161e:	f7ff ffbd 	bl	800159c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8001622:	2200      	movs	r2, #0
 8001624:	2108      	movs	r1, #8
 8001626:	4811      	ldr	r0, [pc, #68]	; (800166c <DS18B20_Start+0x5c>)
 8001628:	f001 ffb1 	bl	800358e <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 800162c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001630:	f7ff ff76 	bl	8001520 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001634:	2108      	movs	r1, #8
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <DS18B20_Start+0x5c>)
 8001638:	f7ff ffcd 	bl	80015d6 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 800163c:	2050      	movs	r0, #80	; 0x50
 800163e:	f7ff ff6f 	bl	8001520 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001642:	2108      	movs	r1, #8
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <DS18B20_Start+0x5c>)
 8001646:	f001 ff8b 	bl	8003560 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <DS18B20_Start+0x46>
 8001650:	2301      	movs	r3, #1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	e001      	b.n	800165a <DS18B20_Start+0x4a>
	else Response = -1;
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 800165a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800165e:	f7ff ff5f 	bl	8001520 <delay>

	return Response;
 8001662:	79fb      	ldrb	r3, [r7, #7]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010800 	.word	0x40010800

08001670 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800167a:	2108      	movs	r1, #8
 800167c:	481e      	ldr	r0, [pc, #120]	; (80016f8 <DS18B20_Write+0x88>)
 800167e:	f7ff ff8d 	bl	800159c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e02e      	b.n	80016e6 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	fa42 f303 	asr.w	r3, r2, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001698:	2108      	movs	r1, #8
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <DS18B20_Write+0x88>)
 800169c:	f7ff ff7e 	bl	800159c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80016a0:	2200      	movs	r2, #0
 80016a2:	2108      	movs	r1, #8
 80016a4:	4814      	ldr	r0, [pc, #80]	; (80016f8 <DS18B20_Write+0x88>)
 80016a6:	f001 ff72 	bl	800358e <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ff38 	bl	8001520 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80016b0:	2108      	movs	r1, #8
 80016b2:	4811      	ldr	r0, [pc, #68]	; (80016f8 <DS18B20_Write+0x88>)
 80016b4:	f7ff ff8f 	bl	80015d6 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80016b8:	2032      	movs	r0, #50	; 0x32
 80016ba:	f7ff ff31 	bl	8001520 <delay>
 80016be:	e00f      	b.n	80016e0 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80016c0:	2108      	movs	r1, #8
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <DS18B20_Write+0x88>)
 80016c4:	f7ff ff6a 	bl	800159c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80016c8:	2200      	movs	r2, #0
 80016ca:	2108      	movs	r1, #8
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <DS18B20_Write+0x88>)
 80016ce:	f001 ff5e 	bl	800358e <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80016d2:	2032      	movs	r0, #50	; 0x32
 80016d4:	f7ff ff24 	bl	8001520 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80016d8:	2108      	movs	r1, #8
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <DS18B20_Write+0x88>)
 80016dc:	f7ff ff7b 	bl	80015d6 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	ddcd      	ble.n	8001688 <DS18B20_Write+0x18>
		}
	}
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40010800 	.word	0x40010800

080016fc <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001706:	2108      	movs	r1, #8
 8001708:	481a      	ldr	r0, [pc, #104]	; (8001774 <DS18B20_Read+0x78>)
 800170a:	f7ff ff64 	bl	80015d6 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	e026      	b.n	8001762 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001714:	2108      	movs	r1, #8
 8001716:	4817      	ldr	r0, [pc, #92]	; (8001774 <DS18B20_Read+0x78>)
 8001718:	f7ff ff40 	bl	800159c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 800171c:	2200      	movs	r2, #0
 800171e:	2108      	movs	r1, #8
 8001720:	4814      	ldr	r0, [pc, #80]	; (8001774 <DS18B20_Read+0x78>)
 8001722:	f001 ff34 	bl	800358e <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fefa 	bl	8001520 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800172c:	2108      	movs	r1, #8
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <DS18B20_Read+0x78>)
 8001730:	f7ff ff51 	bl	80015d6 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001734:	2108      	movs	r1, #8
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <DS18B20_Read+0x78>)
 8001738:	f001 ff12 	bl	8003560 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8001742:	2201      	movs	r2, #1
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	b25a      	sxtb	r2, r3
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8001756:	2032      	movs	r0, #50	; 0x32
 8001758:	f7ff fee2 	bl	8001520 <delay>
	for (int i=0;i<8;i++)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b07      	cmp	r3, #7
 8001766:	ddd5      	ble.n	8001714 <DS18B20_Read+0x18>
	}
	return value;
 8001768:	79fb      	ldrb	r3, [r7, #7]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40010800 	.word	0x40010800

08001778 <verileri_oku>:


uint8_t Rx_Data[5];

void verileri_oku(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	  //BME280_Measure();
	  	  HAL_Delay (20);
 800177c:	2014      	movs	r0, #20
 800177e:	f001 fa4b 	bl	8002c18 <HAL_Delay>

		  /********************* DS18B20 *******************/

		  	  Presence = DS18B20_Start ();
 8001782:	f7ff ff45 	bl	8001610 <DS18B20_Start>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <verileri_oku+0x108>)
 800178c:	701a      	strb	r2, [r3, #0]
		  	  HAL_Delay (1);
 800178e:	2001      	movs	r0, #1
 8001790:	f001 fa42 	bl	8002c18 <HAL_Delay>
		  	  DS18B20_Write (0xCC);  // skip ROM
 8001794:	20cc      	movs	r0, #204	; 0xcc
 8001796:	f7ff ff6b 	bl	8001670 <DS18B20_Write>
		  	  DS18B20_Write (0x44);  // convert t
 800179a:	2044      	movs	r0, #68	; 0x44
 800179c:	f7ff ff68 	bl	8001670 <DS18B20_Write>
		  	  HAL_Delay (100);
 80017a0:	2064      	movs	r0, #100	; 0x64
 80017a2:	f001 fa39 	bl	8002c18 <HAL_Delay>

		  	  Presence = DS18B20_Start ();
 80017a6:	f7ff ff33 	bl	8001610 <DS18B20_Start>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <verileri_oku+0x108>)
 80017b0:	701a      	strb	r2, [r3, #0]
		        HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f001 fa30 	bl	8002c18 <HAL_Delay>
		        DS18B20_Write (0xCC);  // skip ROM
 80017b8:	20cc      	movs	r0, #204	; 0xcc
 80017ba:	f7ff ff59 	bl	8001670 <DS18B20_Write>
		        DS18B20_Write (0xBE);  // Read Scratch-pad
 80017be:	20be      	movs	r0, #190	; 0xbe
 80017c0:	f7ff ff56 	bl	8001670 <DS18B20_Write>

		        Temp_byte1 = DS18B20_Read();
 80017c4:	f7ff ff9a 	bl	80016fc <DS18B20_Read>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <verileri_oku+0x10c>)
 80017ce:	701a      	strb	r2, [r3, #0]
		  	  Temp_byte2 = DS18B20_Read();
 80017d0:	f7ff ff94 	bl	80016fc <DS18B20_Read>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <verileri_oku+0x110>)
 80017da:	701a      	strb	r2, [r3, #0]
		  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <verileri_oku+0x110>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <verileri_oku+0x10c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <verileri_oku+0x114>)
 80017f2:	801a      	strh	r2, [r3, #0]
		  	  Temperature2 = (float)TEMP/16;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <verileri_oku+0x114>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa6b 	bl	8000cd4 <__aeabi_ui2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb71 	bl	8000eec <__aeabi_fdiv>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <verileri_oku+0x118>)
 8001810:	601a      	str	r2, [r3, #0]
		  	HAL_Delay(50);
 8001812:	2032      	movs	r0, #50	; 0x32
 8001814:	f001 fa00 	bl	8002c18 <HAL_Delay>
		  	  if(Temperature2<100)
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <verileri_oku+0x118>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	491d      	ldr	r1, [pc, #116]	; (8001894 <verileri_oku+0x11c>)
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc4e 	bl	80010c0 <__aeabi_fcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <verileri_oku+0xba>
		  	  {
		  		  yuzey_Sicaklik=Temperature2;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <verileri_oku+0x118>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1a      	ldr	r2, [pc, #104]	; (8001898 <verileri_oku+0x120>)
 8001830:	6013      	str	r3, [r2, #0]
		  	  }
		  	  ortam_Sicaklik =Temperature;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <verileri_oku+0x124>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <verileri_oku+0x128>)
 8001838:	6013      	str	r3, [r2, #0]
		//  	deger = Temperature2;
		  	HAL_Delay(30);
 800183a:	201e      	movs	r0, #30
 800183c:	f001 f9ec 	bl	8002c18 <HAL_Delay>

			  	  sprintf(MSG,"%.3f C",yuzey_Sicaklik);
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <verileri_oku+0x120>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fdef 	bl	8000428 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4915      	ldr	r1, [pc, #84]	; (80018a4 <verileri_oku+0x12c>)
 8001850:	4815      	ldr	r0, [pc, #84]	; (80018a8 <verileri_oku+0x130>)
 8001852:	f005 fb43 	bl	8006edc <siprintf>
			  		 	  	 NEXTION_SendString("t0", MSG);
 8001856:	4914      	ldr	r1, [pc, #80]	; (80018a8 <verileri_oku+0x130>)
 8001858:	4814      	ldr	r0, [pc, #80]	; (80018ac <verileri_oku+0x134>)
 800185a:	f7ff fe79 	bl	8001550 <NEXTION_SendString>



		  		 	  	 sprintf(MSG,"%.3f",secilen_Temp);
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <verileri_oku+0x138>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <verileri_oku+0x13c>)
 8001866:	4810      	ldr	r0, [pc, #64]	; (80018a8 <verileri_oku+0x130>)
 8001868:	f005 fb38 	bl	8006edc <siprintf>
		  		 	     NEXTION_SendString("t1", MSG);
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <verileri_oku+0x130>)
 800186e:	4812      	ldr	r0, [pc, #72]	; (80018b8 <verileri_oku+0x140>)
 8001870:	f7ff fe6e 	bl	8001550 <NEXTION_SendString>
		  		 	  	 HAL_Delay(20);
 8001874:	2014      	movs	r0, #20
 8001876:	f001 f9cf 	bl	8002c18 <HAL_Delay>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000047c 	.word	0x2000047c
 8001884:	20000474 	.word	0x20000474
 8001888:	20000475 	.word	0x20000475
 800188c:	20000476 	.word	0x20000476
 8001890:	20000478 	.word	0x20000478
 8001894:	42c80000 	.word	0x42c80000
 8001898:	20000480 	.word	0x20000480
 800189c:	20000448 	.word	0x20000448
 80018a0:	20000484 	.word	0x20000484
 80018a4:	0800aa7c 	.word	0x0800aa7c
 80018a8:	2000044c 	.word	0x2000044c
 80018ac:	0800aa84 	.word	0x0800aa84
 80018b0:	20000008 	.word	0x20000008
 80018b4:	0800aa88 	.word	0x0800aa88
 80018b8:	0800aa90 	.word	0x0800aa90

080018bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	  if (Rx_Data[2] == 0x09) secilen_Temp=secilen_Temp-art;
 80018c4:	4b4e      	ldr	r3, [pc, #312]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 80018c6:	789b      	ldrb	r3, [r3, #2]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d10c      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0x2a>
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_UART_RxCpltCallback+0x14c>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fc46 	bl	8000168 <__aeabi_dsub>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4948      	ldr	r1, [pc, #288]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 80018e2:	e9c1 2300 	strd	r2, r3, [r1]
	  if (Rx_Data[2] == 0x0A)secilen_Temp=secilen_Temp+art;
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 80018e8:	789b      	ldrb	r3, [r3, #2]
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d10c      	bne.n	8001908 <HAL_UART_RxCpltCallback+0x4c>
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 80018f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f4:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_UART_RxCpltCallback+0x14c>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fc37 	bl	800016c <__adddf3>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4940      	ldr	r1, [pc, #256]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001904:	e9c1 2300 	strd	r2, r3, [r1]
	  if (Rx_Data[2] == 0x07) secilen_Temp=secilen_Temp-art_1;
 8001908:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 800190a:	789b      	ldrb	r3, [r3, #2]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d10c      	bne.n	800192a <HAL_UART_RxCpltCallback+0x6e>
 8001910:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_UART_RxCpltCallback+0x150>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fc24 	bl	8000168 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4937      	ldr	r1, [pc, #220]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
	  if (Rx_Data[2] == 0x08)secilen_Temp=secilen_Temp+art_1;
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 800192c:	789b      	ldrb	r3, [r3, #2]
 800192e:	2b08      	cmp	r3, #8
 8001930:	d10c      	bne.n	800194c <HAL_UART_RxCpltCallback+0x90>
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_UART_RxCpltCallback+0x150>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fc15 	bl	800016c <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	492f      	ldr	r1, [pc, #188]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001948:	e9c1 2300 	strd	r2, r3, [r1]
	  if (Rx_Data[2] == 0x04) secilen_Temp=secilen_Temp-art_5;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d10c      	bne.n	800196e <HAL_UART_RxCpltCallback+0xb2>
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_UART_RxCpltCallback+0x154>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fc02 	bl	8000168 <__aeabi_dsub>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4926      	ldr	r1, [pc, #152]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
	  if (Rx_Data[2] == 0x02)secilen_Temp=secilen_Temp+art_5;
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 8001970:	789b      	ldrb	r3, [r3, #2]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d10c      	bne.n	8001990 <HAL_UART_RxCpltCallback+0xd4>
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 8001978:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_UART_RxCpltCallback+0x154>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fbf3 	bl	800016c <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	491e      	ldr	r1, [pc, #120]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 800198c:	e9c1 2300 	strd	r2, r3, [r1]
	  if (Rx_Data[2] == 0x05) // if the dual state button is pressed
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d105      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0xe8>
	  {
		  TempSetpoint = secilen_Temp;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	491d      	ldr	r1, [pc, #116]	; (8001a14 <HAL_UART_RxCpltCallback+0x158>)
 80019a0:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  HAL_UART_Receive_DMA(&huart1, Rx_Data, 5);
 80019a4:	2205      	movs	r2, #5
 80019a6:	4916      	ldr	r1, [pc, #88]	; (8001a00 <HAL_UART_RxCpltCallback+0x144>)
 80019a8:	481b      	ldr	r0, [pc, #108]	; (8001a18 <HAL_UART_RxCpltCallback+0x15c>)
 80019aa:	f004 f978 	bl	8005c9e <HAL_UART_Receive_DMA>

	//  verileri_oku();
  	  if(ortam_Sicaklik!=0)
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_UART_RxCpltCallback+0x160>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb78 	bl	80010ac <__aeabi_fcmpeq>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10e      	bne.n	80019e0 <HAL_UART_RxCpltCallback+0x124>
	  	  {
		  	  sprintf(MSG,"%.3f C",Temperature2);
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_UART_RxCpltCallback+0x164>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd2e 	bl	8000428 <__aeabi_f2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4914      	ldr	r1, [pc, #80]	; (8001a24 <HAL_UART_RxCpltCallback+0x168>)
 80019d2:	4815      	ldr	r0, [pc, #84]	; (8001a28 <HAL_UART_RxCpltCallback+0x16c>)
 80019d4:	f005 fa82 	bl	8006edc <siprintf>
		  		 	  	 NEXTION_SendString("t0", MSG);
 80019d8:	4913      	ldr	r1, [pc, #76]	; (8001a28 <HAL_UART_RxCpltCallback+0x16c>)
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <HAL_UART_RxCpltCallback+0x170>)
 80019dc:	f7ff fdb8 	bl	8001550 <NEXTION_SendString>
	  	  }


	  		 	  	 sprintf(MSG,"%.3f",secilen_Temp);
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_UART_RxCpltCallback+0x148>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	4912      	ldr	r1, [pc, #72]	; (8001a30 <HAL_UART_RxCpltCallback+0x174>)
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <HAL_UART_RxCpltCallback+0x16c>)
 80019ea:	f005 fa77 	bl	8006edc <siprintf>
	  		 	     NEXTION_SendString("t1", MSG);
 80019ee:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_UART_RxCpltCallback+0x16c>)
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <HAL_UART_RxCpltCallback+0x178>)
 80019f2:	f7ff fdad 	bl	8001550 <NEXTION_SendString>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000488 	.word	0x20000488
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000018 	.word	0x20000018
 8001a0c:	20000020 	.word	0x20000020
 8001a10:	20000028 	.word	0x20000028
 8001a14:	20000440 	.word	0x20000440
 8001a18:	20000334 	.word	0x20000334
 8001a1c:	20000484 	.word	0x20000484
 8001a20:	20000478 	.word	0x20000478
 8001a24:	0800aa7c 	.word	0x0800aa7c
 8001a28:	2000044c 	.word	0x2000044c
 8001a2c:	0800aa84 	.word	0x0800aa84
 8001a30:	0800aa88 	.word	0x0800aa88
 8001a34:	0800aa90 	.word	0x0800aa90

08001a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3e:	f001 f889 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a42:	f000 f8ad 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a46:	f000 fa65 	bl	8001f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a4a:	f000 fa45 	bl	8001ed8 <MX_DMA_Init>
  MX_TIM2_Init();
 8001a4e:	f000 f983 	bl	8001d58 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a52:	f000 f8eb 	bl	8001c2c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a56:	f000 fa15 	bl	8001e84 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001a5a:	f000 f915 	bl	8001c88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001a5e:	4844      	ldr	r0, [pc, #272]	; (8001b70 <main+0x138>)
 8001a60:	f003 fa30 	bl	8004ec4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001a64:	4843      	ldr	r0, [pc, #268]	; (8001b74 <main+0x13c>)
 8001a66:	f003 fa2d 	bl	8004ec4 <HAL_TIM_Base_Start>
   HAL_UART_Receive_DMA(&huart1, Rx_Data, 5);
 8001a6a:	2205      	movs	r2, #5
 8001a6c:	4942      	ldr	r1, [pc, #264]	; (8001b78 <main+0x140>)
 8001a6e:	4843      	ldr	r0, [pc, #268]	; (8001b7c <main+0x144>)
 8001a70:	f004 f915 	bl	8005c9e <HAL_UART_Receive_DMA>

   BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001a74:	2304      	movs	r3, #4
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2105      	movs	r1, #5
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff fc5e 	bl	8001344 <BME280_Config>
	  HAL_Delay (200);
 8001a88:	20c8      	movs	r0, #200	; 0xc8
 8001a8a:	f001 f8c5 	bl	8002c18 <HAL_Delay>
 // HAL_TIMEx_OCN_Start_IT(&htim2, HAL_TIM_ACTIVE_CHANNEL_1);
 // HAL_TIMEx_OCN_Start_IT(&htim2, HAL_TIM_ACTIVE_CHANNEL_2);


   // Your temp setpoint
     TempSetpoint = 25;
 8001a8e:	493c      	ldr	r1, [pc, #240]	; (8001b80 <main+0x148>)
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <main+0x14c>)
 8001a96:	e9c1 2300 	strd	r2, r3, [r1]

     PID(&TPID, &Temp, &PIDOut, &TempSetpoint, 144.55, 27.74, 502.12, _PID_P_ON_E, _PID_CD_DIRECT);// 144,55 27,74 kd 502.12
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9307      	str	r3, [sp, #28]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9306      	str	r3, [sp, #24]
 8001aa2:	a329      	add	r3, pc, #164	; (adr r3, 8001b48 <main+0x110>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001aac:	a328      	add	r3, pc, #160	; (adr r3, 8001b50 <main+0x118>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab6:	a328      	add	r3, pc, #160	; (adr r3, 8001b58 <main+0x120>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <main+0x148>)
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <main+0x150>)
 8001ac4:	4931      	ldr	r1, [pc, #196]	; (8001b8c <main+0x154>)
 8001ac6:	4832      	ldr	r0, [pc, #200]	; (8001b90 <main+0x158>)
 8001ac8:	f000 fb2e 	bl	8002128 <PID>
//PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection);

     PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001acc:	2101      	movs	r1, #1
 8001ace:	4830      	ldr	r0, [pc, #192]	; (8001b90 <main+0x158>)
 8001ad0:	f000 fc5c 	bl	800238c <PID_SetMode>
     PID_SetSampleTime(&TPID, 50);
 8001ad4:	2132      	movs	r1, #50	; 0x32
 8001ad6:	482e      	ldr	r0, [pc, #184]	; (8001b90 <main+0x158>)
 8001ad8:	f000 fdc6 	bl	8002668 <PID_SetSampleTime>
     PID_SetOutputLimits(&TPID, 350, 8500);
 8001adc:	a320      	add	r3, pc, #128	; (adr r3, 8001b60 <main+0x128>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ae6:	a320      	add	r3, pc, #128	; (adr r3, 8001b68 <main+0x130>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	4828      	ldr	r0, [pc, #160]	; (8001b90 <main+0x158>)
 8001aee:	f000 fc6b 	bl	80023c8 <PID_SetOutputLimits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  verileri_oku();
 8001af2:	f7ff fe41 	bl	8001778 <verileri_oku>

	 Temp = yuzey_Sicaklik;
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <main+0x15c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc94 	bl	8000428 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4921      	ldr	r1, [pc, #132]	; (8001b8c <main+0x154>)
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]

	  PID_Compute(&TPID);
 8001b0a:	4821      	ldr	r0, [pc, #132]	; (8001b90 <main+0x158>)
 8001b0c:	f000 fb54 	bl	80021b8 <PID_Compute>

	triacDeger =	deger2 - (uint16_t)PIDOut;
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <main+0x160>)
 8001b12:	881c      	ldrh	r4, [r3, #0]
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <main+0x150>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe ffb3 	bl	8000a88 <__aeabi_d2uiz>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	1ae3      	subs	r3, r4, r3
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <main+0x164>)
 8001b2c:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Receive(&huart1, Rx_Data, 5, 1000);
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	2205      	movs	r2, #5
 8001b34:	4910      	ldr	r1, [pc, #64]	; (8001b78 <main+0x140>)
 8001b36:	4811      	ldr	r0, [pc, #68]	; (8001b7c <main+0x144>)
 8001b38:	f004 f80f 	bl	8005b5a <HAL_UART_Receive>
  	  HAL_Delay (30);
 8001b3c:	201e      	movs	r0, #30
 8001b3e:	f001 f86b 	bl	8002c18 <HAL_Delay>
	  verileri_oku();
 8001b42:	e7d6      	b.n	8001af2 <main+0xba>
 8001b44:	f3af 8000 	nop.w
 8001b48:	851eb852 	.word	0x851eb852
 8001b4c:	407f61eb 	.word	0x407f61eb
 8001b50:	a3d70a3d 	.word	0xa3d70a3d
 8001b54:	403bbd70 	.word	0x403bbd70
 8001b58:	9999999a 	.word	0x9999999a
 8001b5c:	40621199 	.word	0x40621199
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40c09a00 	.word	0x40c09a00
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	4075e000 	.word	0x4075e000
 8001b70:	200002a4 	.word	0x200002a4
 8001b74:	200002ec 	.word	0x200002ec
 8001b78:	20000488 	.word	0x20000488
 8001b7c:	20000334 	.word	0x20000334
 8001b80:	20000440 	.word	0x20000440
 8001b84:	40390000 	.word	0x40390000
 8001b88:	20000438 	.word	0x20000438
 8001b8c:	20000430 	.word	0x20000430
 8001b90:	200003c0 	.word	0x200003c0
 8001b94:	20000480 	.word	0x20000480
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	20000012 	.word	0x20000012

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	; 0x40
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	2228      	movs	r2, #40	; 0x28
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fb1a 	bl	80061e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fd01 	bl	80045f0 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001bf4:	f000 fa56 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 ff6e 	bl	8004af4 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c1e:	f000 fa41 	bl	80020a4 <Error_Handler>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3740      	adds	r7, #64	; 0x40
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <MX_I2C1_Init+0x54>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <MX_I2C1_Init+0x58>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c6a:	f001 fcc1 	bl	80035f0 <HAL_I2C_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c74:	f000 fa16 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000250 	.word	0x20000250
 8001c80:	40005400 	.word	0x40005400
 8001c84:	000186a0 	.word	0x000186a0

08001c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <MX_TIM1_Init+0xcc>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cbc:	2247      	movs	r2, #71	; 0x47
 8001cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001ce2:	f003 f89f 	bl	8004e24 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001cec:	f000 f9da 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001cfe:	f003 f9db 	bl	80050b8 <HAL_TIM_ConfigClockSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001d08:	f000 f9cc 	bl	80020a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001d1c:	f003 fa90 	bl	8005240 <HAL_TIM_SlaveConfigSynchro>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001d26:	f000 f9bd 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MX_TIM1_Init+0xc8>)
 8001d38:	f003 fdd2 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001d42:	f000 f9af 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3730      	adds	r7, #48	; 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200002a4 	.word	0x200002a4
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b092      	sub	sp, #72	; 0x48
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d86:	463b      	mov	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001da2:	2247      	movs	r2, #71	; 0x47
 8001da4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001dae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001db2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc0:	482f      	ldr	r0, [pc, #188]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001dc2:	f003 f82f 	bl	8004e24 <HAL_TIM_Base_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001dcc:	f000 f96a 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001dde:	f003 f96b 	bl	80050b8 <HAL_TIM_ConfigClockSource>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001de8:	f000 f95c 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001dec:	4824      	ldr	r0, [pc, #144]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001dee:	f003 f8b3 	bl	8004f58 <HAL_TIM_OC_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001df8:	f000 f954 	bl	80020a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001e00:	2320      	movs	r3, #32
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481d      	ldr	r0, [pc, #116]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001e0c:	f003 fa18 	bl	8005240 <HAL_TIM_SlaveConfigSynchro>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001e16:	f000 f945 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	4815      	ldr	r0, [pc, #84]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001e2a:	f003 fd59 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001e34:	f000 f936 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001e50:	f003 f8da 	bl	8005008 <HAL_TIM_OC_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001e5a:	f000 f923 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8001e5e:	2364      	movs	r3, #100	; 0x64
 8001e60:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e62:	463b      	mov	r3, r7
 8001e64:	2204      	movs	r2, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM2_Init+0x128>)
 8001e6a:	f003 f8cd 	bl	8005008 <HAL_TIM_OC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001e74:	f000 f916 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3748      	adds	r7, #72	; 0x48
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200002ec 	.word	0x200002ec

08001e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <MX_USART1_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	f003 fd6e 	bl	800599c <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f000 f8ed 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000334 	.word	0x20000334
 8001ed4:	40013800 	.word	0x40013800

08001ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_DMA_Init+0x38>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <MX_DMA_Init+0x38>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6153      	str	r3, [r2, #20]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_DMA_Init+0x38>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	200f      	movs	r0, #15
 8001efc:	f000 ff87 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f00:	200f      	movs	r0, #15
 8001f02:	f000 ffa0 	bl	8002e46 <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a41      	ldr	r2, [pc, #260]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b39      	ldr	r3, [pc, #228]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a35      	ldr	r2, [pc, #212]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f76:	f043 0308 	orr.w	r3, r3, #8
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <MX_GPIO_Init+0x120>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	482a      	ldr	r0, [pc, #168]	; (8002038 <MX_GPIO_Init+0x124>)
 8001f90:	f001 fafd 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	210c      	movs	r1, #12
 8001f98:	4828      	ldr	r0, [pc, #160]	; (800203c <MX_GPIO_Init+0x128>)
 8001f9a:	f001 faf8 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa4:	4826      	ldr	r0, [pc, #152]	; (8002040 <MX_GPIO_Init+0x12c>)
 8001fa6:	f001 faf2 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481d      	ldr	r0, [pc, #116]	; (8002038 <MX_GPIO_Init+0x124>)
 8001fc4:	f001 f948 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZEROGECIS_Pin */
  GPIO_InitStruct.Pin = ZEROGECIS_Pin;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_GPIO_Init+0x130>)
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZEROGECIS_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4818      	ldr	r0, [pc, #96]	; (800203c <MX_GPIO_Init+0x128>)
 8001fdc:	f001 f93c 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4811      	ldr	r0, [pc, #68]	; (800203c <MX_GPIO_Init+0x128>)
 8001ff8:	f001 f92e 	bl	8003258 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIAC_Pin */
  GPIO_InitStruct.Pin = TRIAC_Pin;
 8001ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2302      	movs	r3, #2
 800200c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIAC_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	4619      	mov	r1, r3
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <MX_GPIO_Init+0x12c>)
 8002016:	f001 f91f 	bl	8003258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2007      	movs	r0, #7
 8002020:	f000 fef5 	bl	8002e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002024:	2007      	movs	r0, #7
 8002026:	f000 ff0e 	bl	8002e46 <HAL_NVIC_EnableIRQ>

}
 800202a:	bf00      	nop
 800202c:	3720      	adds	r7, #32
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40011000 	.word	0x40011000
 800203c:	40010800 	.word	0x40010800
 8002040:	40010c00 	.word	0x40010c00
 8002044:	10110000 	.word	0x10110000

08002048 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == ZEROGECIS_Pin)
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d11a      	bne.n	800208e <HAL_GPIO_EXTI_Callback+0x46>
{
if(HAL_GPIO_ReadPin(ZEROGECIS_GPIO_Port, ZEROGECIS_Pin)==1)
 8002058:	2102      	movs	r1, #2
 800205a:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_GPIO_EXTI_Callback+0x50>)
 800205c:	f001 fa80 	bl	8003560 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	d113      	bne.n	800208e <HAL_GPIO_EXTI_Callback+0x46>
{

	  delay_us(triacDeger);// alpha = 9500;
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_GPIO_EXTI_Callback+0x54>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fa40 	bl	80014f0 <delay_us>
	 HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, 1);//TRİAC 1
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002076:	480a      	ldr	r0, [pc, #40]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x58>)
 8002078:	f001 fa89 	bl	800358e <HAL_GPIO_WritePin>
	  delay_us(50);
 800207c:	2032      	movs	r0, #50	; 0x32
 800207e:	f7ff fa37 	bl	80014f0 <delay_us>
	 HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, 0);//TRİAC 1
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x58>)
 800208a:	f001 fa80 	bl	800358e <HAL_GPIO_WritePin>
}

}
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40010800 	.word	0x40010800
 800209c:	20000012 	.word	0x20000012
 80020a0:	40010c00 	.word	0x40010c00

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>

080020ae <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80020de:	f7fe fc8b 	bl	80009f8 <__aeabi_dcmpgt>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80020f4:	e011      	b.n	800211a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002102:	f7fe fc5b 	bl	80009bc <__aeabi_dcmplt>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d100      	bne.n	800210e <PID_Init+0x60>
}
 800210c:	e005      	b.n	800211a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	0000      	movs	r0, r0
 8002124:	0000      	movs	r0, r0
	...

08002128 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af06      	add	r7, sp, #24
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800214e:	a318      	add	r3, pc, #96	; (adr r3, 80021b0 <PID+0x88>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	e9cd 2300 	strd	r2, r3, [sp]
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f931 	bl	80023c8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2264      	movs	r2, #100	; 0x64
 800216a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800216c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002170:	4619      	mov	r1, r3
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fa38 	bl	80025e8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002178:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800217c:	9304      	str	r3, [sp, #16]
 800217e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002182:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800218a:	e9cd 2300 	strd	r2, r3, [sp]
 800218e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f984 	bl	80024a0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002198:	f000 fd34 	bl	8002c04 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
	
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	00000000 	.word	0x00000000
 80021b4:	406fe000 	.word	0x406fe000

080021b8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <PID_Compute+0x14>
	{
		return _FALSE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e0db      	b.n	8002384 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80021cc:	f000 fd1a 	bl	8002c04 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	f0c0 80cd 	bcc.w	8002382 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002200:	f7fd ffb2 	bl	8000168 <__aeabi_dsub>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002212:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002216:	f7fd ffa7 	bl	8000168 <__aeabi_dsub>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800222e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002232:	f7fe f951 	bl	80004d8 <__aeabi_dmul>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4620      	mov	r0, r4
 800223c:	4629      	mov	r1, r5
 800223e:	f7fd ff95 	bl	800016c <__adddf3>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d114      	bne.n	800227e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002264:	f7fe f938 	bl	80004d8 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fd ff7a 	bl	8000168 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800228a:	f7fe fbb5 	bl	80009f8 <__aeabi_dcmpgt>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80022a0:	e010      	b.n	80022c4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80022ae:	f7fe fb85 	bl	80009bc <__aeabi_dcmplt>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d6:	f7fe f8ff 	bl	80004d8 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80022e2:	e005      	b.n	80022f0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002300:	f7fe f8ea 	bl	80004d8 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	f7fd ff2c 	bl	8000168 <__aeabi_dsub>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002318:	f7fd ff28 	bl	800016c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800232a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800232e:	f7fe fb63 	bl	80009f8 <__aeabi_dcmpgt>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800233e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002342:	e00e      	b.n	8002362 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800234a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800234e:	f7fe fb35 	bl	80009bc <__aeabi_dcmplt>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800235e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002374:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002382:	2300      	movs	r3, #0
	}
	
}
 8002384:	4618      	mov	r0, r3
 8002386:	3730      	adds	r7, #48	; 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}

0800238c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b01      	cmp	r3, #1
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <PID_SetMode+0x2e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fe7a 	bl	80020ae <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	705a      	strb	r2, [r3, #1]
	
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023dc:	f7fe fb02 	bl	80009e4 <__aeabi_dcmpge>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d158      	bne.n	8002498 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80023e6:	68f9      	ldr	r1, [r7, #12]
 80023e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ec:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04b      	beq.n	800249a <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002410:	f7fe faf2 	bl	80009f8 <__aeabi_dcmpgt>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002424:	e9c1 2300 	strd	r2, r3, [r1]
 8002428:	e012      	b.n	8002450 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002438:	f7fe fac0 	bl	80009bc <__aeabi_dcmplt>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800244c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800245c:	f7fe facc 	bl	80009f8 <__aeabi_dcmpgt>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002472:	e012      	b.n	800249a <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002480:	f7fe fa9c 	bl	80009bc <__aeabi_dcmplt>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002496:	e000      	b.n	800249a <PID_SetOutputLimits+0xd2>
		return;
 8002498:	bf00      	nop
		}
		else { }
		
	}
	
}
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b8:	f7fe fa80 	bl	80009bc <__aeabi_dcmplt>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 808b 	bne.w	80025da <PID_SetTunings2+0x13a>
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024d0:	f7fe fa74 	bl	80009bc <__aeabi_dcmplt>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d17f      	bne.n	80025da <PID_SetTunings2+0x13a>
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024e6:	f7fe fa69 	bl	80009bc <__aeabi_dcmplt>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d174      	bne.n	80025da <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80024f6:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80024f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002512:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800251c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002526:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ff58 	bl	80003e4 <__aeabi_ui2d>
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <PID_SetTunings2+0x144>)
 800253a:	f7fe f8f7 	bl	800072c <__aeabi_ddiv>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800254c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002554:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002558:	f7fd ffbe 	bl	80004d8 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002566:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800256a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800256e:	f7fe f8dd 	bl	800072c <__aeabi_ddiv>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	78db      	ldrb	r3, [r3, #3]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d12b      	bne.n	80025dc <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800258a:	f04f 0000 	mov.w	r0, #0
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	f7fd fde9 	bl	8000168 <__aeabi_dsub>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	f7fd fddb 	bl	8000168 <__aeabi_dsub>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	f7fd fdcd 	bl	8000168 <__aeabi_dsub>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80025d8:	e000      	b.n	80025dc <PID_SetTunings2+0x13c>
		return;
 80025da:	bf00      	nop
		
	}
	
}
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	408f4000 	.word	0x408f4000

080025e8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02e      	beq.n	800265a <PID_SetControllerDirection+0x72>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	78db      	ldrb	r3, [r3, #3]
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	429a      	cmp	r2, r3
 8002604:	d029      	beq.n	800265a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800260c:	f04f 0000 	mov.w	r0, #0
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f7fd fda8 	bl	8000168 <__aeabi_dsub>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	f7fd fd9a 	bl	8000168 <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	f7fd fd8c 	bl	8000168 <__aeabi_dsub>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	70da      	strb	r2, [r3, #3]
	
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	dd2e      	ble.n	80026d6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	f7fd fec3 	bl	8000404 <__aeabi_i2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd feac 	bl	80003e4 <__aeabi_ui2d>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fe f84a 	bl	800072c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80026a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026aa:	f7fd ff15 	bl	80004d8 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80026be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c2:	f7fe f833 	bl	800072c <__aeabi_ddiv>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_MspInit+0x5c>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4a14      	ldr	r2, [pc, #80]	; (800273c <HAL_MspInit+0x5c>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6193      	str	r3, [r2, #24]
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_MspInit+0x5c>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_MspInit+0x5c>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_MspInit+0x5c>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_MspInit+0x5c>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_MspInit+0x60>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_MspInit+0x60>)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40021000 	.word	0x40021000
 8002740:	40010000 	.word	0x40010000

08002744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_I2C_MspInit+0x70>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d123      	bne.n	80027ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_I2C_MspInit+0x74>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_I2C_MspInit+0x74>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_I2C_MspInit+0x74>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002780:	2312      	movs	r3, #18
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4619      	mov	r1, r3
 800278e:	480b      	ldr	r0, [pc, #44]	; (80027bc <HAL_I2C_MspInit+0x78>)
 8002790:	f000 fd62 	bl	8003258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_I2C_MspInit+0x74>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_I2C_MspInit+0x74>)
 800279a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800279e:	61d3      	str	r3, [r2, #28]
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_I2C_MspInit+0x74>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027ac:	bf00      	nop
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40005400 	.word	0x40005400
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010c00 	.word	0x40010c00

080027c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_TIM_Base_MspInit+0x58>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10c      	bne.n	80027ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_TIM_Base_MspInit+0x5c>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_TIM_Base_MspInit+0x5c>)
 80027d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027dc:	6193      	str	r3, [r2, #24]
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_TIM_Base_MspInit+0x5c>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027ea:	e010      	b.n	800280e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d10b      	bne.n	800280e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_TIM_Base_MspInit+0x5c>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_TIM_Base_MspInit+0x5c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_TIM_Base_MspInit+0x5c>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <HAL_UART_MspInit+0xd8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d157      	bne.n	80028f0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_UART_MspInit+0xdc>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_UART_MspInit+0xdc>)
 8002846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_UART_MspInit+0xdc>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_UART_MspInit+0xdc>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_UART_MspInit+0xdc>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_UART_MspInit+0xdc>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0310 	add.w	r3, r7, #16
 8002882:	4619      	mov	r1, r3
 8002884:	481e      	ldr	r0, [pc, #120]	; (8002900 <HAL_UART_MspInit+0xe0>)
 8002886:	f000 fce7 	bl	8003258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	4619      	mov	r1, r3
 800289e:	4818      	ldr	r0, [pc, #96]	; (8002900 <HAL_UART_MspInit+0xe0>)
 80028a0:	f000 fcda 	bl	8003258 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_UART_MspInit+0xe8>)
 80028a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028d4:	480b      	ldr	r0, [pc, #44]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028d6:	f000 fad1 	bl	8002e7c <HAL_DMA_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80028e0:	f7ff fbe0 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_UART_MspInit+0xe4>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010800 	.word	0x40010800
 8002904:	20000378 	.word	0x20000378
 8002908:	40020058 	.word	0x40020058

0800290c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <NMI_Handler+0x4>

08002912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <MemManage_Handler+0x4>

0800291e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <UsageFault_Handler+0x4>

0800292a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002952:	f000 f945 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}

0800295a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZEROGECIS_Pin);
 800295e:	2002      	movs	r0, #2
 8002960:	f000 fe2e 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <DMA1_Channel5_IRQHandler+0x10>)
 800296e:	f000 fb3f 	bl	8002ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000378 	.word	0x20000378

0800297c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return 1;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <_kill>:

int _kill(int pid, int sig)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002994:	f003 fbfe 	bl	8006194 <__errno>
 8002998:	4603      	mov	r3, r0
 800299a:	2216      	movs	r2, #22
 800299c:	601a      	str	r2, [r3, #0]
  return -1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_exit>:

void _exit (int status)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029b2:	f04f 31ff 	mov.w	r1, #4294967295
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffe7 	bl	800298a <_kill>
  while (1) {}    /* Make sure we hang here */
 80029bc:	e7fe      	b.n	80029bc <_exit+0x12>

080029be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e00a      	b.n	80029e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d0:	f3af 8000 	nop.w
 80029d4:	4601      	mov	r1, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	60ba      	str	r2, [r7, #8]
 80029dc:	b2ca      	uxtb	r2, r1
 80029de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3301      	adds	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dbf0      	blt.n	80029d0 <_read+0x12>
  }

  return len;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e009      	b.n	8002a1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	60ba      	str	r2, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	dbf1      	blt.n	8002a0a <_write+0x12>
  }
  return len;
 8002a26:	687b      	ldr	r3, [r7, #4]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_close>:

int _close(int file)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a56:	605a      	str	r2, [r3, #4]
  return 0;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <_isatty>:

int _isatty(int file)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <_sbrk+0x5c>)
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <_sbrk+0x60>)
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <_sbrk+0x64>)
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <_sbrk+0x68>)
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac0:	f003 fb68 	bl	8006194 <__errno>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	e009      	b.n	8002ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <_sbrk+0x64>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <_sbrk+0x64>)
 8002ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20005000 	.word	0x20005000
 8002af0:	00000400 	.word	0x00000400
 8002af4:	20000490 	.word	0x20000490
 8002af8:	200004a8 	.word	0x200004a8

08002afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b08:	480c      	ldr	r0, [pc, #48]	; (8002b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b0a:	490d      	ldr	r1, [pc, #52]	; (8002b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b2e:	f7ff ffe5 	bl	8002afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f003 fb35 	bl	80061a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b36:	f7fe ff7f 	bl	8001a38 <main>
  bx lr
 8002b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b40:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002b44:	0800af6c 	.word	0x0800af6c
  ldr r2, =_sbss
 8002b48:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002b4c:	200004a8 	.word	0x200004a8

08002b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC1_2_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_Init+0x28>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_Init+0x28>)
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 f947 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6a:	200f      	movs	r0, #15
 8002b6c:	f000 f808 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fdb6 	bl	80026e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f95f 	bl	8002e62 <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f000 f927 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000030 	.word	0x20000030
 8002bd8:	20000038 	.word	0x20000038
 8002bdc:	20000034 	.word	0x20000034

08002be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_IncTick+0x1c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_IncTick+0x20>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <HAL_IncTick+0x20>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000038 	.word	0x20000038
 8002c00:	20000494 	.word	0x20000494

08002c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return uwTick;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_GetTick+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000494 	.word	0x20000494

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffe0 	bl	8002c04 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000038 	.word	0x20000038

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4906      	ldr	r1, [pc, #24]	; (8002cf8 <__NVIC_EnableIRQ+0x34>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff90 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff2d 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff42 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff90 	bl	8002d50 <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5f 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff35 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e043      	b.n	8002f1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_DMA_Init+0xa8>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <HAL_DMA_Init+0xac>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	009a      	lsls	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_DMA_Init+0xb0>)
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ec6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	bffdfff8 	.word	0xbffdfff8
 8002f28:	cccccccd 	.word	0xcccccccd
 8002f2c:	40020000 	.word	0x40020000

08002f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_DMA_Start_IT+0x20>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e04a      	b.n	8002fe6 <HAL_DMA_Start_IT+0xb6>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d13a      	bne.n	8002fd8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f938 	bl	80031fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 020e 	orr.w	r2, r2, #14
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e00f      	b.n	8002fc6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0204 	bic.w	r2, r2, #4
 8002fb4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 020a 	orr.w	r2, r2, #10
 8002fc4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e005      	b.n	8002fe4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2204      	movs	r2, #4
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d04f      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xc8>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d04a      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d029      	beq.n	800309e <HAL_DMA_IRQHandler+0xae>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_DMA_IRQHandler+0x1f4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0xaa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a63      	ldr	r2, [pc, #396]	; (80031e8 <HAL_DMA_IRQHandler+0x1f8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01a      	beq.n	8003094 <HAL_DMA_IRQHandler+0xa4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a62      	ldr	r2, [pc, #392]	; (80031ec <HAL_DMA_IRQHandler+0x1fc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d012      	beq.n	800308e <HAL_DMA_IRQHandler+0x9e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a60      	ldr	r2, [pc, #384]	; (80031f0 <HAL_DMA_IRQHandler+0x200>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00a      	beq.n	8003088 <HAL_DMA_IRQHandler+0x98>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5f      	ldr	r2, [pc, #380]	; (80031f4 <HAL_DMA_IRQHandler+0x204>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <HAL_DMA_IRQHandler+0x92>
 800307c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003080:	e00e      	b.n	80030a0 <HAL_DMA_IRQHandler+0xb0>
 8003082:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003086:	e00b      	b.n	80030a0 <HAL_DMA_IRQHandler+0xb0>
 8003088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800308c:	e008      	b.n	80030a0 <HAL_DMA_IRQHandler+0xb0>
 800308e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003092:	e005      	b.n	80030a0 <HAL_DMA_IRQHandler+0xb0>
 8003094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003098:	e002      	b.n	80030a0 <HAL_DMA_IRQHandler+0xb0>
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	e000      	b.n	80030a0 <HAL_DMA_IRQHandler+0xb0>
 800309e:	2304      	movs	r3, #4
 80030a0:	4a55      	ldr	r2, [pc, #340]	; (80031f8 <HAL_DMA_IRQHandler+0x208>)
 80030a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8094 	beq.w	80031d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	e08e      	b.n	80031d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2202      	movs	r2, #2
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d056      	beq.n	8003176 <HAL_DMA_IRQHandler+0x186>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d051      	beq.n	8003176 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 020a 	bic.w	r2, r2, #10
 80030ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_DMA_IRQHandler+0x1f0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d029      	beq.n	8003156 <HAL_DMA_IRQHandler+0x166>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a37      	ldr	r2, [pc, #220]	; (80031e4 <HAL_DMA_IRQHandler+0x1f4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_DMA_IRQHandler+0x162>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <HAL_DMA_IRQHandler+0x1f8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01a      	beq.n	800314c <HAL_DMA_IRQHandler+0x15c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a34      	ldr	r2, [pc, #208]	; (80031ec <HAL_DMA_IRQHandler+0x1fc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d012      	beq.n	8003146 <HAL_DMA_IRQHandler+0x156>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a32      	ldr	r2, [pc, #200]	; (80031f0 <HAL_DMA_IRQHandler+0x200>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00a      	beq.n	8003140 <HAL_DMA_IRQHandler+0x150>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_DMA_IRQHandler+0x204>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <HAL_DMA_IRQHandler+0x14a>
 8003134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003138:	e00e      	b.n	8003158 <HAL_DMA_IRQHandler+0x168>
 800313a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313e:	e00b      	b.n	8003158 <HAL_DMA_IRQHandler+0x168>
 8003140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003144:	e008      	b.n	8003158 <HAL_DMA_IRQHandler+0x168>
 8003146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800314a:	e005      	b.n	8003158 <HAL_DMA_IRQHandler+0x168>
 800314c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003150:	e002      	b.n	8003158 <HAL_DMA_IRQHandler+0x168>
 8003152:	2320      	movs	r3, #32
 8003154:	e000      	b.n	8003158 <HAL_DMA_IRQHandler+0x168>
 8003156:	2302      	movs	r3, #2
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_DMA_IRQHandler+0x208>)
 800315a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d034      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003174:	e02f      	b.n	80031d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2208      	movs	r2, #8
 800317c:	409a      	lsls	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d028      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x1e8>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d023      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020e 	bic.w	r2, r2, #14
 800319e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
    }
  }
  return;
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
}
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40020008 	.word	0x40020008
 80031e4:	4002001c 	.word	0x4002001c
 80031e8:	40020030 	.word	0x40020030
 80031ec:	40020044 	.word	0x40020044
 80031f0:	40020058 	.word	0x40020058
 80031f4:	4002006c 	.word	0x4002006c
 80031f8:	40020000 	.word	0x40020000

080031fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f202 	lsl.w	r2, r1, r2
 8003218:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b10      	cmp	r3, #16
 8003228:	d108      	bne.n	800323c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800323a:	e007      	b.n	800324c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
	...

08003258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003258:	b480      	push	{r7}
 800325a:	b08b      	sub	sp, #44	; 0x2c
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326a:	e169      	b.n	8003540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800326c:	2201      	movs	r2, #1
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	429a      	cmp	r2, r3
 8003286:	f040 8158 	bne.w	800353a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a9a      	ldr	r2, [pc, #616]	; (80034f8 <HAL_GPIO_Init+0x2a0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d05e      	beq.n	8003352 <HAL_GPIO_Init+0xfa>
 8003294:	4a98      	ldr	r2, [pc, #608]	; (80034f8 <HAL_GPIO_Init+0x2a0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d875      	bhi.n	8003386 <HAL_GPIO_Init+0x12e>
 800329a:	4a98      	ldr	r2, [pc, #608]	; (80034fc <HAL_GPIO_Init+0x2a4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d058      	beq.n	8003352 <HAL_GPIO_Init+0xfa>
 80032a0:	4a96      	ldr	r2, [pc, #600]	; (80034fc <HAL_GPIO_Init+0x2a4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d86f      	bhi.n	8003386 <HAL_GPIO_Init+0x12e>
 80032a6:	4a96      	ldr	r2, [pc, #600]	; (8003500 <HAL_GPIO_Init+0x2a8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d052      	beq.n	8003352 <HAL_GPIO_Init+0xfa>
 80032ac:	4a94      	ldr	r2, [pc, #592]	; (8003500 <HAL_GPIO_Init+0x2a8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d869      	bhi.n	8003386 <HAL_GPIO_Init+0x12e>
 80032b2:	4a94      	ldr	r2, [pc, #592]	; (8003504 <HAL_GPIO_Init+0x2ac>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d04c      	beq.n	8003352 <HAL_GPIO_Init+0xfa>
 80032b8:	4a92      	ldr	r2, [pc, #584]	; (8003504 <HAL_GPIO_Init+0x2ac>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d863      	bhi.n	8003386 <HAL_GPIO_Init+0x12e>
 80032be:	4a92      	ldr	r2, [pc, #584]	; (8003508 <HAL_GPIO_Init+0x2b0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d046      	beq.n	8003352 <HAL_GPIO_Init+0xfa>
 80032c4:	4a90      	ldr	r2, [pc, #576]	; (8003508 <HAL_GPIO_Init+0x2b0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d85d      	bhi.n	8003386 <HAL_GPIO_Init+0x12e>
 80032ca:	2b12      	cmp	r3, #18
 80032cc:	d82a      	bhi.n	8003324 <HAL_GPIO_Init+0xcc>
 80032ce:	2b12      	cmp	r3, #18
 80032d0:	d859      	bhi.n	8003386 <HAL_GPIO_Init+0x12e>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_GPIO_Init+0x80>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	08003353 	.word	0x08003353
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800333f 	.word	0x0800333f
 80032e4:	08003381 	.word	0x08003381
 80032e8:	08003387 	.word	0x08003387
 80032ec:	08003387 	.word	0x08003387
 80032f0:	08003387 	.word	0x08003387
 80032f4:	08003387 	.word	0x08003387
 80032f8:	08003387 	.word	0x08003387
 80032fc:	08003387 	.word	0x08003387
 8003300:	08003387 	.word	0x08003387
 8003304:	08003387 	.word	0x08003387
 8003308:	08003387 	.word	0x08003387
 800330c:	08003387 	.word	0x08003387
 8003310:	08003387 	.word	0x08003387
 8003314:	08003387 	.word	0x08003387
 8003318:	08003387 	.word	0x08003387
 800331c:	08003335 	.word	0x08003335
 8003320:	08003349 	.word	0x08003349
 8003324:	4a79      	ldr	r2, [pc, #484]	; (800350c <HAL_GPIO_Init+0x2b4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800332a:	e02c      	b.n	8003386 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	623b      	str	r3, [r7, #32]
          break;
 8003332:	e029      	b.n	8003388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	3304      	adds	r3, #4
 800333a:	623b      	str	r3, [r7, #32]
          break;
 800333c:	e024      	b.n	8003388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	3308      	adds	r3, #8
 8003344:	623b      	str	r3, [r7, #32]
          break;
 8003346:	e01f      	b.n	8003388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	330c      	adds	r3, #12
 800334e:	623b      	str	r3, [r7, #32]
          break;
 8003350:	e01a      	b.n	8003388 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800335a:	2304      	movs	r3, #4
 800335c:	623b      	str	r3, [r7, #32]
          break;
 800335e:	e013      	b.n	8003388 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003368:	2308      	movs	r3, #8
 800336a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	611a      	str	r2, [r3, #16]
          break;
 8003372:	e009      	b.n	8003388 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003374:	2308      	movs	r3, #8
 8003376:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	615a      	str	r2, [r3, #20]
          break;
 800337e:	e003      	b.n	8003388 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003380:	2300      	movs	r3, #0
 8003382:	623b      	str	r3, [r7, #32]
          break;
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x130>
          break;
 8003386:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2bff      	cmp	r3, #255	; 0xff
 800338c:	d801      	bhi.n	8003392 <HAL_GPIO_Init+0x13a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	e001      	b.n	8003396 <HAL_GPIO_Init+0x13e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2bff      	cmp	r3, #255	; 0xff
 800339c:	d802      	bhi.n	80033a4 <HAL_GPIO_Init+0x14c>
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	e002      	b.n	80033aa <HAL_GPIO_Init+0x152>
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	3b08      	subs	r3, #8
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	210f      	movs	r1, #15
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	401a      	ands	r2, r3
 80033bc:	6a39      	ldr	r1, [r7, #32]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	431a      	orrs	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80b1 	beq.w	800353a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033d8:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_GPIO_Init+0x2b8>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_GPIO_Init+0x2b8>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6193      	str	r3, [r2, #24]
 80033e4:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_GPIO_Init+0x2b8>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_GPIO_Init+0x2bc>)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a40      	ldr	r2, [pc, #256]	; (8003518 <HAL_GPIO_Init+0x2c0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d013      	beq.n	8003444 <HAL_GPIO_Init+0x1ec>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3f      	ldr	r2, [pc, #252]	; (800351c <HAL_GPIO_Init+0x2c4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00d      	beq.n	8003440 <HAL_GPIO_Init+0x1e8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3e      	ldr	r2, [pc, #248]	; (8003520 <HAL_GPIO_Init+0x2c8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <HAL_GPIO_Init+0x1e4>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <HAL_GPIO_Init+0x2cc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_GPIO_Init+0x1e0>
 8003434:	2303      	movs	r3, #3
 8003436:	e006      	b.n	8003446 <HAL_GPIO_Init+0x1ee>
 8003438:	2304      	movs	r3, #4
 800343a:	e004      	b.n	8003446 <HAL_GPIO_Init+0x1ee>
 800343c:	2302      	movs	r3, #2
 800343e:	e002      	b.n	8003446 <HAL_GPIO_Init+0x1ee>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_GPIO_Init+0x1ee>
 8003444:	2300      	movs	r3, #0
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	f002 0203 	and.w	r2, r2, #3
 800344c:	0092      	lsls	r2, r2, #2
 800344e:	4093      	lsls	r3, r2
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003456:	492f      	ldr	r1, [pc, #188]	; (8003514 <HAL_GPIO_Init+0x2bc>)
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	492c      	ldr	r1, [pc, #176]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	43db      	mvns	r3, r3
 8003486:	4928      	ldr	r1, [pc, #160]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 8003488:	4013      	ands	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4922      	ldr	r1, [pc, #136]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	491e      	ldr	r1, [pc, #120]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4918      	ldr	r1, [pc, #96]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	4914      	ldr	r1, [pc, #80]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034d8:	4013      	ands	r3, r2
 80034da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <HAL_GPIO_Init+0x2d0>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60cb      	str	r3, [r1, #12]
 80034f4:	e021      	b.n	800353a <HAL_GPIO_Init+0x2e2>
 80034f6:	bf00      	nop
 80034f8:	10320000 	.word	0x10320000
 80034fc:	10310000 	.word	0x10310000
 8003500:	10220000 	.word	0x10220000
 8003504:	10210000 	.word	0x10210000
 8003508:	10120000 	.word	0x10120000
 800350c:	10110000 	.word	0x10110000
 8003510:	40021000 	.word	0x40021000
 8003514:	40010000 	.word	0x40010000
 8003518:	40010800 	.word	0x40010800
 800351c:	40010c00 	.word	0x40010c00
 8003520:	40011000 	.word	0x40011000
 8003524:	40011400 	.word	0x40011400
 8003528:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_GPIO_Init+0x304>)
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	43db      	mvns	r3, r3
 8003534:	4909      	ldr	r1, [pc, #36]	; (800355c <HAL_GPIO_Init+0x304>)
 8003536:	4013      	ands	r3, r2
 8003538:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	3301      	adds	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	f47f ae8e 	bne.w	800326c <HAL_GPIO_Init+0x14>
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	372c      	adds	r7, #44	; 0x2c
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40010400 	.word	0x40010400

08003560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e001      	b.n	8003582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	807b      	strh	r3, [r7, #2]
 800359a:	4613      	mov	r3, r2
 800359c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800359e:	787b      	ldrb	r3, [r7, #1]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035aa:	e003      	b.n	80035b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fd32 	bl	8002048 <HAL_GPIO_EXTI_Callback>
  }
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40010400 	.word	0x40010400

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e12b      	b.n	800385a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff f894 	bl	8002744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003654:	f001 fba0 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8003658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a81      	ldr	r2, [pc, #516]	; (8003864 <HAL_I2C_Init+0x274>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d807      	bhi.n	8003674 <HAL_I2C_Init+0x84>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a80      	ldr	r2, [pc, #512]	; (8003868 <HAL_I2C_Init+0x278>)
 8003668:	4293      	cmp	r3, r2
 800366a:	bf94      	ite	ls
 800366c:	2301      	movls	r3, #1
 800366e:	2300      	movhi	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e006      	b.n	8003682 <HAL_I2C_Init+0x92>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a7d      	ldr	r2, [pc, #500]	; (800386c <HAL_I2C_Init+0x27c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0e7      	b.n	800385a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a78      	ldr	r2, [pc, #480]	; (8003870 <HAL_I2C_Init+0x280>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9b      	lsrs	r3, r3, #18
 8003694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_I2C_Init+0x274>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d802      	bhi.n	80036c4 <HAL_I2C_Init+0xd4>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3301      	adds	r3, #1
 80036c2:	e009      	b.n	80036d8 <HAL_I2C_Init+0xe8>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_I2C_Init+0x284>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	3301      	adds	r3, #1
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	495c      	ldr	r1, [pc, #368]	; (8003864 <HAL_I2C_Init+0x274>)
 80036f4:	428b      	cmp	r3, r1
 80036f6:	d819      	bhi.n	800372c <HAL_I2C_Init+0x13c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e59      	subs	r1, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fbb1 f3f3 	udiv	r3, r1, r3
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800370c:	400b      	ands	r3, r1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_I2C_Init+0x138>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e59      	subs	r1, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003726:	e051      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 8003728:	2304      	movs	r3, #4
 800372a:	e04f      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d111      	bne.n	8003758 <HAL_I2C_Init+0x168>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	440b      	add	r3, r1
 8003742:	fbb0 f3f3 	udiv	r3, r0, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e012      	b.n	800377e <HAL_I2C_Init+0x18e>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Init+0x196>
 8003782:	2301      	movs	r3, #1
 8003784:	e022      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <HAL_I2C_Init+0x1bc>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e58      	subs	r0, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Init+0x1dc>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6809      	ldr	r1, [r1, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6911      	ldr	r1, [r2, #16]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	000186a0 	.word	0x000186a0
 8003868:	001e847f 	.word	0x001e847f
 800386c:	003d08ff 	.word	0x003d08ff
 8003870:	431bde83 	.word	0x431bde83
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7ff f9b7 	bl	8002c04 <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 80d9 	bne.w	8003a58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2319      	movs	r3, #25
 80038ac:	2201      	movs	r2, #1
 80038ae:	496d      	ldr	r1, [pc, #436]	; (8003a64 <HAL_I2C_Mem_Write+0x1ec>)
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fcc1 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	e0cc      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Mem_Write+0x56>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0c5      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1e2>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d007      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2221      	movs	r2, #33	; 0x21
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <HAL_I2C_Mem_Write+0x1f0>)
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003936:	88f8      	ldrh	r0, [r7, #6]
 8003938:	893a      	ldrh	r2, [r7, #8]
 800393a:	8979      	ldrh	r1, [r7, #10]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4603      	mov	r3, r0
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 faf8 	bl	8003f3c <I2C_RequestMemoryWrite>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d052      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e081      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fd42 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06b      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d11b      	bne.n	80039f8 <HAL_I2C_Mem_Write+0x180>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1aa      	bne.n	8003956 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fd2e 	bl	8004466 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d107      	bne.n	8003a28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e016      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	00100002 	.word	0x00100002
 8003a68:	ffff0000 	.word	0xffff0000

08003a6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	; 0x30
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a8a:	f7ff f8bb 	bl	8002c04 <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	f040 8244 	bne.w	8003f26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2319      	movs	r3, #25
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4982      	ldr	r1, [pc, #520]	; (8003cb0 <HAL_I2C_Mem_Read+0x244>)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fbc5 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e237      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Mem_Read+0x5a>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e230      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d007      	beq.n	8003aec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2222      	movs	r2, #34	; 0x22
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a62      	ldr	r2, [pc, #392]	; (8003cb4 <HAL_I2C_Mem_Read+0x248>)
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b2e:	88f8      	ldrh	r0, [r7, #6]
 8003b30:	893a      	ldrh	r2, [r7, #8]
 8003b32:	8979      	ldrh	r1, [r7, #10]
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fa92 	bl	8004068 <I2C_RequestMemoryRead>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e1ec      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d113      	bne.n	8003b7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e1c0      	b.n	8003f00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d11e      	bne.n	8003bc4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b96:	b672      	cpsid	i
}
 8003b98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc0:	b662      	cpsie	i
}
 8003bc2:	e035      	b.n	8003c30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d11e      	bne.n	8003c0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bdc:	b672      	cpsid	i
}
 8003bde:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c06:	b662      	cpsie	i
}
 8003c08:	e012      	b.n	8003c30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003c30:	e166      	b.n	8003f00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	f200 811f 	bhi.w	8003e7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d123      	bne.n	8003c8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fc4d 	bl	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e167      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c8a:	e139      	b.n	8003f00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d152      	bne.n	8003d3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4906      	ldr	r1, [pc, #24]	; (8003cb8 <HAL_I2C_Mem_Read+0x24c>)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 faca 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e13c      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
 8003cae:	bf00      	nop
 8003cb0:	00100002 	.word	0x00100002
 8003cb4:	ffff0000 	.word	0xffff0000
 8003cb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003cbc:	b672      	cpsid	i
}
 8003cbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d02:	b662      	cpsie	i
}
 8003d04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d38:	e0e2      	b.n	8003f00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2200      	movs	r2, #0
 8003d42:	497b      	ldr	r1, [pc, #492]	; (8003f30 <HAL_I2C_Mem_Read+0x4c4>)
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa77 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0e9      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d64:	b672      	cpsid	i
}
 8003d66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d9a:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_I2C_Mem_Read+0x4c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_I2C_Mem_Read+0x4cc>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0a1a      	lsrs	r2, r3, #8
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d118      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003de2:	b662      	cpsie	i
}
 8003de4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e09a      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d1d9      	bne.n	8003db4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e42:	b662      	cpsie	i
}
 8003e44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e78:	e042      	b.n	8003f00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fb32 	bl	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e04c      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d118      	bne.n	8003f00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f ae94 	bne.w	8003c32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	00010004 	.word	0x00010004
 8003f34:	20000030 	.word	0x20000030
 8003f38:	14f8b589 	.word	0x14f8b589

08003f3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	817b      	strh	r3, [r7, #10]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	813b      	strh	r3, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f960 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8c:	d103      	bne.n	8003f96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e05f      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	492d      	ldr	r1, [pc, #180]	; (8004064 <I2C_RequestMemoryWrite+0x128>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f998 	bl	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e04c      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa02 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02b      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e021      	b.n	8004058 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004014:	893b      	ldrh	r3, [r7, #8]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004024:	6a39      	ldr	r1, [r7, #32]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f9dc 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b04      	cmp	r3, #4
 8004038:	d107      	bne.n	800404a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e005      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404e:	893b      	ldrh	r3, [r7, #8]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	00010002 	.word	0x00010002

08004068 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004090:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f8c2 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	d103      	bne.n	80040d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0aa      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	4952      	ldr	r1, [pc, #328]	; (8004234 <I2C_RequestMemoryRead+0x1cc>)
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8fa 	bl	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e097      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f964 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e076      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	611a      	str	r2, [r3, #16]
 800414e:	e021      	b.n	8004194 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	b29b      	uxth	r3, r3
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	6a39      	ldr	r1, [r7, #32]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f93e 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b04      	cmp	r3, #4
 8004174:	d107      	bne.n	8004186 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e050      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800418a:	893b      	ldrh	r3, [r7, #8]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	6a39      	ldr	r1, [r7, #32]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f923 	bl	80043e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d107      	bne.n	80041bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e035      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f82b 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	d103      	bne.n	8004200 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e013      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004204:	897b      	ldrh	r3, [r7, #10]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	4906      	ldr	r1, [pc, #24]	; (8004234 <I2C_RequestMemoryRead+0x1cc>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f863 	bl	80042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	00010002 	.word	0x00010002

08004238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004248:	e025      	b.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d021      	beq.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fe fcd7 	bl	8002c04 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e023      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10d      	bne.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf0c      	ite	eq
 80042b2:	2301      	moveq	r3, #1
 80042b4:	2300      	movne	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	e00c      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d0b6      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f4:	e051      	b.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d123      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004314:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800431e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e046      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d021      	beq.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fe fc55 	bl	8002c04 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e020      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10c      	bne.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e00b      	b.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d18d      	bne.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f0:	e02d      	b.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f8ce 	bl	8004594 <I2C_IsAcknowledgeFailed>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e02d      	b.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d021      	beq.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe fbfb 	bl	8002c04 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d116      	bne.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e007      	b.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d1ca      	bne.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004472:	e02d      	b.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f88d 	bl	8004594 <I2C_IsAcknowledgeFailed>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e02d      	b.n	80044e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d021      	beq.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fe fbba 	bl	8002c04 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e007      	b.n	80044e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d1ca      	bne.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f4:	e042      	b.n	800457c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b10      	cmp	r3, #16
 8004502:	d119      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0210 	mvn.w	r2, #16
 800450c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e029      	b.n	800458c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fe fb64 	bl	8002c04 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d1b5      	bne.n	80044f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d11b      	bne.n	80045e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0204 	orr.w	r2, r3, #4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e272      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8087 	beq.w	800471e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004610:	4b92      	ldr	r3, [pc, #584]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b04      	cmp	r3, #4
 800461a:	d00c      	beq.n	8004636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800461c:	4b8f      	ldr	r3, [pc, #572]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d112      	bne.n	800464e <HAL_RCC_OscConfig+0x5e>
 8004628:	4b8c      	ldr	r3, [pc, #560]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004634:	d10b      	bne.n	800464e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004636:	4b89      	ldr	r3, [pc, #548]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06c      	beq.n	800471c <HAL_RCC_OscConfig+0x12c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d168      	bne.n	800471c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e24c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x76>
 8004658:	4b80      	ldr	r3, [pc, #512]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7f      	ldr	r2, [pc, #508]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e02e      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b7b      	ldr	r3, [pc, #492]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a7a      	ldr	r2, [pc, #488]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b78      	ldr	r3, [pc, #480]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a77      	ldr	r2, [pc, #476]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e01d      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0xbc>
 8004692:	4b72      	ldr	r3, [pc, #456]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a71      	ldr	r2, [pc, #452]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b6f      	ldr	r3, [pc, #444]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6e      	ldr	r2, [pc, #440]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e00b      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 80046ac:	4b6b      	ldr	r3, [pc, #428]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a6a      	ldr	r2, [pc, #424]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b68      	ldr	r3, [pc, #416]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a67      	ldr	r2, [pc, #412]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe fa9a 	bl	8002c04 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fe fa96 	bl	8002c04 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e200      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b5d      	ldr	r3, [pc, #372]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0xe4>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe fa86 	bl	8002c04 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fe fa82 	bl	8002c04 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1ec      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x10c>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800472a:	4b4c      	ldr	r3, [pc, #304]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004736:	4b49      	ldr	r3, [pc, #292]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11c      	bne.n	800477c <HAL_RCC_OscConfig+0x18c>
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x176>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e1c0      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4939      	ldr	r1, [pc, #228]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	e03a      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_RCC_OscConfig+0x270>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fe fa3b 	bl	8002c04 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004792:	f7fe fa37 	bl	8002c04 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1a1      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b2a      	ldr	r3, [pc, #168]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4927      	ldr	r1, [pc, #156]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCC_OscConfig+0x270>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fe fa1a 	bl	8002c04 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fe fa16 	bl	8002c04 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e180      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d03a      	beq.n	8004874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d019      	beq.n	800483a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b17      	ldr	r3, [pc, #92]	; (8004864 <HAL_RCC_OscConfig+0x274>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe f9fa 	bl	8002c04 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004814:	f7fe f9f6 	bl	8002c04 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e160      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_RCC_OscConfig+0x26c>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004832:	2001      	movs	r0, #1
 8004834:	f000 fad8 	bl	8004de8 <RCC_Delay>
 8004838:	e01c      	b.n	8004874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_RCC_OscConfig+0x274>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004840:	f7fe f9e0 	bl	8002c04 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004846:	e00f      	b.n	8004868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fe f9dc 	bl	8002c04 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d908      	bls.n	8004868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e146      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	42420000 	.word	0x42420000
 8004864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b92      	ldr	r3, [pc, #584]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e9      	bne.n	8004848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a6 	beq.w	80049ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b8b      	ldr	r3, [pc, #556]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b88      	ldr	r3, [pc, #544]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4a87      	ldr	r2, [pc, #540]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	61d3      	str	r3, [r2, #28]
 800489e:	4b85      	ldr	r3, [pc, #532]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	4b82      	ldr	r3, [pc, #520]	; (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ba:	4b7f      	ldr	r3, [pc, #508]	; (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7e      	ldr	r2, [pc, #504]	; (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fe f99d 	bl	8002c04 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fe f999 	bl	8002c04 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b64      	cmp	r3, #100	; 0x64
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e103      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b75      	ldr	r3, [pc, #468]	; (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x312>
 80048f4:	4b6f      	ldr	r3, [pc, #444]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4a6e      	ldr	r2, [pc, #440]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e02d      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x334>
 800490a:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a69      	ldr	r2, [pc, #420]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	4b67      	ldr	r3, [pc, #412]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4a66      	ldr	r2, [pc, #408]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	6213      	str	r3, [r2, #32]
 8004922:	e01c      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d10c      	bne.n	8004946 <HAL_RCC_OscConfig+0x356>
 800492c:	4b61      	ldr	r3, [pc, #388]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4a60      	ldr	r2, [pc, #384]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6213      	str	r3, [r2, #32]
 8004938:	4b5e      	ldr	r3, [pc, #376]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a5d      	ldr	r2, [pc, #372]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6213      	str	r3, [r2, #32]
 8004944:	e00b      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004946:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a5a      	ldr	r2, [pc, #360]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6213      	str	r3, [r2, #32]
 8004952:	4b58      	ldr	r3, [pc, #352]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	4a57      	ldr	r2, [pc, #348]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f023 0304 	bic.w	r3, r3, #4
 800495c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d015      	beq.n	8004992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fe f94d 	bl	8002c04 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fe f949 	bl	8002c04 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	; 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0b1      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ee      	beq.n	800496e <HAL_RCC_OscConfig+0x37e>
 8004990:	e014      	b.n	80049bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004992:	f7fe f937 	bl	8002c04 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fe f933 	bl	8002c04 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e09b      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ee      	bne.n	800499a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c2:	4b3c      	ldr	r3, [pc, #240]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8087 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d061      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d146      	bne.n	8004a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b33      	ldr	r3, [pc, #204]	; (8004abc <HAL_RCC_OscConfig+0x4cc>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fe f907 	bl	8002c04 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fe f903 	bl	8002c04 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e06d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d108      	bne.n	8004a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a22:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4921      	ldr	r1, [pc, #132]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a34:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a19      	ldr	r1, [r3, #32]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	430b      	orrs	r3, r1
 8004a46:	491b      	ldr	r1, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x4cc>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fe f8d7 	bl	8002c04 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fe f8d3 	bl	8002c04 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e03d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46a>
 8004a78:	e035      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_RCC_OscConfig+0x4cc>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe f8c0 	bl	8002c04 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fe f8bc 	bl	8002c04 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e026      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x498>
 8004aa6:	e01e      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e019      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_OscConfig+0x500>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d001      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0d0      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b67      	ldr	r3, [pc, #412]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0207 	bic.w	r2, r3, #7
 8004b1e:	4965      	ldr	r1, [pc, #404]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a58      	ldr	r2, [pc, #352]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d040      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d115      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b41      	ldr	r3, [pc, #260]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e073      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b3d      	ldr	r3, [pc, #244]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06b      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd2:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4936      	ldr	r1, [pc, #216]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fe f80e 	bl	8002c04 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fe f80a 	bl	8002c04 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e053      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	4b2d      	ldr	r3, [pc, #180]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 020c 	and.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d1eb      	bne.n	8004bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c14:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d210      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	4922      	ldr	r1, [pc, #136]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd ff6c 	bl	8002b80 <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40022000 	.word	0x40022000
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	0800aaa4 	.word	0x0800aaa4
 8004cc0:	20000030 	.word	0x20000030
 8004cc4:	20000034 	.word	0x20000034

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b490      	push	{r4, r7}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cce:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xac>)
 8004cd0:	1d3c      	adds	r4, r7, #4
 8004cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004cd8:	f240 2301 	movw	r3, #513	; 0x201
 8004cdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cf2:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d002      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x40>
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x46>
 8004d06:	e02b      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d0a:	623b      	str	r3, [r7, #32]
      break;
 8004d0c:	e02b      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	0c9b      	lsrs	r3, r3, #18
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	3328      	adds	r3, #40	; 0x28
 8004d18:	443b      	add	r3, r7
 8004d1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d012      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	0c5b      	lsrs	r3, r3, #17
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	3328      	adds	r3, #40	; 0x28
 8004d36:	443b      	add	r3, r7
 8004d38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d42:	fb03 f202 	mul.w	r2, r3, r2
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	e004      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	623b      	str	r3, [r7, #32]
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d62:	623b      	str	r3, [r7, #32]
      break;
 8004d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d66:	6a3b      	ldr	r3, [r7, #32]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc90      	pop	{r4, r7}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	0800aa94 	.word	0x0800aa94
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	007a1200 	.word	0x007a1200
 8004d80:	003d0900 	.word	0x003d0900

08004d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d88:	4b02      	ldr	r3, [pc, #8]	; (8004d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	20000030 	.word	0x20000030

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d9c:	f7ff fff2 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4903      	ldr	r1, [pc, #12]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800aab4 	.word	0x0800aab4

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dc4:	f7ff ffde 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	0adb      	lsrs	r3, r3, #11
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4903      	ldr	r1, [pc, #12]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40021000 	.word	0x40021000
 8004de4:	0800aab4 	.word	0x0800aab4

08004de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <RCC_Delay+0x34>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <RCC_Delay+0x38>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a5b      	lsrs	r3, r3, #9
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e04:	bf00      	nop
  }
  while (Delay --);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	60fa      	str	r2, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f9      	bne.n	8004e04 <RCC_Delay+0x1c>
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	20000030 	.word	0x20000030
 8004e20:	10624dd3 	.word	0x10624dd3

08004e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e041      	b.n	8004eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fcb8 	bl	80027c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fa2e 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d001      	beq.n	8004edc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e032      	b.n	8004f42 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_TIM_Base_Start+0x88>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_TIM_Base_Start+0x48>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d009      	beq.n	8004f0c <HAL_TIM_Base_Start+0x48>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <HAL_TIM_Base_Start+0x8c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIM_Base_Start+0x48>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <HAL_TIM_Base_Start+0x90>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d111      	bne.n	8004f30 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d010      	beq.n	8004f40 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	e007      	b.n	8004f40 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800

08004f58 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e041      	b.n	8004fee <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f839 	bl	8004ff6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 f994 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_TIM_OC_ConfigChannel+0x1a>
 800501e:	2302      	movs	r3, #2
 8005020:	e046      	b.n	80050b0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d839      	bhi.n	80050a4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800506d 	.word	0x0800506d
 800503c:	080050a5 	.word	0x080050a5
 8005040:	080050a5 	.word	0x080050a5
 8005044:	080050a5 	.word	0x080050a5
 8005048:	0800507b 	.word	0x0800507b
 800504c:	080050a5 	.word	0x080050a5
 8005050:	080050a5 	.word	0x080050a5
 8005054:	080050a5 	.word	0x080050a5
 8005058:	08005089 	.word	0x08005089
 800505c:	080050a5 	.word	0x080050a5
 8005060:	080050a5 	.word	0x080050a5
 8005064:	080050a5 	.word	0x080050a5
 8005068:	08005097 	.word	0x08005097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f988 	bl	8005388 <TIM_OC1_SetConfig>
      break;
 8005078:	e015      	b.n	80050a6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f9e7 	bl	8005454 <TIM_OC2_SetConfig>
      break;
 8005086:	e00e      	b.n	80050a6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa4a 	bl	8005528 <TIM_OC3_SetConfig>
      break;
 8005094:	e007      	b.n	80050a6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 faad 	bl	80055fc <TIM_OC4_SetConfig>
      break;
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80050a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIM_ConfigClockSource+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e0b3      	b.n	8005238 <HAL_TIM_ConfigClockSource+0x180>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005108:	d03e      	beq.n	8005188 <HAL_TIM_ConfigClockSource+0xd0>
 800510a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510e:	f200 8087 	bhi.w	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	f000 8085 	beq.w	8005224 <HAL_TIM_ConfigClockSource+0x16c>
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d87f      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005120:	2b70      	cmp	r3, #112	; 0x70
 8005122:	d01a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0xa2>
 8005124:	2b70      	cmp	r3, #112	; 0x70
 8005126:	d87b      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005128:	2b60      	cmp	r3, #96	; 0x60
 800512a:	d050      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x116>
 800512c:	2b60      	cmp	r3, #96	; 0x60
 800512e:	d877      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005130:	2b50      	cmp	r3, #80	; 0x50
 8005132:	d03c      	beq.n	80051ae <HAL_TIM_ConfigClockSource+0xf6>
 8005134:	2b50      	cmp	r3, #80	; 0x50
 8005136:	d873      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d058      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0x136>
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d86f      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005140:	2b30      	cmp	r3, #48	; 0x30
 8005142:	d064      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x156>
 8005144:	2b30      	cmp	r3, #48	; 0x30
 8005146:	d86b      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005148:	2b20      	cmp	r3, #32
 800514a:	d060      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x156>
 800514c:	2b20      	cmp	r3, #32
 800514e:	d867      	bhi.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d05c      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x156>
 8005154:	2b10      	cmp	r3, #16
 8005156:	d05a      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005158:	e062      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6899      	ldr	r1, [r3, #8]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f000 fb9a 	bl	80058a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800517c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	609a      	str	r2, [r3, #8]
      break;
 8005186:	e04e      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6899      	ldr	r1, [r3, #8]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f000 fb83 	bl	80058a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051aa:	609a      	str	r2, [r3, #8]
      break;
 80051ac:	e03b      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6859      	ldr	r1, [r3, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f000 fafa 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2150      	movs	r1, #80	; 0x50
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb51 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 80051cc:	e02b      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6859      	ldr	r1, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	461a      	mov	r2, r3
 80051dc:	f000 fb18 	bl	8005810 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2160      	movs	r1, #96	; 0x60
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb41 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 80051ec:	e01b      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f000 fada 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2140      	movs	r1, #64	; 0x40
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb31 	bl	800586e <TIM_ITRx_SetConfig>
      break;
 800520c:	e00b      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f000 fb28 	bl	800586e <TIM_ITRx_SetConfig>
        break;
 800521e:	e002      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005220:	bf00      	nop
 8005222:	e000      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005224:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005254:	2302      	movs	r3, #2
 8005256:	e031      	b.n	80052bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa14 	bl	8005698 <TIM_SlaveTimer_SetConfig>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e018      	b.n	80052bc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005298:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a29      	ldr	r2, [pc, #164]	; (800537c <TIM_Base_SetConfig+0xb8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x30>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x30>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a26      	ldr	r2, [pc, #152]	; (8005380 <TIM_Base_SetConfig+0xbc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x30>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a25      	ldr	r2, [pc, #148]	; (8005384 <TIM_Base_SetConfig+0xc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <TIM_Base_SetConfig+0xb8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_Base_SetConfig+0x62>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d007      	beq.n	8005326 <TIM_Base_SetConfig+0x62>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a19      	ldr	r2, [pc, #100]	; (8005380 <TIM_Base_SetConfig+0xbc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_Base_SetConfig+0x62>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <TIM_Base_SetConfig+0xc0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a07      	ldr	r2, [pc, #28]	; (800537c <TIM_Base_SetConfig+0xb8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d103      	bne.n	800536c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	615a      	str	r2, [r3, #20]
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800

08005388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <TIM_OC1_SetConfig+0xc8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10c      	bne.n	80053fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0308 	bic.w	r3, r3, #8
 80053ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a13      	ldr	r2, [pc, #76]	; (8005450 <TIM_OC1_SetConfig+0xc8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d111      	bne.n	800542a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800540c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40012c00 	.word	0x40012c00

08005454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0210 	bic.w	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0320 	bic.w	r3, r3, #32
 800549e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <TIM_OC2_SetConfig+0xd0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10d      	bne.n	80054d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a14      	ldr	r2, [pc, #80]	; (8005524 <TIM_OC2_SetConfig+0xd0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d113      	bne.n	8005500 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	40012c00 	.word	0x40012c00

08005528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <TIM_OC3_SetConfig+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10d      	bne.n	80055a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800558c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <TIM_OC3_SetConfig+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d113      	bne.n	80055d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40012c00 	.word	0x40012c00

080055fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a0f      	ldr	r2, [pc, #60]	; (8005694 <TIM_OC4_SetConfig+0x98>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d109      	bne.n	8005670 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	019b      	lsls	r3, r3, #6
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00

08005698 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b70      	cmp	r3, #112	; 0x70
 80056dc:	d01a      	beq.n	8005714 <TIM_SlaveTimer_SetConfig+0x7c>
 80056de:	2b70      	cmp	r3, #112	; 0x70
 80056e0:	d860      	bhi.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80056e2:	2b60      	cmp	r3, #96	; 0x60
 80056e4:	d054      	beq.n	8005790 <TIM_SlaveTimer_SetConfig+0xf8>
 80056e6:	2b60      	cmp	r3, #96	; 0x60
 80056e8:	d85c      	bhi.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80056ea:	2b50      	cmp	r3, #80	; 0x50
 80056ec:	d046      	beq.n	800577c <TIM_SlaveTimer_SetConfig+0xe4>
 80056ee:	2b50      	cmp	r3, #80	; 0x50
 80056f0:	d858      	bhi.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d019      	beq.n	800572a <TIM_SlaveTimer_SetConfig+0x92>
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d854      	bhi.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
 80056fa:	2b30      	cmp	r3, #48	; 0x30
 80056fc:	d054      	beq.n	80057a8 <TIM_SlaveTimer_SetConfig+0x110>
 80056fe:	2b30      	cmp	r3, #48	; 0x30
 8005700:	d850      	bhi.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005702:	2b20      	cmp	r3, #32
 8005704:	d050      	beq.n	80057a8 <TIM_SlaveTimer_SetConfig+0x110>
 8005706:	2b20      	cmp	r3, #32
 8005708:	d84c      	bhi.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d04c      	beq.n	80057a8 <TIM_SlaveTimer_SetConfig+0x110>
 800570e:	2b10      	cmp	r3, #16
 8005710:	d04a      	beq.n	80057a8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005712:	e047      	b.n	80057a4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68d9      	ldr	r1, [r3, #12]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f000 f8bd 	bl	80058a2 <TIM_ETR_SetConfig>
      break;
 8005728:	e03f      	b.n	80057aa <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b05      	cmp	r3, #5
 8005730:	d101      	bne.n	8005736 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e03a      	b.n	80057ac <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
      break;
 800577a:	e016      	b.n	80057aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	461a      	mov	r2, r3
 800578a:	f000 f813 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      break;
 800578e:	e00c      	b.n	80057aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	6899      	ldr	r1, [r3, #8]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	461a      	mov	r2, r3
 800579e:	f000 f837 	bl	8005810 <TIM_TI2_ConfigInputStage>
      break;
 80057a2:	e002      	b.n	80057aa <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80057a8:	bf00      	nop
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f023 0210 	bic.w	r2, r3, #16
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	031b      	lsls	r3, r3, #12
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800584c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	f043 0307 	orr.w	r3, r3, #7
 8005890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	021a      	lsls	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	609a      	str	r2, [r3, #8]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e046      	b.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a16      	ldr	r2, [pc, #88]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005944:	d009      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a10      	ldr	r2, [pc, #64]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d10c      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	4313      	orrs	r3, r2
 800596a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800

0800599c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e03f      	b.n	8005a2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fc ff2c 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fb49 	bl	8006078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	; 0x28
 8005a3a:	af02      	add	r7, sp, #8
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d17c      	bne.n	8005b50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_Transmit+0x2c>
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e075      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Transmit+0x3e>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e06e      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2221      	movs	r2, #33	; 0x21
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a8a:	f7fd f8bb 	bl	8002c04 <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_UART_Transmit+0x82>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ac8:	e02a      	b.n	8005b20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f9df 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e036      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3302      	adds	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e007      	b.n	8005b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1cf      	bne.n	8005aca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f9af 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e006      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b08a      	sub	sp, #40	; 0x28
 8005b5e:	af02      	add	r7, sp, #8
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	f040 808c 	bne.w	8005c94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_UART_Receive+0x2e>
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e084      	b.n	8005c96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Receive+0x40>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e07d      	b.n	8005c96 <HAL_UART_Receive+0x13c>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2222      	movs	r2, #34	; 0x22
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb6:	f7fd f825 	bl	8002c04 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d108      	bne.n	8005be4 <HAL_UART_Receive+0x8a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e003      	b.n	8005bec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005bf4:	e043      	b.n	8005c7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2120      	movs	r1, #32
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f949 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e042      	b.n	8005c96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10c      	bne.n	8005c30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e01f      	b.n	8005c70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c38:	d007      	beq.n	8005c4a <HAL_UART_Receive+0xf0>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <HAL_UART_Receive+0xfe>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e008      	b.n	8005c6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1b6      	bne.n	8005bf6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d11d      	bne.n	8005cf4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Receive_DMA+0x26>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e016      	b.n	8005cf6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Receive_DMA+0x38>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e00f      	b.n	8005cf6 <HAL_UART_Receive_DMA+0x58>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f91e 	bl	8005f2c <UART_Start_Receive_DMA>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	e000      	b.n	8005cf6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005cf4:	2302      	movs	r3, #2
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d12a      	bne.n	8005daa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d68:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d88:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d107      	bne.n	8005daa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0210 	bic.w	r2, r2, #16
 8005da8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d106      	bne.n	8005dc0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005db6:	4619      	mov	r1, r3
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff ffb2 	bl	8005d22 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dbe:	e002      	b.n	8005dc6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7fb fd7b 	bl	80018bc <HAL_UART_RxCpltCallback>
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d108      	bne.n	8005df6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4619      	mov	r1, r3
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff97 	bl	8005d22 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005df4:	e002      	b.n	8005dfc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff ff81 	bl	8005cfe <HAL_UART_RxHalfCpltCallback>
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b21      	cmp	r3, #33	; 0x21
 8005e36:	d108      	bne.n	8005e4a <UART_DMAError+0x46>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2200      	movs	r2, #0
 8005e42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e44:	68b8      	ldr	r0, [r7, #8]
 8005e46:	f000 f8d5 	bl	8005ff4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b22      	cmp	r3, #34	; 0x22
 8005e6a:	d108      	bne.n	8005e7e <UART_DMAError+0x7a>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005e78:	68b8      	ldr	r0, [r7, #8]
 8005e7a:	f000 f8d0 	bl	800601e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f043 0210 	orr.w	r2, r3, #16
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e8a:	68b8      	ldr	r0, [r7, #8]
 8005e8c:	f7ff ff40 	bl	8005d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea8:	e02c      	b.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d028      	beq.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb8:	f7fc fea4 	bl	8002c04 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d21d      	bcs.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ed6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0201 	bic.w	r2, r2, #1
 8005ee6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e00f      	b.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	bf0c      	ite	eq
 8005f14:	2301      	moveq	r3, #1
 8005f16:	2300      	movne	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d0c3      	beq.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2222      	movs	r2, #34	; 0x22
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <UART_Start_Receive_DMA+0xbc>)
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	4a22      	ldr	r2, [pc, #136]	; (8005fec <UART_Start_Receive_DMA+0xc0>)
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	4a21      	ldr	r2, [pc, #132]	; (8005ff0 <UART_Start_Receive_DMA+0xc4>)
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	2200      	movs	r2, #0
 8005f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f74:	f107 0308 	add.w	r3, r7, #8
 8005f78:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	f7fc ffd0 	bl	8002f30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fbc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fdc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	08005d39 	.word	0x08005d39
 8005fec:	08005dcf 	.word	0x08005dcf
 8005ff0:	08005e05 	.word	0x08005e05

08005ff4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800600a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006034:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	2b01      	cmp	r3, #1
 800604c:	d107      	bne.n	800605e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0210 	bic.w	r2, r2, #16
 800605c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
	...

08006078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060b2:	f023 030c 	bic.w	r3, r3, #12
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	430b      	orrs	r3, r1
 80060be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2c      	ldr	r2, [pc, #176]	; (800618c <UART_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d103      	bne.n	80060e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060e0:	f7fe fe6e 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	e002      	b.n	80060ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060e8:	f7fe fe56 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 80060ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009a      	lsls	r2, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	4a22      	ldr	r2, [pc, #136]	; (8006190 <UART_SetConfig+0x118>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	0119      	lsls	r1, r3, #4
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009a      	lsls	r2, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	fbb2 f2f3 	udiv	r2, r2, r3
 8006124:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <UART_SetConfig+0x118>)
 8006126:	fba3 0302 	umull	r0, r3, r3, r2
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	2064      	movs	r0, #100	; 0x64
 800612e:	fb00 f303 	mul.w	r3, r0, r3
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	3332      	adds	r3, #50	; 0x32
 8006138:	4a15      	ldr	r2, [pc, #84]	; (8006190 <UART_SetConfig+0x118>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006144:	4419      	add	r1, r3
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009a      	lsls	r2, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	fbb2 f2f3 	udiv	r2, r2, r3
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <UART_SetConfig+0x118>)
 800615e:	fba3 0302 	umull	r0, r3, r3, r2
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	2064      	movs	r0, #100	; 0x64
 8006166:	fb00 f303 	mul.w	r3, r0, r3
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	3332      	adds	r3, #50	; 0x32
 8006170:	4a07      	ldr	r2, [pc, #28]	; (8006190 <UART_SetConfig+0x118>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	440a      	add	r2, r1
 8006182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40013800 	.word	0x40013800
 8006190:	51eb851f 	.word	0x51eb851f

08006194 <__errno>:
 8006194:	4b01      	ldr	r3, [pc, #4]	; (800619c <__errno+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	2000003c 	.word	0x2000003c

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2600      	movs	r6, #0
 80061a4:	4d0c      	ldr	r5, [pc, #48]	; (80061d8 <__libc_init_array+0x38>)
 80061a6:	4c0d      	ldr	r4, [pc, #52]	; (80061dc <__libc_init_array+0x3c>)
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	f004 fc50 	bl	800aa54 <_init>
 80061b4:	2600      	movs	r6, #0
 80061b6:	4d0a      	ldr	r5, [pc, #40]	; (80061e0 <__libc_init_array+0x40>)
 80061b8:	4c0a      	ldr	r4, [pc, #40]	; (80061e4 <__libc_init_array+0x44>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	0800af64 	.word	0x0800af64
 80061dc:	0800af64 	.word	0x0800af64
 80061e0:	0800af64 	.word	0x0800af64
 80061e4:	0800af68 	.word	0x0800af68

080061e8 <memset>:
 80061e8:	4603      	mov	r3, r0
 80061ea:	4402      	add	r2, r0
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d100      	bne.n	80061f2 <memset+0xa>
 80061f0:	4770      	bx	lr
 80061f2:	f803 1b01 	strb.w	r1, [r3], #1
 80061f6:	e7f9      	b.n	80061ec <memset+0x4>

080061f8 <__cvt>:
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fe:	461f      	mov	r7, r3
 8006200:	bfbb      	ittet	lt
 8006202:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006206:	461f      	movlt	r7, r3
 8006208:	2300      	movge	r3, #0
 800620a:	232d      	movlt	r3, #45	; 0x2d
 800620c:	b088      	sub	sp, #32
 800620e:	4614      	mov	r4, r2
 8006210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006212:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006214:	7013      	strb	r3, [r2, #0]
 8006216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006218:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800621c:	f023 0820 	bic.w	r8, r3, #32
 8006220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006224:	d005      	beq.n	8006232 <__cvt+0x3a>
 8006226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800622a:	d100      	bne.n	800622e <__cvt+0x36>
 800622c:	3501      	adds	r5, #1
 800622e:	2302      	movs	r3, #2
 8006230:	e000      	b.n	8006234 <__cvt+0x3c>
 8006232:	2303      	movs	r3, #3
 8006234:	aa07      	add	r2, sp, #28
 8006236:	9204      	str	r2, [sp, #16]
 8006238:	aa06      	add	r2, sp, #24
 800623a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800623e:	e9cd 3500 	strd	r3, r5, [sp]
 8006242:	4622      	mov	r2, r4
 8006244:	463b      	mov	r3, r7
 8006246:	f001 fd83 	bl	8007d50 <_dtoa_r>
 800624a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800624e:	4606      	mov	r6, r0
 8006250:	d102      	bne.n	8006258 <__cvt+0x60>
 8006252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006254:	07db      	lsls	r3, r3, #31
 8006256:	d522      	bpl.n	800629e <__cvt+0xa6>
 8006258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800625c:	eb06 0905 	add.w	r9, r6, r5
 8006260:	d110      	bne.n	8006284 <__cvt+0x8c>
 8006262:	7833      	ldrb	r3, [r6, #0]
 8006264:	2b30      	cmp	r3, #48	; 0x30
 8006266:	d10a      	bne.n	800627e <__cvt+0x86>
 8006268:	2200      	movs	r2, #0
 800626a:	2300      	movs	r3, #0
 800626c:	4620      	mov	r0, r4
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 8006274:	b918      	cbnz	r0, 800627e <__cvt+0x86>
 8006276:	f1c5 0501 	rsb	r5, r5, #1
 800627a:	f8ca 5000 	str.w	r5, [sl]
 800627e:	f8da 3000 	ldr.w	r3, [sl]
 8006282:	4499      	add	r9, r3
 8006284:	2200      	movs	r2, #0
 8006286:	2300      	movs	r3, #0
 8006288:	4620      	mov	r0, r4
 800628a:	4639      	mov	r1, r7
 800628c:	f7fa fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006290:	b108      	cbz	r0, 8006296 <__cvt+0x9e>
 8006292:	f8cd 901c 	str.w	r9, [sp, #28]
 8006296:	2230      	movs	r2, #48	; 0x30
 8006298:	9b07      	ldr	r3, [sp, #28]
 800629a:	454b      	cmp	r3, r9
 800629c:	d307      	bcc.n	80062ae <__cvt+0xb6>
 800629e:	4630      	mov	r0, r6
 80062a0:	9b07      	ldr	r3, [sp, #28]
 80062a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062a4:	1b9b      	subs	r3, r3, r6
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	b008      	add	sp, #32
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	9107      	str	r1, [sp, #28]
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e7f0      	b.n	8006298 <__cvt+0xa0>

080062b6 <__exponent>:
 80062b6:	4603      	mov	r3, r0
 80062b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ba:	2900      	cmp	r1, #0
 80062bc:	f803 2b02 	strb.w	r2, [r3], #2
 80062c0:	bfb6      	itet	lt
 80062c2:	222d      	movlt	r2, #45	; 0x2d
 80062c4:	222b      	movge	r2, #43	; 0x2b
 80062c6:	4249      	neglt	r1, r1
 80062c8:	2909      	cmp	r1, #9
 80062ca:	7042      	strb	r2, [r0, #1]
 80062cc:	dd2b      	ble.n	8006326 <__exponent+0x70>
 80062ce:	f10d 0407 	add.w	r4, sp, #7
 80062d2:	46a4      	mov	ip, r4
 80062d4:	270a      	movs	r7, #10
 80062d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80062da:	460a      	mov	r2, r1
 80062dc:	46a6      	mov	lr, r4
 80062de:	fb07 1516 	mls	r5, r7, r6, r1
 80062e2:	2a63      	cmp	r2, #99	; 0x63
 80062e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80062e8:	4631      	mov	r1, r6
 80062ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80062ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062f2:	dcf0      	bgt.n	80062d6 <__exponent+0x20>
 80062f4:	3130      	adds	r1, #48	; 0x30
 80062f6:	f1ae 0502 	sub.w	r5, lr, #2
 80062fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062fe:	4629      	mov	r1, r5
 8006300:	1c44      	adds	r4, r0, #1
 8006302:	4561      	cmp	r1, ip
 8006304:	d30a      	bcc.n	800631c <__exponent+0x66>
 8006306:	f10d 0209 	add.w	r2, sp, #9
 800630a:	eba2 020e 	sub.w	r2, r2, lr
 800630e:	4565      	cmp	r5, ip
 8006310:	bf88      	it	hi
 8006312:	2200      	movhi	r2, #0
 8006314:	4413      	add	r3, r2
 8006316:	1a18      	subs	r0, r3, r0
 8006318:	b003      	add	sp, #12
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006320:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006324:	e7ed      	b.n	8006302 <__exponent+0x4c>
 8006326:	2330      	movs	r3, #48	; 0x30
 8006328:	3130      	adds	r1, #48	; 0x30
 800632a:	7083      	strb	r3, [r0, #2]
 800632c:	70c1      	strb	r1, [r0, #3]
 800632e:	1d03      	adds	r3, r0, #4
 8006330:	e7f1      	b.n	8006316 <__exponent+0x60>
	...

08006334 <_printf_float>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	b091      	sub	sp, #68	; 0x44
 800633a:	460c      	mov	r4, r1
 800633c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006340:	4616      	mov	r6, r2
 8006342:	461f      	mov	r7, r3
 8006344:	4605      	mov	r5, r0
 8006346:	f002 fe57 	bl	8008ff8 <_localeconv_r>
 800634a:	6803      	ldr	r3, [r0, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
 8006350:	f7f9 fefe 	bl	8000150 <strlen>
 8006354:	2300      	movs	r3, #0
 8006356:	930e      	str	r3, [sp, #56]	; 0x38
 8006358:	f8d8 3000 	ldr.w	r3, [r8]
 800635c:	900a      	str	r0, [sp, #40]	; 0x28
 800635e:	3307      	adds	r3, #7
 8006360:	f023 0307 	bic.w	r3, r3, #7
 8006364:	f103 0208 	add.w	r2, r3, #8
 8006368:	f894 9018 	ldrb.w	r9, [r4, #24]
 800636c:	f8d4 b000 	ldr.w	fp, [r4]
 8006370:	f8c8 2000 	str.w	r2, [r8]
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800637c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006380:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006384:	930b      	str	r3, [sp, #44]	; 0x2c
 8006386:	f04f 32ff 	mov.w	r2, #4294967295
 800638a:	4640      	mov	r0, r8
 800638c:	4b9c      	ldr	r3, [pc, #624]	; (8006600 <_printf_float+0x2cc>)
 800638e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006390:	f7fa fb3c 	bl	8000a0c <__aeabi_dcmpun>
 8006394:	bb70      	cbnz	r0, 80063f4 <_printf_float+0xc0>
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	4640      	mov	r0, r8
 800639c:	4b98      	ldr	r3, [pc, #608]	; (8006600 <_printf_float+0x2cc>)
 800639e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063a0:	f7fa fb16 	bl	80009d0 <__aeabi_dcmple>
 80063a4:	bb30      	cbnz	r0, 80063f4 <_printf_float+0xc0>
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4640      	mov	r0, r8
 80063ac:	4651      	mov	r1, sl
 80063ae:	f7fa fb05 	bl	80009bc <__aeabi_dcmplt>
 80063b2:	b110      	cbz	r0, 80063ba <_printf_float+0x86>
 80063b4:	232d      	movs	r3, #45	; 0x2d
 80063b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ba:	4b92      	ldr	r3, [pc, #584]	; (8006604 <_printf_float+0x2d0>)
 80063bc:	4892      	ldr	r0, [pc, #584]	; (8006608 <_printf_float+0x2d4>)
 80063be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80063c2:	bf94      	ite	ls
 80063c4:	4698      	movls	r8, r3
 80063c6:	4680      	movhi	r8, r0
 80063c8:	2303      	movs	r3, #3
 80063ca:	f04f 0a00 	mov.w	sl, #0
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	f02b 0304 	bic.w	r3, fp, #4
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	4633      	mov	r3, r6
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	9700      	str	r7, [sp, #0]
 80063de:	aa0f      	add	r2, sp, #60	; 0x3c
 80063e0:	f000 f9d4 	bl	800678c <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	f040 8090 	bne.w	800650a <_printf_float+0x1d6>
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295
 80063ee:	b011      	add	sp, #68	; 0x44
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f4:	4642      	mov	r2, r8
 80063f6:	4653      	mov	r3, sl
 80063f8:	4640      	mov	r0, r8
 80063fa:	4651      	mov	r1, sl
 80063fc:	f7fa fb06 	bl	8000a0c <__aeabi_dcmpun>
 8006400:	b148      	cbz	r0, 8006416 <_printf_float+0xe2>
 8006402:	f1ba 0f00 	cmp.w	sl, #0
 8006406:	bfb8      	it	lt
 8006408:	232d      	movlt	r3, #45	; 0x2d
 800640a:	4880      	ldr	r0, [pc, #512]	; (800660c <_printf_float+0x2d8>)
 800640c:	bfb8      	it	lt
 800640e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006412:	4b7f      	ldr	r3, [pc, #508]	; (8006610 <_printf_float+0x2dc>)
 8006414:	e7d3      	b.n	80063be <_printf_float+0x8a>
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	d142      	bne.n	80064a6 <_printf_float+0x172>
 8006420:	2306      	movs	r3, #6
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	9206      	str	r2, [sp, #24]
 8006428:	aa0e      	add	r2, sp, #56	; 0x38
 800642a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800642e:	aa0d      	add	r2, sp, #52	; 0x34
 8006430:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006434:	9203      	str	r2, [sp, #12]
 8006436:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800643a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	6863      	ldr	r3, [r4, #4]
 8006442:	4642      	mov	r2, r8
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4628      	mov	r0, r5
 8006448:	4653      	mov	r3, sl
 800644a:	910b      	str	r1, [sp, #44]	; 0x2c
 800644c:	f7ff fed4 	bl	80061f8 <__cvt>
 8006450:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006452:	4680      	mov	r8, r0
 8006454:	2947      	cmp	r1, #71	; 0x47
 8006456:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006458:	d108      	bne.n	800646c <_printf_float+0x138>
 800645a:	1cc8      	adds	r0, r1, #3
 800645c:	db02      	blt.n	8006464 <_printf_float+0x130>
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	4299      	cmp	r1, r3
 8006462:	dd40      	ble.n	80064e6 <_printf_float+0x1b2>
 8006464:	f1a9 0902 	sub.w	r9, r9, #2
 8006468:	fa5f f989 	uxtb.w	r9, r9
 800646c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006470:	d81f      	bhi.n	80064b2 <_printf_float+0x17e>
 8006472:	464a      	mov	r2, r9
 8006474:	3901      	subs	r1, #1
 8006476:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800647a:	910d      	str	r1, [sp, #52]	; 0x34
 800647c:	f7ff ff1b 	bl	80062b6 <__exponent>
 8006480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006482:	4682      	mov	sl, r0
 8006484:	1813      	adds	r3, r2, r0
 8006486:	2a01      	cmp	r2, #1
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	dc02      	bgt.n	8006492 <_printf_float+0x15e>
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	07d2      	lsls	r2, r2, #31
 8006490:	d501      	bpl.n	8006496 <_printf_float+0x162>
 8006492:	3301      	adds	r3, #1
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800649a:	2b00      	cmp	r3, #0
 800649c:	d09b      	beq.n	80063d6 <_printf_float+0xa2>
 800649e:	232d      	movs	r3, #45	; 0x2d
 80064a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a4:	e797      	b.n	80063d6 <_printf_float+0xa2>
 80064a6:	2947      	cmp	r1, #71	; 0x47
 80064a8:	d1bc      	bne.n	8006424 <_printf_float+0xf0>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1ba      	bne.n	8006424 <_printf_float+0xf0>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e7b7      	b.n	8006422 <_printf_float+0xee>
 80064b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80064b6:	d118      	bne.n	80064ea <_printf_float+0x1b6>
 80064b8:	2900      	cmp	r1, #0
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	dd0b      	ble.n	80064d6 <_printf_float+0x1a2>
 80064be:	6121      	str	r1, [r4, #16]
 80064c0:	b913      	cbnz	r3, 80064c8 <_printf_float+0x194>
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	07d0      	lsls	r0, r2, #31
 80064c6:	d502      	bpl.n	80064ce <_printf_float+0x19a>
 80064c8:	3301      	adds	r3, #1
 80064ca:	440b      	add	r3, r1
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	f04f 0a00 	mov.w	sl, #0
 80064d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80064d4:	e7df      	b.n	8006496 <_printf_float+0x162>
 80064d6:	b913      	cbnz	r3, 80064de <_printf_float+0x1aa>
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	07d2      	lsls	r2, r2, #31
 80064dc:	d501      	bpl.n	80064e2 <_printf_float+0x1ae>
 80064de:	3302      	adds	r3, #2
 80064e0:	e7f4      	b.n	80064cc <_printf_float+0x198>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7f2      	b.n	80064cc <_printf_float+0x198>
 80064e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80064ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ec:	4299      	cmp	r1, r3
 80064ee:	db05      	blt.n	80064fc <_printf_float+0x1c8>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	6121      	str	r1, [r4, #16]
 80064f4:	07d8      	lsls	r0, r3, #31
 80064f6:	d5ea      	bpl.n	80064ce <_printf_float+0x19a>
 80064f8:	1c4b      	adds	r3, r1, #1
 80064fa:	e7e7      	b.n	80064cc <_printf_float+0x198>
 80064fc:	2900      	cmp	r1, #0
 80064fe:	bfcc      	ite	gt
 8006500:	2201      	movgt	r2, #1
 8006502:	f1c1 0202 	rsble	r2, r1, #2
 8006506:	4413      	add	r3, r2
 8006508:	e7e0      	b.n	80064cc <_printf_float+0x198>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	055a      	lsls	r2, r3, #21
 800650e:	d407      	bmi.n	8006520 <_printf_float+0x1ec>
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	4642      	mov	r2, r8
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	d12b      	bne.n	8006576 <_printf_float+0x242>
 800651e:	e764      	b.n	80063ea <_printf_float+0xb6>
 8006520:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006524:	f240 80dd 	bls.w	80066e2 <_printf_float+0x3ae>
 8006528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800652c:	2200      	movs	r2, #0
 800652e:	2300      	movs	r3, #0
 8006530:	f7fa fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006534:	2800      	cmp	r0, #0
 8006536:	d033      	beq.n	80065a0 <_printf_float+0x26c>
 8006538:	2301      	movs	r3, #1
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	4a35      	ldr	r2, [pc, #212]	; (8006614 <_printf_float+0x2e0>)
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f af51 	beq.w	80063ea <_printf_float+0xb6>
 8006548:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800654c:	429a      	cmp	r2, r3
 800654e:	db02      	blt.n	8006556 <_printf_float+0x222>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	07d8      	lsls	r0, r3, #31
 8006554:	d50f      	bpl.n	8006576 <_printf_float+0x242>
 8006556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	f43f af42 	beq.w	80063ea <_printf_float+0xb6>
 8006566:	f04f 0800 	mov.w	r8, #0
 800656a:	f104 091a 	add.w	r9, r4, #26
 800656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006570:	3b01      	subs	r3, #1
 8006572:	4543      	cmp	r3, r8
 8006574:	dc09      	bgt.n	800658a <_printf_float+0x256>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	079b      	lsls	r3, r3, #30
 800657a:	f100 8102 	bmi.w	8006782 <_printf_float+0x44e>
 800657e:	68e0      	ldr	r0, [r4, #12]
 8006580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006582:	4298      	cmp	r0, r3
 8006584:	bfb8      	it	lt
 8006586:	4618      	movlt	r0, r3
 8006588:	e731      	b.n	80063ee <_printf_float+0xba>
 800658a:	2301      	movs	r3, #1
 800658c:	464a      	mov	r2, r9
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f af28 	beq.w	80063ea <_printf_float+0xb6>
 800659a:	f108 0801 	add.w	r8, r8, #1
 800659e:	e7e6      	b.n	800656e <_printf_float+0x23a>
 80065a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	dc38      	bgt.n	8006618 <_printf_float+0x2e4>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4631      	mov	r1, r6
 80065aa:	4628      	mov	r0, r5
 80065ac:	4a19      	ldr	r2, [pc, #100]	; (8006614 <_printf_float+0x2e0>)
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af1a 	beq.w	80063ea <_printf_float+0xb6>
 80065b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065ba:	4313      	orrs	r3, r2
 80065bc:	d102      	bne.n	80065c4 <_printf_float+0x290>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	07d9      	lsls	r1, r3, #31
 80065c2:	d5d8      	bpl.n	8006576 <_printf_float+0x242>
 80065c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f af0b 	beq.w	80063ea <_printf_float+0xb6>
 80065d4:	f04f 0900 	mov.w	r9, #0
 80065d8:	f104 0a1a 	add.w	sl, r4, #26
 80065dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065de:	425b      	negs	r3, r3
 80065e0:	454b      	cmp	r3, r9
 80065e2:	dc01      	bgt.n	80065e8 <_printf_float+0x2b4>
 80065e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e6:	e794      	b.n	8006512 <_printf_float+0x1de>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4652      	mov	r2, sl
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f aef9 	beq.w	80063ea <_printf_float+0xb6>
 80065f8:	f109 0901 	add.w	r9, r9, #1
 80065fc:	e7ee      	b.n	80065dc <_printf_float+0x2a8>
 80065fe:	bf00      	nop
 8006600:	7fefffff 	.word	0x7fefffff
 8006604:	0800aac0 	.word	0x0800aac0
 8006608:	0800aac4 	.word	0x0800aac4
 800660c:	0800aacc 	.word	0x0800aacc
 8006610:	0800aac8 	.word	0x0800aac8
 8006614:	0800aad0 	.word	0x0800aad0
 8006618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800661c:	429a      	cmp	r2, r3
 800661e:	bfa8      	it	ge
 8006620:	461a      	movge	r2, r3
 8006622:	2a00      	cmp	r2, #0
 8006624:	4691      	mov	r9, r2
 8006626:	dc37      	bgt.n	8006698 <_printf_float+0x364>
 8006628:	f04f 0b00 	mov.w	fp, #0
 800662c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006630:	f104 021a 	add.w	r2, r4, #26
 8006634:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006638:	ebaa 0309 	sub.w	r3, sl, r9
 800663c:	455b      	cmp	r3, fp
 800663e:	dc33      	bgt.n	80066a8 <_printf_float+0x374>
 8006640:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006644:	429a      	cmp	r2, r3
 8006646:	db3b      	blt.n	80066c0 <_printf_float+0x38c>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07da      	lsls	r2, r3, #31
 800664c:	d438      	bmi.n	80066c0 <_printf_float+0x38c>
 800664e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006650:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006652:	eba3 020a 	sub.w	r2, r3, sl
 8006656:	eba3 0901 	sub.w	r9, r3, r1
 800665a:	4591      	cmp	r9, r2
 800665c:	bfa8      	it	ge
 800665e:	4691      	movge	r9, r2
 8006660:	f1b9 0f00 	cmp.w	r9, #0
 8006664:	dc34      	bgt.n	80066d0 <_printf_float+0x39c>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800666e:	f104 0a1a 	add.w	sl, r4, #26
 8006672:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	eba3 0309 	sub.w	r3, r3, r9
 800667c:	4543      	cmp	r3, r8
 800667e:	f77f af7a 	ble.w	8006576 <_printf_float+0x242>
 8006682:	2301      	movs	r3, #1
 8006684:	4652      	mov	r2, sl
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f aeac 	beq.w	80063ea <_printf_float+0xb6>
 8006692:	f108 0801 	add.w	r8, r8, #1
 8006696:	e7ec      	b.n	8006672 <_printf_float+0x33e>
 8006698:	4613      	mov	r3, r2
 800669a:	4631      	mov	r1, r6
 800669c:	4642      	mov	r2, r8
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	d1c0      	bne.n	8006628 <_printf_float+0x2f4>
 80066a6:	e6a0      	b.n	80063ea <_printf_float+0xb6>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	f43f ae99 	beq.w	80063ea <_printf_float+0xb6>
 80066b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066ba:	f10b 0b01 	add.w	fp, fp, #1
 80066be:	e7b9      	b.n	8006634 <_printf_float+0x300>
 80066c0:	4631      	mov	r1, r6
 80066c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	d1bf      	bne.n	800664e <_printf_float+0x31a>
 80066ce:	e68c      	b.n	80063ea <_printf_float+0xb6>
 80066d0:	464b      	mov	r3, r9
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	eb08 020a 	add.w	r2, r8, sl
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1c2      	bne.n	8006666 <_printf_float+0x332>
 80066e0:	e683      	b.n	80063ea <_printf_float+0xb6>
 80066e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066e4:	2a01      	cmp	r2, #1
 80066e6:	dc01      	bgt.n	80066ec <_printf_float+0x3b8>
 80066e8:	07db      	lsls	r3, r3, #31
 80066ea:	d537      	bpl.n	800675c <_printf_float+0x428>
 80066ec:	2301      	movs	r3, #1
 80066ee:	4642      	mov	r2, r8
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	f43f ae77 	beq.w	80063ea <_printf_float+0xb6>
 80066fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	f43f ae6f 	beq.w	80063ea <_printf_float+0xb6>
 800670c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006710:	2200      	movs	r2, #0
 8006712:	2300      	movs	r3, #0
 8006714:	f7fa f948 	bl	80009a8 <__aeabi_dcmpeq>
 8006718:	b9d8      	cbnz	r0, 8006752 <_printf_float+0x41e>
 800671a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800671c:	f108 0201 	add.w	r2, r8, #1
 8006720:	3b01      	subs	r3, #1
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	d10e      	bne.n	800674a <_printf_float+0x416>
 800672c:	e65d      	b.n	80063ea <_printf_float+0xb6>
 800672e:	2301      	movs	r3, #1
 8006730:	464a      	mov	r2, r9
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	47b8      	blx	r7
 8006738:	3001      	adds	r0, #1
 800673a:	f43f ae56 	beq.w	80063ea <_printf_float+0xb6>
 800673e:	f108 0801 	add.w	r8, r8, #1
 8006742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006744:	3b01      	subs	r3, #1
 8006746:	4543      	cmp	r3, r8
 8006748:	dcf1      	bgt.n	800672e <_printf_float+0x3fa>
 800674a:	4653      	mov	r3, sl
 800674c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006750:	e6e0      	b.n	8006514 <_printf_float+0x1e0>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	f104 091a 	add.w	r9, r4, #26
 800675a:	e7f2      	b.n	8006742 <_printf_float+0x40e>
 800675c:	2301      	movs	r3, #1
 800675e:	4642      	mov	r2, r8
 8006760:	e7df      	b.n	8006722 <_printf_float+0x3ee>
 8006762:	2301      	movs	r3, #1
 8006764:	464a      	mov	r2, r9
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	f43f ae3c 	beq.w	80063ea <_printf_float+0xb6>
 8006772:	f108 0801 	add.w	r8, r8, #1
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800677a:	1a5b      	subs	r3, r3, r1
 800677c:	4543      	cmp	r3, r8
 800677e:	dcf0      	bgt.n	8006762 <_printf_float+0x42e>
 8006780:	e6fd      	b.n	800657e <_printf_float+0x24a>
 8006782:	f04f 0800 	mov.w	r8, #0
 8006786:	f104 0919 	add.w	r9, r4, #25
 800678a:	e7f4      	b.n	8006776 <_printf_float+0x442>

0800678c <_printf_common>:
 800678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	4616      	mov	r6, r2
 8006792:	4699      	mov	r9, r3
 8006794:	688a      	ldr	r2, [r1, #8]
 8006796:	690b      	ldr	r3, [r1, #16]
 8006798:	4607      	mov	r7, r0
 800679a:	4293      	cmp	r3, r2
 800679c:	bfb8      	it	lt
 800679e:	4613      	movlt	r3, r2
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067a6:	460c      	mov	r4, r1
 80067a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067ac:	b10a      	cbz	r2, 80067b2 <_printf_common+0x26>
 80067ae:	3301      	adds	r3, #1
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	0699      	lsls	r1, r3, #26
 80067b6:	bf42      	ittt	mi
 80067b8:	6833      	ldrmi	r3, [r6, #0]
 80067ba:	3302      	addmi	r3, #2
 80067bc:	6033      	strmi	r3, [r6, #0]
 80067be:	6825      	ldr	r5, [r4, #0]
 80067c0:	f015 0506 	ands.w	r5, r5, #6
 80067c4:	d106      	bne.n	80067d4 <_printf_common+0x48>
 80067c6:	f104 0a19 	add.w	sl, r4, #25
 80067ca:	68e3      	ldr	r3, [r4, #12]
 80067cc:	6832      	ldr	r2, [r6, #0]
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	42ab      	cmp	r3, r5
 80067d2:	dc28      	bgt.n	8006826 <_printf_common+0x9a>
 80067d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067d8:	1e13      	subs	r3, r2, #0
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	bf18      	it	ne
 80067de:	2301      	movne	r3, #1
 80067e0:	0692      	lsls	r2, r2, #26
 80067e2:	d42d      	bmi.n	8006840 <_printf_common+0xb4>
 80067e4:	4649      	mov	r1, r9
 80067e6:	4638      	mov	r0, r7
 80067e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067ec:	47c0      	blx	r8
 80067ee:	3001      	adds	r0, #1
 80067f0:	d020      	beq.n	8006834 <_printf_common+0xa8>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	68e5      	ldr	r5, [r4, #12]
 80067f6:	f003 0306 	and.w	r3, r3, #6
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	bf18      	it	ne
 80067fe:	2500      	movne	r5, #0
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	f04f 0600 	mov.w	r6, #0
 8006806:	68a3      	ldr	r3, [r4, #8]
 8006808:	bf08      	it	eq
 800680a:	1aad      	subeq	r5, r5, r2
 800680c:	6922      	ldr	r2, [r4, #16]
 800680e:	bf08      	it	eq
 8006810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006814:	4293      	cmp	r3, r2
 8006816:	bfc4      	itt	gt
 8006818:	1a9b      	subgt	r3, r3, r2
 800681a:	18ed      	addgt	r5, r5, r3
 800681c:	341a      	adds	r4, #26
 800681e:	42b5      	cmp	r5, r6
 8006820:	d11a      	bne.n	8006858 <_printf_common+0xcc>
 8006822:	2000      	movs	r0, #0
 8006824:	e008      	b.n	8006838 <_printf_common+0xac>
 8006826:	2301      	movs	r3, #1
 8006828:	4652      	mov	r2, sl
 800682a:	4649      	mov	r1, r9
 800682c:	4638      	mov	r0, r7
 800682e:	47c0      	blx	r8
 8006830:	3001      	adds	r0, #1
 8006832:	d103      	bne.n	800683c <_printf_common+0xb0>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683c:	3501      	adds	r5, #1
 800683e:	e7c4      	b.n	80067ca <_printf_common+0x3e>
 8006840:	2030      	movs	r0, #48	; 0x30
 8006842:	18e1      	adds	r1, r4, r3
 8006844:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800684e:	4422      	add	r2, r4
 8006850:	3302      	adds	r3, #2
 8006852:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006856:	e7c5      	b.n	80067e4 <_printf_common+0x58>
 8006858:	2301      	movs	r3, #1
 800685a:	4622      	mov	r2, r4
 800685c:	4649      	mov	r1, r9
 800685e:	4638      	mov	r0, r7
 8006860:	47c0      	blx	r8
 8006862:	3001      	adds	r0, #1
 8006864:	d0e6      	beq.n	8006834 <_printf_common+0xa8>
 8006866:	3601      	adds	r6, #1
 8006868:	e7d9      	b.n	800681e <_printf_common+0x92>
	...

0800686c <_printf_i>:
 800686c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	7e0f      	ldrb	r7, [r1, #24]
 8006872:	4691      	mov	r9, r2
 8006874:	2f78      	cmp	r7, #120	; 0x78
 8006876:	4680      	mov	r8, r0
 8006878:	460c      	mov	r4, r1
 800687a:	469a      	mov	sl, r3
 800687c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800687e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006882:	d807      	bhi.n	8006894 <_printf_i+0x28>
 8006884:	2f62      	cmp	r7, #98	; 0x62
 8006886:	d80a      	bhi.n	800689e <_printf_i+0x32>
 8006888:	2f00      	cmp	r7, #0
 800688a:	f000 80d9 	beq.w	8006a40 <_printf_i+0x1d4>
 800688e:	2f58      	cmp	r7, #88	; 0x58
 8006890:	f000 80a4 	beq.w	80069dc <_printf_i+0x170>
 8006894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800689c:	e03a      	b.n	8006914 <_printf_i+0xa8>
 800689e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068a2:	2b15      	cmp	r3, #21
 80068a4:	d8f6      	bhi.n	8006894 <_printf_i+0x28>
 80068a6:	a101      	add	r1, pc, #4	; (adr r1, 80068ac <_printf_i+0x40>)
 80068a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068ac:	08006905 	.word	0x08006905
 80068b0:	08006919 	.word	0x08006919
 80068b4:	08006895 	.word	0x08006895
 80068b8:	08006895 	.word	0x08006895
 80068bc:	08006895 	.word	0x08006895
 80068c0:	08006895 	.word	0x08006895
 80068c4:	08006919 	.word	0x08006919
 80068c8:	08006895 	.word	0x08006895
 80068cc:	08006895 	.word	0x08006895
 80068d0:	08006895 	.word	0x08006895
 80068d4:	08006895 	.word	0x08006895
 80068d8:	08006a27 	.word	0x08006a27
 80068dc:	08006949 	.word	0x08006949
 80068e0:	08006a09 	.word	0x08006a09
 80068e4:	08006895 	.word	0x08006895
 80068e8:	08006895 	.word	0x08006895
 80068ec:	08006a49 	.word	0x08006a49
 80068f0:	08006895 	.word	0x08006895
 80068f4:	08006949 	.word	0x08006949
 80068f8:	08006895 	.word	0x08006895
 80068fc:	08006895 	.word	0x08006895
 8006900:	08006a11 	.word	0x08006a11
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	1d1a      	adds	r2, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	602a      	str	r2, [r5, #0]
 800690c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006914:	2301      	movs	r3, #1
 8006916:	e0a4      	b.n	8006a62 <_printf_i+0x1f6>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	6829      	ldr	r1, [r5, #0]
 800691c:	0606      	lsls	r6, r0, #24
 800691e:	f101 0304 	add.w	r3, r1, #4
 8006922:	d50a      	bpl.n	800693a <_printf_i+0xce>
 8006924:	680e      	ldr	r6, [r1, #0]
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	2e00      	cmp	r6, #0
 800692a:	da03      	bge.n	8006934 <_printf_i+0xc8>
 800692c:	232d      	movs	r3, #45	; 0x2d
 800692e:	4276      	negs	r6, r6
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006934:	230a      	movs	r3, #10
 8006936:	485e      	ldr	r0, [pc, #376]	; (8006ab0 <_printf_i+0x244>)
 8006938:	e019      	b.n	800696e <_printf_i+0x102>
 800693a:	680e      	ldr	r6, [r1, #0]
 800693c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	bf18      	it	ne
 8006944:	b236      	sxthne	r6, r6
 8006946:	e7ef      	b.n	8006928 <_printf_i+0xbc>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	6029      	str	r1, [r5, #0]
 8006950:	0601      	lsls	r1, r0, #24
 8006952:	d501      	bpl.n	8006958 <_printf_i+0xec>
 8006954:	681e      	ldr	r6, [r3, #0]
 8006956:	e002      	b.n	800695e <_printf_i+0xf2>
 8006958:	0646      	lsls	r6, r0, #25
 800695a:	d5fb      	bpl.n	8006954 <_printf_i+0xe8>
 800695c:	881e      	ldrh	r6, [r3, #0]
 800695e:	2f6f      	cmp	r7, #111	; 0x6f
 8006960:	bf0c      	ite	eq
 8006962:	2308      	moveq	r3, #8
 8006964:	230a      	movne	r3, #10
 8006966:	4852      	ldr	r0, [pc, #328]	; (8006ab0 <_printf_i+0x244>)
 8006968:	2100      	movs	r1, #0
 800696a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800696e:	6865      	ldr	r5, [r4, #4]
 8006970:	2d00      	cmp	r5, #0
 8006972:	bfa8      	it	ge
 8006974:	6821      	ldrge	r1, [r4, #0]
 8006976:	60a5      	str	r5, [r4, #8]
 8006978:	bfa4      	itt	ge
 800697a:	f021 0104 	bicge.w	r1, r1, #4
 800697e:	6021      	strge	r1, [r4, #0]
 8006980:	b90e      	cbnz	r6, 8006986 <_printf_i+0x11a>
 8006982:	2d00      	cmp	r5, #0
 8006984:	d04d      	beq.n	8006a22 <_printf_i+0x1b6>
 8006986:	4615      	mov	r5, r2
 8006988:	fbb6 f1f3 	udiv	r1, r6, r3
 800698c:	fb03 6711 	mls	r7, r3, r1, r6
 8006990:	5dc7      	ldrb	r7, [r0, r7]
 8006992:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006996:	4637      	mov	r7, r6
 8006998:	42bb      	cmp	r3, r7
 800699a:	460e      	mov	r6, r1
 800699c:	d9f4      	bls.n	8006988 <_printf_i+0x11c>
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d10b      	bne.n	80069ba <_printf_i+0x14e>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	07de      	lsls	r6, r3, #31
 80069a6:	d508      	bpl.n	80069ba <_printf_i+0x14e>
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	6861      	ldr	r1, [r4, #4]
 80069ac:	4299      	cmp	r1, r3
 80069ae:	bfde      	ittt	le
 80069b0:	2330      	movle	r3, #48	; 0x30
 80069b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069ba:	1b52      	subs	r2, r2, r5
 80069bc:	6122      	str	r2, [r4, #16]
 80069be:	464b      	mov	r3, r9
 80069c0:	4621      	mov	r1, r4
 80069c2:	4640      	mov	r0, r8
 80069c4:	f8cd a000 	str.w	sl, [sp]
 80069c8:	aa03      	add	r2, sp, #12
 80069ca:	f7ff fedf 	bl	800678c <_printf_common>
 80069ce:	3001      	adds	r0, #1
 80069d0:	d14c      	bne.n	8006a6c <_printf_i+0x200>
 80069d2:	f04f 30ff 	mov.w	r0, #4294967295
 80069d6:	b004      	add	sp, #16
 80069d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069dc:	4834      	ldr	r0, [pc, #208]	; (8006ab0 <_printf_i+0x244>)
 80069de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069e2:	6829      	ldr	r1, [r5, #0]
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80069ea:	6029      	str	r1, [r5, #0]
 80069ec:	061d      	lsls	r5, r3, #24
 80069ee:	d514      	bpl.n	8006a1a <_printf_i+0x1ae>
 80069f0:	07df      	lsls	r7, r3, #31
 80069f2:	bf44      	itt	mi
 80069f4:	f043 0320 	orrmi.w	r3, r3, #32
 80069f8:	6023      	strmi	r3, [r4, #0]
 80069fa:	b91e      	cbnz	r6, 8006a04 <_printf_i+0x198>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	f023 0320 	bic.w	r3, r3, #32
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	2310      	movs	r3, #16
 8006a06:	e7af      	b.n	8006968 <_printf_i+0xfc>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	f043 0320 	orr.w	r3, r3, #32
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	2378      	movs	r3, #120	; 0x78
 8006a12:	4828      	ldr	r0, [pc, #160]	; (8006ab4 <_printf_i+0x248>)
 8006a14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a18:	e7e3      	b.n	80069e2 <_printf_i+0x176>
 8006a1a:	0659      	lsls	r1, r3, #25
 8006a1c:	bf48      	it	mi
 8006a1e:	b2b6      	uxthmi	r6, r6
 8006a20:	e7e6      	b.n	80069f0 <_printf_i+0x184>
 8006a22:	4615      	mov	r5, r2
 8006a24:	e7bb      	b.n	800699e <_printf_i+0x132>
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	6826      	ldr	r6, [r4, #0]
 8006a2a:	1d18      	adds	r0, r3, #4
 8006a2c:	6961      	ldr	r1, [r4, #20]
 8006a2e:	6028      	str	r0, [r5, #0]
 8006a30:	0635      	lsls	r5, r6, #24
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	d501      	bpl.n	8006a3a <_printf_i+0x1ce>
 8006a36:	6019      	str	r1, [r3, #0]
 8006a38:	e002      	b.n	8006a40 <_printf_i+0x1d4>
 8006a3a:	0670      	lsls	r0, r6, #25
 8006a3c:	d5fb      	bpl.n	8006a36 <_printf_i+0x1ca>
 8006a3e:	8019      	strh	r1, [r3, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	4615      	mov	r5, r2
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	e7ba      	b.n	80069be <_printf_i+0x152>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	602a      	str	r2, [r5, #0]
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	4628      	mov	r0, r5
 8006a56:	f002 faed 	bl	8009034 <memchr>
 8006a5a:	b108      	cbz	r0, 8006a60 <_printf_i+0x1f4>
 8006a5c:	1b40      	subs	r0, r0, r5
 8006a5e:	6060      	str	r0, [r4, #4]
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	2300      	movs	r3, #0
 8006a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a6a:	e7a8      	b.n	80069be <_printf_i+0x152>
 8006a6c:	462a      	mov	r2, r5
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	47d0      	blx	sl
 8006a76:	3001      	adds	r0, #1
 8006a78:	d0ab      	beq.n	80069d2 <_printf_i+0x166>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	079b      	lsls	r3, r3, #30
 8006a7e:	d413      	bmi.n	8006aa8 <_printf_i+0x23c>
 8006a80:	68e0      	ldr	r0, [r4, #12]
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	4298      	cmp	r0, r3
 8006a86:	bfb8      	it	lt
 8006a88:	4618      	movlt	r0, r3
 8006a8a:	e7a4      	b.n	80069d6 <_printf_i+0x16a>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4632      	mov	r2, r6
 8006a90:	4649      	mov	r1, r9
 8006a92:	4640      	mov	r0, r8
 8006a94:	47d0      	blx	sl
 8006a96:	3001      	adds	r0, #1
 8006a98:	d09b      	beq.n	80069d2 <_printf_i+0x166>
 8006a9a:	3501      	adds	r5, #1
 8006a9c:	68e3      	ldr	r3, [r4, #12]
 8006a9e:	9903      	ldr	r1, [sp, #12]
 8006aa0:	1a5b      	subs	r3, r3, r1
 8006aa2:	42ab      	cmp	r3, r5
 8006aa4:	dcf2      	bgt.n	8006a8c <_printf_i+0x220>
 8006aa6:	e7eb      	b.n	8006a80 <_printf_i+0x214>
 8006aa8:	2500      	movs	r5, #0
 8006aaa:	f104 0619 	add.w	r6, r4, #25
 8006aae:	e7f5      	b.n	8006a9c <_printf_i+0x230>
 8006ab0:	0800aad2 	.word	0x0800aad2
 8006ab4:	0800aae3 	.word	0x0800aae3

08006ab8 <_scanf_float>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	b087      	sub	sp, #28
 8006abe:	9303      	str	r3, [sp, #12]
 8006ac0:	688b      	ldr	r3, [r1, #8]
 8006ac2:	4617      	mov	r7, r2
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006aca:	bf85      	ittet	hi
 8006acc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ad0:	195b      	addhi	r3, r3, r5
 8006ad2:	2300      	movls	r3, #0
 8006ad4:	9302      	strhi	r3, [sp, #8]
 8006ad6:	bf88      	it	hi
 8006ad8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006adc:	468b      	mov	fp, r1
 8006ade:	f04f 0500 	mov.w	r5, #0
 8006ae2:	bf8c      	ite	hi
 8006ae4:	608b      	strhi	r3, [r1, #8]
 8006ae6:	9302      	strls	r3, [sp, #8]
 8006ae8:	680b      	ldr	r3, [r1, #0]
 8006aea:	4680      	mov	r8, r0
 8006aec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006af0:	f84b 3b1c 	str.w	r3, [fp], #28
 8006af4:	460c      	mov	r4, r1
 8006af6:	465e      	mov	r6, fp
 8006af8:	46aa      	mov	sl, r5
 8006afa:	46a9      	mov	r9, r5
 8006afc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b00:	9501      	str	r5, [sp, #4]
 8006b02:	68a2      	ldr	r2, [r4, #8]
 8006b04:	b152      	cbz	r2, 8006b1c <_scanf_float+0x64>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b4e      	cmp	r3, #78	; 0x4e
 8006b0c:	d864      	bhi.n	8006bd8 <_scanf_float+0x120>
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d83c      	bhi.n	8006b8c <_scanf_float+0xd4>
 8006b12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006b16:	b2c8      	uxtb	r0, r1
 8006b18:	280e      	cmp	r0, #14
 8006b1a:	d93a      	bls.n	8006b92 <_scanf_float+0xda>
 8006b1c:	f1b9 0f00 	cmp.w	r9, #0
 8006b20:	d003      	beq.n	8006b2a <_scanf_float+0x72>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2e:	f1ba 0f01 	cmp.w	sl, #1
 8006b32:	f200 8113 	bhi.w	8006d5c <_scanf_float+0x2a4>
 8006b36:	455e      	cmp	r6, fp
 8006b38:	f200 8105 	bhi.w	8006d46 <_scanf_float+0x28e>
 8006b3c:	2501      	movs	r5, #1
 8006b3e:	4628      	mov	r0, r5
 8006b40:	b007      	add	sp, #28
 8006b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b4a:	2a0d      	cmp	r2, #13
 8006b4c:	d8e6      	bhi.n	8006b1c <_scanf_float+0x64>
 8006b4e:	a101      	add	r1, pc, #4	; (adr r1, 8006b54 <_scanf_float+0x9c>)
 8006b50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b54:	08006c93 	.word	0x08006c93
 8006b58:	08006b1d 	.word	0x08006b1d
 8006b5c:	08006b1d 	.word	0x08006b1d
 8006b60:	08006b1d 	.word	0x08006b1d
 8006b64:	08006cf3 	.word	0x08006cf3
 8006b68:	08006ccb 	.word	0x08006ccb
 8006b6c:	08006b1d 	.word	0x08006b1d
 8006b70:	08006b1d 	.word	0x08006b1d
 8006b74:	08006ca1 	.word	0x08006ca1
 8006b78:	08006b1d 	.word	0x08006b1d
 8006b7c:	08006b1d 	.word	0x08006b1d
 8006b80:	08006b1d 	.word	0x08006b1d
 8006b84:	08006b1d 	.word	0x08006b1d
 8006b88:	08006c59 	.word	0x08006c59
 8006b8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b90:	e7db      	b.n	8006b4a <_scanf_float+0x92>
 8006b92:	290e      	cmp	r1, #14
 8006b94:	d8c2      	bhi.n	8006b1c <_scanf_float+0x64>
 8006b96:	a001      	add	r0, pc, #4	; (adr r0, 8006b9c <_scanf_float+0xe4>)
 8006b98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b9c:	08006c4b 	.word	0x08006c4b
 8006ba0:	08006b1d 	.word	0x08006b1d
 8006ba4:	08006c4b 	.word	0x08006c4b
 8006ba8:	08006cdf 	.word	0x08006cdf
 8006bac:	08006b1d 	.word	0x08006b1d
 8006bb0:	08006bf9 	.word	0x08006bf9
 8006bb4:	08006c35 	.word	0x08006c35
 8006bb8:	08006c35 	.word	0x08006c35
 8006bbc:	08006c35 	.word	0x08006c35
 8006bc0:	08006c35 	.word	0x08006c35
 8006bc4:	08006c35 	.word	0x08006c35
 8006bc8:	08006c35 	.word	0x08006c35
 8006bcc:	08006c35 	.word	0x08006c35
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006c35 	.word	0x08006c35
 8006bd8:	2b6e      	cmp	r3, #110	; 0x6e
 8006bda:	d809      	bhi.n	8006bf0 <_scanf_float+0x138>
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d8b2      	bhi.n	8006b46 <_scanf_float+0x8e>
 8006be0:	2b54      	cmp	r3, #84	; 0x54
 8006be2:	d077      	beq.n	8006cd4 <_scanf_float+0x21c>
 8006be4:	2b59      	cmp	r3, #89	; 0x59
 8006be6:	d199      	bne.n	8006b1c <_scanf_float+0x64>
 8006be8:	2d07      	cmp	r5, #7
 8006bea:	d197      	bne.n	8006b1c <_scanf_float+0x64>
 8006bec:	2508      	movs	r5, #8
 8006bee:	e029      	b.n	8006c44 <_scanf_float+0x18c>
 8006bf0:	2b74      	cmp	r3, #116	; 0x74
 8006bf2:	d06f      	beq.n	8006cd4 <_scanf_float+0x21c>
 8006bf4:	2b79      	cmp	r3, #121	; 0x79
 8006bf6:	e7f6      	b.n	8006be6 <_scanf_float+0x12e>
 8006bf8:	6821      	ldr	r1, [r4, #0]
 8006bfa:	05c8      	lsls	r0, r1, #23
 8006bfc:	d51a      	bpl.n	8006c34 <_scanf_float+0x17c>
 8006bfe:	9b02      	ldr	r3, [sp, #8]
 8006c00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c04:	6021      	str	r1, [r4, #0]
 8006c06:	f109 0901 	add.w	r9, r9, #1
 8006c0a:	b11b      	cbz	r3, 8006c14 <_scanf_float+0x15c>
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	3201      	adds	r2, #1
 8006c10:	9302      	str	r3, [sp, #8]
 8006c12:	60a2      	str	r2, [r4, #8]
 8006c14:	68a3      	ldr	r3, [r4, #8]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	60a3      	str	r3, [r4, #8]
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	f340 8084 	ble.w	8006d34 <_scanf_float+0x27c>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	e766      	b.n	8006b02 <_scanf_float+0x4a>
 8006c34:	eb1a 0f05 	cmn.w	sl, r5
 8006c38:	f47f af70 	bne.w	8006b1c <_scanf_float+0x64>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	f806 3b01 	strb.w	r3, [r6], #1
 8006c48:	e7e4      	b.n	8006c14 <_scanf_float+0x15c>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	0610      	lsls	r0, r2, #24
 8006c4e:	f57f af65 	bpl.w	8006b1c <_scanf_float+0x64>
 8006c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c56:	e7f4      	b.n	8006c42 <_scanf_float+0x18a>
 8006c58:	f1ba 0f00 	cmp.w	sl, #0
 8006c5c:	d10e      	bne.n	8006c7c <_scanf_float+0x1c4>
 8006c5e:	f1b9 0f00 	cmp.w	r9, #0
 8006c62:	d10e      	bne.n	8006c82 <_scanf_float+0x1ca>
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c6e:	d108      	bne.n	8006c82 <_scanf_float+0x1ca>
 8006c70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c74:	f04f 0a01 	mov.w	sl, #1
 8006c78:	6022      	str	r2, [r4, #0]
 8006c7a:	e7e3      	b.n	8006c44 <_scanf_float+0x18c>
 8006c7c:	f1ba 0f02 	cmp.w	sl, #2
 8006c80:	d055      	beq.n	8006d2e <_scanf_float+0x276>
 8006c82:	2d01      	cmp	r5, #1
 8006c84:	d002      	beq.n	8006c8c <_scanf_float+0x1d4>
 8006c86:	2d04      	cmp	r5, #4
 8006c88:	f47f af48 	bne.w	8006b1c <_scanf_float+0x64>
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	b2ed      	uxtb	r5, r5
 8006c90:	e7d8      	b.n	8006c44 <_scanf_float+0x18c>
 8006c92:	f1ba 0f01 	cmp.w	sl, #1
 8006c96:	f47f af41 	bne.w	8006b1c <_scanf_float+0x64>
 8006c9a:	f04f 0a02 	mov.w	sl, #2
 8006c9e:	e7d1      	b.n	8006c44 <_scanf_float+0x18c>
 8006ca0:	b97d      	cbnz	r5, 8006cc2 <_scanf_float+0x20a>
 8006ca2:	f1b9 0f00 	cmp.w	r9, #0
 8006ca6:	f47f af3c 	bne.w	8006b22 <_scanf_float+0x6a>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006cb4:	f47f af39 	bne.w	8006b2a <_scanf_float+0x72>
 8006cb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cbc:	2501      	movs	r5, #1
 8006cbe:	6022      	str	r2, [r4, #0]
 8006cc0:	e7c0      	b.n	8006c44 <_scanf_float+0x18c>
 8006cc2:	2d03      	cmp	r5, #3
 8006cc4:	d0e2      	beq.n	8006c8c <_scanf_float+0x1d4>
 8006cc6:	2d05      	cmp	r5, #5
 8006cc8:	e7de      	b.n	8006c88 <_scanf_float+0x1d0>
 8006cca:	2d02      	cmp	r5, #2
 8006ccc:	f47f af26 	bne.w	8006b1c <_scanf_float+0x64>
 8006cd0:	2503      	movs	r5, #3
 8006cd2:	e7b7      	b.n	8006c44 <_scanf_float+0x18c>
 8006cd4:	2d06      	cmp	r5, #6
 8006cd6:	f47f af21 	bne.w	8006b1c <_scanf_float+0x64>
 8006cda:	2507      	movs	r5, #7
 8006cdc:	e7b2      	b.n	8006c44 <_scanf_float+0x18c>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	0591      	lsls	r1, r2, #22
 8006ce2:	f57f af1b 	bpl.w	8006b1c <_scanf_float+0x64>
 8006ce6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cf0:	e7a8      	b.n	8006c44 <_scanf_float+0x18c>
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cf8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cfc:	d006      	beq.n	8006d0c <_scanf_float+0x254>
 8006cfe:	0550      	lsls	r0, r2, #21
 8006d00:	f57f af0c 	bpl.w	8006b1c <_scanf_float+0x64>
 8006d04:	f1b9 0f00 	cmp.w	r9, #0
 8006d08:	f43f af0f 	beq.w	8006b2a <_scanf_float+0x72>
 8006d0c:	0591      	lsls	r1, r2, #22
 8006d0e:	bf58      	it	pl
 8006d10:	9901      	ldrpl	r1, [sp, #4]
 8006d12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d16:	bf58      	it	pl
 8006d18:	eba9 0101 	subpl.w	r1, r9, r1
 8006d1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006d20:	f04f 0900 	mov.w	r9, #0
 8006d24:	bf58      	it	pl
 8006d26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d2a:	6022      	str	r2, [r4, #0]
 8006d2c:	e78a      	b.n	8006c44 <_scanf_float+0x18c>
 8006d2e:	f04f 0a03 	mov.w	sl, #3
 8006d32:	e787      	b.n	8006c44 <_scanf_float+0x18c>
 8006d34:	4639      	mov	r1, r7
 8006d36:	4640      	mov	r0, r8
 8006d38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d3c:	4798      	blx	r3
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f aedf 	beq.w	8006b02 <_scanf_float+0x4a>
 8006d44:	e6ea      	b.n	8006b1c <_scanf_float+0x64>
 8006d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d4a:	463a      	mov	r2, r7
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d52:	4798      	blx	r3
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	e6ec      	b.n	8006b36 <_scanf_float+0x7e>
 8006d5c:	1e6b      	subs	r3, r5, #1
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d825      	bhi.n	8006dae <_scanf_float+0x2f6>
 8006d62:	2d02      	cmp	r5, #2
 8006d64:	d836      	bhi.n	8006dd4 <_scanf_float+0x31c>
 8006d66:	455e      	cmp	r6, fp
 8006d68:	f67f aee8 	bls.w	8006b3c <_scanf_float+0x84>
 8006d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d70:	463a      	mov	r2, r7
 8006d72:	4640      	mov	r0, r8
 8006d74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d78:	4798      	blx	r3
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	6123      	str	r3, [r4, #16]
 8006d80:	e7f1      	b.n	8006d66 <_scanf_float+0x2ae>
 8006d82:	9802      	ldr	r0, [sp, #8]
 8006d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d8c:	463a      	mov	r2, r7
 8006d8e:	9002      	str	r0, [sp, #8]
 8006d90:	4640      	mov	r0, r8
 8006d92:	4798      	blx	r3
 8006d94:	6923      	ldr	r3, [r4, #16]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d9e:	fa5f fa8a 	uxtb.w	sl, sl
 8006da2:	f1ba 0f02 	cmp.w	sl, #2
 8006da6:	d1ec      	bne.n	8006d82 <_scanf_float+0x2ca>
 8006da8:	3d03      	subs	r5, #3
 8006daa:	b2ed      	uxtb	r5, r5
 8006dac:	1b76      	subs	r6, r6, r5
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	05da      	lsls	r2, r3, #23
 8006db2:	d52f      	bpl.n	8006e14 <_scanf_float+0x35c>
 8006db4:	055b      	lsls	r3, r3, #21
 8006db6:	d510      	bpl.n	8006dda <_scanf_float+0x322>
 8006db8:	455e      	cmp	r6, fp
 8006dba:	f67f aebf 	bls.w	8006b3c <_scanf_float+0x84>
 8006dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dca:	4798      	blx	r3
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	6123      	str	r3, [r4, #16]
 8006dd2:	e7f1      	b.n	8006db8 <_scanf_float+0x300>
 8006dd4:	46aa      	mov	sl, r5
 8006dd6:	9602      	str	r6, [sp, #8]
 8006dd8:	e7df      	b.n	8006d9a <_scanf_float+0x2e2>
 8006dda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	2965      	cmp	r1, #101	; 0x65
 8006de2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006de6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dea:	6123      	str	r3, [r4, #16]
 8006dec:	d00c      	beq.n	8006e08 <_scanf_float+0x350>
 8006dee:	2945      	cmp	r1, #69	; 0x45
 8006df0:	d00a      	beq.n	8006e08 <_scanf_float+0x350>
 8006df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006df6:	463a      	mov	r2, r7
 8006df8:	4640      	mov	r0, r8
 8006dfa:	4798      	blx	r3
 8006dfc:	6923      	ldr	r3, [r4, #16]
 8006dfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	1eb5      	subs	r5, r6, #2
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	463a      	mov	r2, r7
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e10:	4798      	blx	r3
 8006e12:	462e      	mov	r6, r5
 8006e14:	6825      	ldr	r5, [r4, #0]
 8006e16:	f015 0510 	ands.w	r5, r5, #16
 8006e1a:	d155      	bne.n	8006ec8 <_scanf_float+0x410>
 8006e1c:	7035      	strb	r5, [r6, #0]
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e28:	d11b      	bne.n	8006e62 <_scanf_float+0x3aa>
 8006e2a:	9b01      	ldr	r3, [sp, #4]
 8006e2c:	454b      	cmp	r3, r9
 8006e2e:	eba3 0209 	sub.w	r2, r3, r9
 8006e32:	d123      	bne.n	8006e7c <_scanf_float+0x3c4>
 8006e34:	2200      	movs	r2, #0
 8006e36:	4659      	mov	r1, fp
 8006e38:	4640      	mov	r0, r8
 8006e3a:	f000 fe79 	bl	8007b30 <_strtod_r>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	f012 0f02 	tst.w	r2, #2
 8006e46:	4606      	mov	r6, r0
 8006e48:	460f      	mov	r7, r1
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	d021      	beq.n	8006e92 <_scanf_float+0x3da>
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	9903      	ldr	r1, [sp, #12]
 8006e52:	600a      	str	r2, [r1, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	e9c3 6700 	strd	r6, r7, [r3]
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60e3      	str	r3, [r4, #12]
 8006e60:	e66d      	b.n	8006b3e <_scanf_float+0x86>
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0e5      	beq.n	8006e34 <_scanf_float+0x37c>
 8006e68:	9905      	ldr	r1, [sp, #20]
 8006e6a:	230a      	movs	r3, #10
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	4640      	mov	r0, r8
 8006e70:	3101      	adds	r1, #1
 8006e72:	f000 fedf 	bl	8007c34 <_strtol_r>
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	9e05      	ldr	r6, [sp, #20]
 8006e7a:	1ac2      	subs	r2, r0, r3
 8006e7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e80:	429e      	cmp	r6, r3
 8006e82:	bf28      	it	cs
 8006e84:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4910      	ldr	r1, [pc, #64]	; (8006ecc <_scanf_float+0x414>)
 8006e8c:	f000 f826 	bl	8006edc <siprintf>
 8006e90:	e7d0      	b.n	8006e34 <_scanf_float+0x37c>
 8006e92:	f012 0f04 	tst.w	r2, #4
 8006e96:	f103 0204 	add.w	r2, r3, #4
 8006e9a:	d1d9      	bne.n	8006e50 <_scanf_float+0x398>
 8006e9c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006ea0:	f8cc 2000 	str.w	r2, [ip]
 8006ea4:	f8d3 8000 	ldr.w	r8, [r3]
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	f7f9 fdae 	bl	8000a0c <__aeabi_dcmpun>
 8006eb0:	b128      	cbz	r0, 8006ebe <_scanf_float+0x406>
 8006eb2:	4807      	ldr	r0, [pc, #28]	; (8006ed0 <_scanf_float+0x418>)
 8006eb4:	f000 f80e 	bl	8006ed4 <nanf>
 8006eb8:	f8c8 0000 	str.w	r0, [r8]
 8006ebc:	e7cd      	b.n	8006e5a <_scanf_float+0x3a2>
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	f7f9 fe01 	bl	8000ac8 <__aeabi_d2f>
 8006ec6:	e7f7      	b.n	8006eb8 <_scanf_float+0x400>
 8006ec8:	2500      	movs	r5, #0
 8006eca:	e638      	b.n	8006b3e <_scanf_float+0x86>
 8006ecc:	0800aaf4 	.word	0x0800aaf4
 8006ed0:	0800af00 	.word	0x0800af00

08006ed4 <nanf>:
 8006ed4:	4800      	ldr	r0, [pc, #0]	; (8006ed8 <nanf+0x4>)
 8006ed6:	4770      	bx	lr
 8006ed8:	7fc00000 	.word	0x7fc00000

08006edc <siprintf>:
 8006edc:	b40e      	push	{r1, r2, r3}
 8006ede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ee2:	b500      	push	{lr}
 8006ee4:	b09c      	sub	sp, #112	; 0x70
 8006ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ee8:	9002      	str	r0, [sp, #8]
 8006eea:	9006      	str	r0, [sp, #24]
 8006eec:	9107      	str	r1, [sp, #28]
 8006eee:	9104      	str	r1, [sp, #16]
 8006ef0:	4808      	ldr	r0, [pc, #32]	; (8006f14 <siprintf+0x38>)
 8006ef2:	4909      	ldr	r1, [pc, #36]	; (8006f18 <siprintf+0x3c>)
 8006ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef8:	9105      	str	r1, [sp, #20]
 8006efa:	6800      	ldr	r0, [r0, #0]
 8006efc:	a902      	add	r1, sp, #8
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	f002 feb8 	bl	8009c74 <_svfiprintf_r>
 8006f04:	2200      	movs	r2, #0
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	b01c      	add	sp, #112	; 0x70
 8006f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f10:	b003      	add	sp, #12
 8006f12:	4770      	bx	lr
 8006f14:	2000003c 	.word	0x2000003c
 8006f18:	ffff0208 	.word	0xffff0208

08006f1c <sulp>:
 8006f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	460f      	mov	r7, r1
 8006f22:	4690      	mov	r8, r2
 8006f24:	f002 fc12 	bl	800974c <__ulp>
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	f1b8 0f00 	cmp.w	r8, #0
 8006f30:	d011      	beq.n	8006f56 <sulp+0x3a>
 8006f32:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dd0b      	ble.n	8006f56 <sulp+0x3a>
 8006f3e:	2400      	movs	r4, #0
 8006f40:	051b      	lsls	r3, r3, #20
 8006f42:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	f7f9 fac3 	bl	80004d8 <__aeabi_dmul>
 8006f52:	4604      	mov	r4, r0
 8006f54:	460d      	mov	r5, r1
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006f60 <_strtod_l>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	469b      	mov	fp, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	b09f      	sub	sp, #124	; 0x7c
 8006f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f6c:	4b9e      	ldr	r3, [pc, #632]	; (80071e8 <_strtod_l+0x288>)
 8006f6e:	4682      	mov	sl, r0
 8006f70:	681f      	ldr	r7, [r3, #0]
 8006f72:	460e      	mov	r6, r1
 8006f74:	4638      	mov	r0, r7
 8006f76:	9215      	str	r2, [sp, #84]	; 0x54
 8006f78:	f7f9 f8ea 	bl	8000150 <strlen>
 8006f7c:	f04f 0800 	mov.w	r8, #0
 8006f80:	4604      	mov	r4, r0
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	9619      	str	r6, [sp, #100]	; 0x64
 8006f88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	2a2b      	cmp	r2, #43	; 0x2b
 8006f8e:	d04c      	beq.n	800702a <_strtod_l+0xca>
 8006f90:	d83a      	bhi.n	8007008 <_strtod_l+0xa8>
 8006f92:	2a0d      	cmp	r2, #13
 8006f94:	d833      	bhi.n	8006ffe <_strtod_l+0x9e>
 8006f96:	2a08      	cmp	r2, #8
 8006f98:	d833      	bhi.n	8007002 <_strtod_l+0xa2>
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	d03d      	beq.n	800701a <_strtod_l+0xba>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006fa4:	782b      	ldrb	r3, [r5, #0]
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	f040 80aa 	bne.w	8007100 <_strtod_l+0x1a0>
 8006fac:	786b      	ldrb	r3, [r5, #1]
 8006fae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fb2:	2b58      	cmp	r3, #88	; 0x58
 8006fb4:	d166      	bne.n	8007084 <_strtod_l+0x124>
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb8:	4650      	mov	r0, sl
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	ab1a      	add	r3, sp, #104	; 0x68
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4a8a      	ldr	r2, [pc, #552]	; (80071ec <_strtod_l+0x28c>)
 8006fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8006fc6:	ab1b      	add	r3, sp, #108	; 0x6c
 8006fc8:	a919      	add	r1, sp, #100	; 0x64
 8006fca:	f001 fd17 	bl	80089fc <__gethex>
 8006fce:	f010 0607 	ands.w	r6, r0, #7
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	d005      	beq.n	8006fe2 <_strtod_l+0x82>
 8006fd6:	2e06      	cmp	r6, #6
 8006fd8:	d129      	bne.n	800702e <_strtod_l+0xce>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	3501      	adds	r5, #1
 8006fde:	9519      	str	r5, [sp, #100]	; 0x64
 8006fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f040 858a 	bne.w	8007afe <_strtod_l+0xb9e>
 8006fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fec:	b1d3      	cbz	r3, 8007024 <_strtod_l+0xc4>
 8006fee:	4642      	mov	r2, r8
 8006ff0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	b01f      	add	sp, #124	; 0x7c
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	2a20      	cmp	r2, #32
 8007000:	d1cd      	bne.n	8006f9e <_strtod_l+0x3e>
 8007002:	3301      	adds	r3, #1
 8007004:	9319      	str	r3, [sp, #100]	; 0x64
 8007006:	e7bf      	b.n	8006f88 <_strtod_l+0x28>
 8007008:	2a2d      	cmp	r2, #45	; 0x2d
 800700a:	d1c8      	bne.n	8006f9e <_strtod_l+0x3e>
 800700c:	2201      	movs	r2, #1
 800700e:	920a      	str	r2, [sp, #40]	; 0x28
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	9219      	str	r2, [sp, #100]	; 0x64
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1c3      	bne.n	8006fa2 <_strtod_l+0x42>
 800701a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800701c:	9619      	str	r6, [sp, #100]	; 0x64
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 856b 	bne.w	8007afa <_strtod_l+0xb9a>
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	e7e4      	b.n	8006ff4 <_strtod_l+0x94>
 800702a:	2200      	movs	r2, #0
 800702c:	e7ef      	b.n	800700e <_strtod_l+0xae>
 800702e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007030:	b13a      	cbz	r2, 8007042 <_strtod_l+0xe2>
 8007032:	2135      	movs	r1, #53	; 0x35
 8007034:	a81c      	add	r0, sp, #112	; 0x70
 8007036:	f002 fc8d 	bl	8009954 <__copybits>
 800703a:	4650      	mov	r0, sl
 800703c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800703e:	f002 f855 	bl	80090ec <_Bfree>
 8007042:	3e01      	subs	r6, #1
 8007044:	2e04      	cmp	r6, #4
 8007046:	d806      	bhi.n	8007056 <_strtod_l+0xf6>
 8007048:	e8df f006 	tbb	[pc, r6]
 800704c:	1714030a 	.word	0x1714030a
 8007050:	0a          	.byte	0x0a
 8007051:	00          	.byte	0x00
 8007052:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007056:	0721      	lsls	r1, r4, #28
 8007058:	d5c3      	bpl.n	8006fe2 <_strtod_l+0x82>
 800705a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800705e:	e7c0      	b.n	8006fe2 <_strtod_l+0x82>
 8007060:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007062:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007066:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800706a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800706e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007072:	e7f0      	b.n	8007056 <_strtod_l+0xf6>
 8007074:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80071f0 <_strtod_l+0x290>
 8007078:	e7ed      	b.n	8007056 <_strtod_l+0xf6>
 800707a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800707e:	f04f 38ff 	mov.w	r8, #4294967295
 8007082:	e7e8      	b.n	8007056 <_strtod_l+0xf6>
 8007084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	9219      	str	r2, [sp, #100]	; 0x64
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b30      	cmp	r3, #48	; 0x30
 800708e:	d0f9      	beq.n	8007084 <_strtod_l+0x124>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0a6      	beq.n	8006fe2 <_strtod_l+0x82>
 8007094:	2301      	movs	r3, #1
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800709a:	220a      	movs	r2, #10
 800709c:	9308      	str	r3, [sp, #32]
 800709e:	2300      	movs	r3, #0
 80070a0:	469b      	mov	fp, r3
 80070a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80070a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80070a8:	7805      	ldrb	r5, [r0, #0]
 80070aa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80070ae:	b2d9      	uxtb	r1, r3
 80070b0:	2909      	cmp	r1, #9
 80070b2:	d927      	bls.n	8007104 <_strtod_l+0x1a4>
 80070b4:	4622      	mov	r2, r4
 80070b6:	4639      	mov	r1, r7
 80070b8:	f002 fef2 	bl	8009ea0 <strncmp>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d033      	beq.n	8007128 <_strtod_l+0x1c8>
 80070c0:	2000      	movs	r0, #0
 80070c2:	462a      	mov	r2, r5
 80070c4:	465c      	mov	r4, fp
 80070c6:	4603      	mov	r3, r0
 80070c8:	9004      	str	r0, [sp, #16]
 80070ca:	2a65      	cmp	r2, #101	; 0x65
 80070cc:	d001      	beq.n	80070d2 <_strtod_l+0x172>
 80070ce:	2a45      	cmp	r2, #69	; 0x45
 80070d0:	d114      	bne.n	80070fc <_strtod_l+0x19c>
 80070d2:	b91c      	cbnz	r4, 80070dc <_strtod_l+0x17c>
 80070d4:	9a07      	ldr	r2, [sp, #28]
 80070d6:	4302      	orrs	r2, r0
 80070d8:	d09f      	beq.n	800701a <_strtod_l+0xba>
 80070da:	2400      	movs	r4, #0
 80070dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80070de:	1c72      	adds	r2, r6, #1
 80070e0:	9219      	str	r2, [sp, #100]	; 0x64
 80070e2:	7872      	ldrb	r2, [r6, #1]
 80070e4:	2a2b      	cmp	r2, #43	; 0x2b
 80070e6:	d079      	beq.n	80071dc <_strtod_l+0x27c>
 80070e8:	2a2d      	cmp	r2, #45	; 0x2d
 80070ea:	f000 8083 	beq.w	80071f4 <_strtod_l+0x294>
 80070ee:	2700      	movs	r7, #0
 80070f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80070f4:	2909      	cmp	r1, #9
 80070f6:	f240 8083 	bls.w	8007200 <_strtod_l+0x2a0>
 80070fa:	9619      	str	r6, [sp, #100]	; 0x64
 80070fc:	2500      	movs	r5, #0
 80070fe:	e09f      	b.n	8007240 <_strtod_l+0x2e0>
 8007100:	2300      	movs	r3, #0
 8007102:	e7c8      	b.n	8007096 <_strtod_l+0x136>
 8007104:	f1bb 0f08 	cmp.w	fp, #8
 8007108:	bfd5      	itete	le
 800710a:	9906      	ldrle	r1, [sp, #24]
 800710c:	9905      	ldrgt	r1, [sp, #20]
 800710e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007112:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007116:	f100 0001 	add.w	r0, r0, #1
 800711a:	bfd4      	ite	le
 800711c:	9306      	strle	r3, [sp, #24]
 800711e:	9305      	strgt	r3, [sp, #20]
 8007120:	f10b 0b01 	add.w	fp, fp, #1
 8007124:	9019      	str	r0, [sp, #100]	; 0x64
 8007126:	e7be      	b.n	80070a6 <_strtod_l+0x146>
 8007128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800712a:	191a      	adds	r2, r3, r4
 800712c:	9219      	str	r2, [sp, #100]	; 0x64
 800712e:	5d1a      	ldrb	r2, [r3, r4]
 8007130:	f1bb 0f00 	cmp.w	fp, #0
 8007134:	d036      	beq.n	80071a4 <_strtod_l+0x244>
 8007136:	465c      	mov	r4, fp
 8007138:	9004      	str	r0, [sp, #16]
 800713a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800713e:	2b09      	cmp	r3, #9
 8007140:	d912      	bls.n	8007168 <_strtod_l+0x208>
 8007142:	2301      	movs	r3, #1
 8007144:	e7c1      	b.n	80070ca <_strtod_l+0x16a>
 8007146:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007148:	3001      	adds	r0, #1
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	9219      	str	r2, [sp, #100]	; 0x64
 800714e:	785a      	ldrb	r2, [r3, #1]
 8007150:	2a30      	cmp	r2, #48	; 0x30
 8007152:	d0f8      	beq.n	8007146 <_strtod_l+0x1e6>
 8007154:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007158:	2b08      	cmp	r3, #8
 800715a:	f200 84d5 	bhi.w	8007b08 <_strtod_l+0xba8>
 800715e:	9004      	str	r0, [sp, #16]
 8007160:	2000      	movs	r0, #0
 8007162:	4604      	mov	r4, r0
 8007164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007166:	9308      	str	r3, [sp, #32]
 8007168:	3a30      	subs	r2, #48	; 0x30
 800716a:	f100 0301 	add.w	r3, r0, #1
 800716e:	d013      	beq.n	8007198 <_strtod_l+0x238>
 8007170:	9904      	ldr	r1, [sp, #16]
 8007172:	1905      	adds	r5, r0, r4
 8007174:	4419      	add	r1, r3
 8007176:	9104      	str	r1, [sp, #16]
 8007178:	4623      	mov	r3, r4
 800717a:	210a      	movs	r1, #10
 800717c:	42ab      	cmp	r3, r5
 800717e:	d113      	bne.n	80071a8 <_strtod_l+0x248>
 8007180:	1823      	adds	r3, r4, r0
 8007182:	2b08      	cmp	r3, #8
 8007184:	f104 0401 	add.w	r4, r4, #1
 8007188:	4404      	add	r4, r0
 800718a:	dc1b      	bgt.n	80071c4 <_strtod_l+0x264>
 800718c:	230a      	movs	r3, #10
 800718e:	9906      	ldr	r1, [sp, #24]
 8007190:	fb03 2301 	mla	r3, r3, r1, r2
 8007194:	9306      	str	r3, [sp, #24]
 8007196:	2300      	movs	r3, #0
 8007198:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800719a:	4618      	mov	r0, r3
 800719c:	1c51      	adds	r1, r2, #1
 800719e:	9119      	str	r1, [sp, #100]	; 0x64
 80071a0:	7852      	ldrb	r2, [r2, #1]
 80071a2:	e7ca      	b.n	800713a <_strtod_l+0x1da>
 80071a4:	4658      	mov	r0, fp
 80071a6:	e7d3      	b.n	8007150 <_strtod_l+0x1f0>
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	dc04      	bgt.n	80071b6 <_strtod_l+0x256>
 80071ac:	9f06      	ldr	r7, [sp, #24]
 80071ae:	434f      	muls	r7, r1
 80071b0:	9706      	str	r7, [sp, #24]
 80071b2:	3301      	adds	r3, #1
 80071b4:	e7e2      	b.n	800717c <_strtod_l+0x21c>
 80071b6:	1c5f      	adds	r7, r3, #1
 80071b8:	2f10      	cmp	r7, #16
 80071ba:	bfde      	ittt	le
 80071bc:	9f05      	ldrle	r7, [sp, #20]
 80071be:	434f      	mulle	r7, r1
 80071c0:	9705      	strle	r7, [sp, #20]
 80071c2:	e7f6      	b.n	80071b2 <_strtod_l+0x252>
 80071c4:	2c10      	cmp	r4, #16
 80071c6:	bfdf      	itttt	le
 80071c8:	230a      	movle	r3, #10
 80071ca:	9905      	ldrle	r1, [sp, #20]
 80071cc:	fb03 2301 	mlale	r3, r3, r1, r2
 80071d0:	9305      	strle	r3, [sp, #20]
 80071d2:	e7e0      	b.n	8007196 <_strtod_l+0x236>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	2301      	movs	r3, #1
 80071da:	e77b      	b.n	80070d4 <_strtod_l+0x174>
 80071dc:	2700      	movs	r7, #0
 80071de:	1cb2      	adds	r2, r6, #2
 80071e0:	9219      	str	r2, [sp, #100]	; 0x64
 80071e2:	78b2      	ldrb	r2, [r6, #2]
 80071e4:	e784      	b.n	80070f0 <_strtod_l+0x190>
 80071e6:	bf00      	nop
 80071e8:	0800ad48 	.word	0x0800ad48
 80071ec:	0800aafc 	.word	0x0800aafc
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	2701      	movs	r7, #1
 80071f6:	e7f2      	b.n	80071de <_strtod_l+0x27e>
 80071f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071fa:	1c51      	adds	r1, r2, #1
 80071fc:	9119      	str	r1, [sp, #100]	; 0x64
 80071fe:	7852      	ldrb	r2, [r2, #1]
 8007200:	2a30      	cmp	r2, #48	; 0x30
 8007202:	d0f9      	beq.n	80071f8 <_strtod_l+0x298>
 8007204:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007208:	2908      	cmp	r1, #8
 800720a:	f63f af77 	bhi.w	80070fc <_strtod_l+0x19c>
 800720e:	f04f 0e0a 	mov.w	lr, #10
 8007212:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007216:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007218:	9209      	str	r2, [sp, #36]	; 0x24
 800721a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800721c:	1c51      	adds	r1, r2, #1
 800721e:	9119      	str	r1, [sp, #100]	; 0x64
 8007220:	7852      	ldrb	r2, [r2, #1]
 8007222:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007226:	2d09      	cmp	r5, #9
 8007228:	d935      	bls.n	8007296 <_strtod_l+0x336>
 800722a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800722c:	1b49      	subs	r1, r1, r5
 800722e:	2908      	cmp	r1, #8
 8007230:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007234:	dc02      	bgt.n	800723c <_strtod_l+0x2dc>
 8007236:	4565      	cmp	r5, ip
 8007238:	bfa8      	it	ge
 800723a:	4665      	movge	r5, ip
 800723c:	b107      	cbz	r7, 8007240 <_strtod_l+0x2e0>
 800723e:	426d      	negs	r5, r5
 8007240:	2c00      	cmp	r4, #0
 8007242:	d14c      	bne.n	80072de <_strtod_l+0x37e>
 8007244:	9907      	ldr	r1, [sp, #28]
 8007246:	4301      	orrs	r1, r0
 8007248:	f47f aecb 	bne.w	8006fe2 <_strtod_l+0x82>
 800724c:	2b00      	cmp	r3, #0
 800724e:	f47f aee4 	bne.w	800701a <_strtod_l+0xba>
 8007252:	2a69      	cmp	r2, #105	; 0x69
 8007254:	d026      	beq.n	80072a4 <_strtod_l+0x344>
 8007256:	dc23      	bgt.n	80072a0 <_strtod_l+0x340>
 8007258:	2a49      	cmp	r2, #73	; 0x49
 800725a:	d023      	beq.n	80072a4 <_strtod_l+0x344>
 800725c:	2a4e      	cmp	r2, #78	; 0x4e
 800725e:	f47f aedc 	bne.w	800701a <_strtod_l+0xba>
 8007262:	499d      	ldr	r1, [pc, #628]	; (80074d8 <_strtod_l+0x578>)
 8007264:	a819      	add	r0, sp, #100	; 0x64
 8007266:	f001 fe17 	bl	8008e98 <__match>
 800726a:	2800      	cmp	r0, #0
 800726c:	f43f aed5 	beq.w	800701a <_strtod_l+0xba>
 8007270:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b28      	cmp	r3, #40	; 0x28
 8007276:	d12c      	bne.n	80072d2 <_strtod_l+0x372>
 8007278:	4998      	ldr	r1, [pc, #608]	; (80074dc <_strtod_l+0x57c>)
 800727a:	aa1c      	add	r2, sp, #112	; 0x70
 800727c:	a819      	add	r0, sp, #100	; 0x64
 800727e:	f001 fe1f 	bl	8008ec0 <__hexnan>
 8007282:	2805      	cmp	r0, #5
 8007284:	d125      	bne.n	80072d2 <_strtod_l+0x372>
 8007286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007288:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800728c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007290:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007294:	e6a5      	b.n	8006fe2 <_strtod_l+0x82>
 8007296:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800729a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800729e:	e7bc      	b.n	800721a <_strtod_l+0x2ba>
 80072a0:	2a6e      	cmp	r2, #110	; 0x6e
 80072a2:	e7dc      	b.n	800725e <_strtod_l+0x2fe>
 80072a4:	498e      	ldr	r1, [pc, #568]	; (80074e0 <_strtod_l+0x580>)
 80072a6:	a819      	add	r0, sp, #100	; 0x64
 80072a8:	f001 fdf6 	bl	8008e98 <__match>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f43f aeb4 	beq.w	800701a <_strtod_l+0xba>
 80072b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072b4:	498b      	ldr	r1, [pc, #556]	; (80074e4 <_strtod_l+0x584>)
 80072b6:	3b01      	subs	r3, #1
 80072b8:	a819      	add	r0, sp, #100	; 0x64
 80072ba:	9319      	str	r3, [sp, #100]	; 0x64
 80072bc:	f001 fdec 	bl	8008e98 <__match>
 80072c0:	b910      	cbnz	r0, 80072c8 <_strtod_l+0x368>
 80072c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072c4:	3301      	adds	r3, #1
 80072c6:	9319      	str	r3, [sp, #100]	; 0x64
 80072c8:	f04f 0800 	mov.w	r8, #0
 80072cc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80074e8 <_strtod_l+0x588>
 80072d0:	e687      	b.n	8006fe2 <_strtod_l+0x82>
 80072d2:	4886      	ldr	r0, [pc, #536]	; (80074ec <_strtod_l+0x58c>)
 80072d4:	f002 fdce 	bl	8009e74 <nan>
 80072d8:	4680      	mov	r8, r0
 80072da:	4689      	mov	r9, r1
 80072dc:	e681      	b.n	8006fe2 <_strtod_l+0x82>
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	f1bb 0f00 	cmp.w	fp, #0
 80072e4:	bf08      	it	eq
 80072e6:	46a3      	moveq	fp, r4
 80072e8:	1aeb      	subs	r3, r5, r3
 80072ea:	2c10      	cmp	r4, #16
 80072ec:	9806      	ldr	r0, [sp, #24]
 80072ee:	4626      	mov	r6, r4
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	bfa8      	it	ge
 80072f4:	2610      	movge	r6, #16
 80072f6:	f7f9 f875 	bl	80003e4 <__aeabi_ui2d>
 80072fa:	2c09      	cmp	r4, #9
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	dd13      	ble.n	800732a <_strtod_l+0x3ca>
 8007302:	4b7b      	ldr	r3, [pc, #492]	; (80074f0 <_strtod_l+0x590>)
 8007304:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007308:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800730c:	f7f9 f8e4 	bl	80004d8 <__aeabi_dmul>
 8007310:	4680      	mov	r8, r0
 8007312:	9805      	ldr	r0, [sp, #20]
 8007314:	4689      	mov	r9, r1
 8007316:	f7f9 f865 	bl	80003e4 <__aeabi_ui2d>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	f7f8 ff23 	bl	800016c <__adddf3>
 8007326:	4680      	mov	r8, r0
 8007328:	4689      	mov	r9, r1
 800732a:	2c0f      	cmp	r4, #15
 800732c:	dc36      	bgt.n	800739c <_strtod_l+0x43c>
 800732e:	9b07      	ldr	r3, [sp, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f43f ae56 	beq.w	8006fe2 <_strtod_l+0x82>
 8007336:	dd22      	ble.n	800737e <_strtod_l+0x41e>
 8007338:	2b16      	cmp	r3, #22
 800733a:	dc09      	bgt.n	8007350 <_strtod_l+0x3f0>
 800733c:	496c      	ldr	r1, [pc, #432]	; (80074f0 <_strtod_l+0x590>)
 800733e:	4642      	mov	r2, r8
 8007340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007344:	464b      	mov	r3, r9
 8007346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800734a:	f7f9 f8c5 	bl	80004d8 <__aeabi_dmul>
 800734e:	e7c3      	b.n	80072d8 <_strtod_l+0x378>
 8007350:	9a07      	ldr	r2, [sp, #28]
 8007352:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007356:	4293      	cmp	r3, r2
 8007358:	db20      	blt.n	800739c <_strtod_l+0x43c>
 800735a:	4d65      	ldr	r5, [pc, #404]	; (80074f0 <_strtod_l+0x590>)
 800735c:	f1c4 040f 	rsb	r4, r4, #15
 8007360:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007364:	4642      	mov	r2, r8
 8007366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800736a:	464b      	mov	r3, r9
 800736c:	f7f9 f8b4 	bl	80004d8 <__aeabi_dmul>
 8007370:	9b07      	ldr	r3, [sp, #28]
 8007372:	1b1c      	subs	r4, r3, r4
 8007374:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007378:	e9d5 2300 	ldrd	r2, r3, [r5]
 800737c:	e7e5      	b.n	800734a <_strtod_l+0x3ea>
 800737e:	9b07      	ldr	r3, [sp, #28]
 8007380:	3316      	adds	r3, #22
 8007382:	db0b      	blt.n	800739c <_strtod_l+0x43c>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	4640      	mov	r0, r8
 8007388:	1b5d      	subs	r5, r3, r5
 800738a:	4b59      	ldr	r3, [pc, #356]	; (80074f0 <_strtod_l+0x590>)
 800738c:	4649      	mov	r1, r9
 800738e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007392:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007396:	f7f9 f9c9 	bl	800072c <__aeabi_ddiv>
 800739a:	e79d      	b.n	80072d8 <_strtod_l+0x378>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	1ba6      	subs	r6, r4, r6
 80073a0:	441e      	add	r6, r3
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	dd74      	ble.n	8007490 <_strtod_l+0x530>
 80073a6:	f016 030f 	ands.w	r3, r6, #15
 80073aa:	d00a      	beq.n	80073c2 <_strtod_l+0x462>
 80073ac:	4950      	ldr	r1, [pc, #320]	; (80074f0 <_strtod_l+0x590>)
 80073ae:	4642      	mov	r2, r8
 80073b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b8:	464b      	mov	r3, r9
 80073ba:	f7f9 f88d 	bl	80004d8 <__aeabi_dmul>
 80073be:	4680      	mov	r8, r0
 80073c0:	4689      	mov	r9, r1
 80073c2:	f036 060f 	bics.w	r6, r6, #15
 80073c6:	d052      	beq.n	800746e <_strtod_l+0x50e>
 80073c8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80073cc:	dd27      	ble.n	800741e <_strtod_l+0x4be>
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	f8cd b010 	str.w	fp, [sp, #16]
 80073d6:	f8cd b020 	str.w	fp, [sp, #32]
 80073da:	f8cd b018 	str.w	fp, [sp, #24]
 80073de:	2322      	movs	r3, #34	; 0x22
 80073e0:	f04f 0800 	mov.w	r8, #0
 80073e4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80074e8 <_strtod_l+0x588>
 80073e8:	f8ca 3000 	str.w	r3, [sl]
 80073ec:	9b08      	ldr	r3, [sp, #32]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f43f adf7 	beq.w	8006fe2 <_strtod_l+0x82>
 80073f4:	4650      	mov	r0, sl
 80073f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073f8:	f001 fe78 	bl	80090ec <_Bfree>
 80073fc:	4650      	mov	r0, sl
 80073fe:	9906      	ldr	r1, [sp, #24]
 8007400:	f001 fe74 	bl	80090ec <_Bfree>
 8007404:	4650      	mov	r0, sl
 8007406:	9904      	ldr	r1, [sp, #16]
 8007408:	f001 fe70 	bl	80090ec <_Bfree>
 800740c:	4650      	mov	r0, sl
 800740e:	9908      	ldr	r1, [sp, #32]
 8007410:	f001 fe6c 	bl	80090ec <_Bfree>
 8007414:	4659      	mov	r1, fp
 8007416:	4650      	mov	r0, sl
 8007418:	f001 fe68 	bl	80090ec <_Bfree>
 800741c:	e5e1      	b.n	8006fe2 <_strtod_l+0x82>
 800741e:	4b35      	ldr	r3, [pc, #212]	; (80074f4 <_strtod_l+0x594>)
 8007420:	4640      	mov	r0, r8
 8007422:	9305      	str	r3, [sp, #20]
 8007424:	2300      	movs	r3, #0
 8007426:	4649      	mov	r1, r9
 8007428:	461f      	mov	r7, r3
 800742a:	1136      	asrs	r6, r6, #4
 800742c:	2e01      	cmp	r6, #1
 800742e:	dc21      	bgt.n	8007474 <_strtod_l+0x514>
 8007430:	b10b      	cbz	r3, 8007436 <_strtod_l+0x4d6>
 8007432:	4680      	mov	r8, r0
 8007434:	4689      	mov	r9, r1
 8007436:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <_strtod_l+0x594>)
 8007438:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800743c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007440:	4642      	mov	r2, r8
 8007442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007446:	464b      	mov	r3, r9
 8007448:	f7f9 f846 	bl	80004d8 <__aeabi_dmul>
 800744c:	4b26      	ldr	r3, [pc, #152]	; (80074e8 <_strtod_l+0x588>)
 800744e:	460a      	mov	r2, r1
 8007450:	400b      	ands	r3, r1
 8007452:	4929      	ldr	r1, [pc, #164]	; (80074f8 <_strtod_l+0x598>)
 8007454:	4680      	mov	r8, r0
 8007456:	428b      	cmp	r3, r1
 8007458:	d8b9      	bhi.n	80073ce <_strtod_l+0x46e>
 800745a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800745e:	428b      	cmp	r3, r1
 8007460:	bf86      	itte	hi
 8007462:	f04f 38ff 	movhi.w	r8, #4294967295
 8007466:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80074fc <_strtod_l+0x59c>
 800746a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800746e:	2300      	movs	r3, #0
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	e07f      	b.n	8007574 <_strtod_l+0x614>
 8007474:	07f2      	lsls	r2, r6, #31
 8007476:	d505      	bpl.n	8007484 <_strtod_l+0x524>
 8007478:	9b05      	ldr	r3, [sp, #20]
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 f82b 	bl	80004d8 <__aeabi_dmul>
 8007482:	2301      	movs	r3, #1
 8007484:	9a05      	ldr	r2, [sp, #20]
 8007486:	3701      	adds	r7, #1
 8007488:	3208      	adds	r2, #8
 800748a:	1076      	asrs	r6, r6, #1
 800748c:	9205      	str	r2, [sp, #20]
 800748e:	e7cd      	b.n	800742c <_strtod_l+0x4cc>
 8007490:	d0ed      	beq.n	800746e <_strtod_l+0x50e>
 8007492:	4276      	negs	r6, r6
 8007494:	f016 020f 	ands.w	r2, r6, #15
 8007498:	d00a      	beq.n	80074b0 <_strtod_l+0x550>
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <_strtod_l+0x590>)
 800749c:	4640      	mov	r0, r8
 800749e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a2:	4649      	mov	r1, r9
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f940 	bl	800072c <__aeabi_ddiv>
 80074ac:	4680      	mov	r8, r0
 80074ae:	4689      	mov	r9, r1
 80074b0:	1136      	asrs	r6, r6, #4
 80074b2:	d0dc      	beq.n	800746e <_strtod_l+0x50e>
 80074b4:	2e1f      	cmp	r6, #31
 80074b6:	dd23      	ble.n	8007500 <_strtod_l+0x5a0>
 80074b8:	f04f 0b00 	mov.w	fp, #0
 80074bc:	f8cd b010 	str.w	fp, [sp, #16]
 80074c0:	f8cd b020 	str.w	fp, [sp, #32]
 80074c4:	f8cd b018 	str.w	fp, [sp, #24]
 80074c8:	2322      	movs	r3, #34	; 0x22
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	f04f 0900 	mov.w	r9, #0
 80074d2:	f8ca 3000 	str.w	r3, [sl]
 80074d6:	e789      	b.n	80073ec <_strtod_l+0x48c>
 80074d8:	0800aacd 	.word	0x0800aacd
 80074dc:	0800ab10 	.word	0x0800ab10
 80074e0:	0800aac5 	.word	0x0800aac5
 80074e4:	0800ac54 	.word	0x0800ac54
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	0800af00 	.word	0x0800af00
 80074f0:	0800ade0 	.word	0x0800ade0
 80074f4:	0800adb8 	.word	0x0800adb8
 80074f8:	7ca00000 	.word	0x7ca00000
 80074fc:	7fefffff 	.word	0x7fefffff
 8007500:	f016 0310 	ands.w	r3, r6, #16
 8007504:	bf18      	it	ne
 8007506:	236a      	movne	r3, #106	; 0x6a
 8007508:	4640      	mov	r0, r8
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	4649      	mov	r1, r9
 800750e:	2300      	movs	r3, #0
 8007510:	4fb0      	ldr	r7, [pc, #704]	; (80077d4 <_strtod_l+0x874>)
 8007512:	07f2      	lsls	r2, r6, #31
 8007514:	d504      	bpl.n	8007520 <_strtod_l+0x5c0>
 8007516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751a:	f7f8 ffdd 	bl	80004d8 <__aeabi_dmul>
 800751e:	2301      	movs	r3, #1
 8007520:	1076      	asrs	r6, r6, #1
 8007522:	f107 0708 	add.w	r7, r7, #8
 8007526:	d1f4      	bne.n	8007512 <_strtod_l+0x5b2>
 8007528:	b10b      	cbz	r3, 800752e <_strtod_l+0x5ce>
 800752a:	4680      	mov	r8, r0
 800752c:	4689      	mov	r9, r1
 800752e:	9b05      	ldr	r3, [sp, #20]
 8007530:	b1c3      	cbz	r3, 8007564 <_strtod_l+0x604>
 8007532:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007536:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800753a:	2b00      	cmp	r3, #0
 800753c:	4649      	mov	r1, r9
 800753e:	dd11      	ble.n	8007564 <_strtod_l+0x604>
 8007540:	2b1f      	cmp	r3, #31
 8007542:	f340 8127 	ble.w	8007794 <_strtod_l+0x834>
 8007546:	2b34      	cmp	r3, #52	; 0x34
 8007548:	bfd8      	it	le
 800754a:	f04f 33ff 	movle.w	r3, #4294967295
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	bfcf      	iteee	gt
 8007554:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007558:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800755c:	fa03 f202 	lslle.w	r2, r3, r2
 8007560:	ea02 0901 	andle.w	r9, r2, r1
 8007564:	2200      	movs	r2, #0
 8007566:	2300      	movs	r3, #0
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 fa1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007570:	2800      	cmp	r0, #0
 8007572:	d1a1      	bne.n	80074b8 <_strtod_l+0x558>
 8007574:	9b06      	ldr	r3, [sp, #24]
 8007576:	465a      	mov	r2, fp
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4650      	mov	r0, sl
 800757c:	4623      	mov	r3, r4
 800757e:	9908      	ldr	r1, [sp, #32]
 8007580:	f001 fe1c 	bl	80091bc <__s2b>
 8007584:	9008      	str	r0, [sp, #32]
 8007586:	2800      	cmp	r0, #0
 8007588:	f43f af21 	beq.w	80073ce <_strtod_l+0x46e>
 800758c:	9b04      	ldr	r3, [sp, #16]
 800758e:	f04f 0b00 	mov.w	fp, #0
 8007592:	1b5d      	subs	r5, r3, r5
 8007594:	9b07      	ldr	r3, [sp, #28]
 8007596:	f8cd b010 	str.w	fp, [sp, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	bfb4      	ite	lt
 800759e:	462b      	movlt	r3, r5
 80075a0:	2300      	movge	r3, #0
 80075a2:	930e      	str	r3, [sp, #56]	; 0x38
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075aa:	9314      	str	r3, [sp, #80]	; 0x50
 80075ac:	9b08      	ldr	r3, [sp, #32]
 80075ae:	4650      	mov	r0, sl
 80075b0:	6859      	ldr	r1, [r3, #4]
 80075b2:	f001 fd5b 	bl	800906c <_Balloc>
 80075b6:	9006      	str	r0, [sp, #24]
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f43f af10 	beq.w	80073de <_strtod_l+0x47e>
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	300c      	adds	r0, #12
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	f103 010c 	add.w	r1, r3, #12
 80075c8:	3202      	adds	r2, #2
 80075ca:	0092      	lsls	r2, r2, #2
 80075cc:	f001 fd40 	bl	8009050 <memcpy>
 80075d0:	ab1c      	add	r3, sp, #112	; 0x70
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4642      	mov	r2, r8
 80075da:	464b      	mov	r3, r9
 80075dc:	4650      	mov	r0, sl
 80075de:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80075e2:	f002 f92d 	bl	8009840 <__d2b>
 80075e6:	901a      	str	r0, [sp, #104]	; 0x68
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f43f aef8 	beq.w	80073de <_strtod_l+0x47e>
 80075ee:	2101      	movs	r1, #1
 80075f0:	4650      	mov	r0, sl
 80075f2:	f001 fe7b 	bl	80092ec <__i2b>
 80075f6:	4603      	mov	r3, r0
 80075f8:	9004      	str	r0, [sp, #16]
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aeef 	beq.w	80073de <_strtod_l+0x47e>
 8007600:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007602:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007604:	2d00      	cmp	r5, #0
 8007606:	bfab      	itete	ge
 8007608:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800760a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800760c:	18ee      	addge	r6, r5, r3
 800760e:	1b5c      	sublt	r4, r3, r5
 8007610:	9b05      	ldr	r3, [sp, #20]
 8007612:	bfa8      	it	ge
 8007614:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007616:	eba5 0503 	sub.w	r5, r5, r3
 800761a:	4415      	add	r5, r2
 800761c:	4b6e      	ldr	r3, [pc, #440]	; (80077d8 <_strtod_l+0x878>)
 800761e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007622:	bfb8      	it	lt
 8007624:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007626:	429d      	cmp	r5, r3
 8007628:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800762c:	f280 80c4 	bge.w	80077b8 <_strtod_l+0x858>
 8007630:	1b5b      	subs	r3, r3, r5
 8007632:	2b1f      	cmp	r3, #31
 8007634:	f04f 0701 	mov.w	r7, #1
 8007638:	eba2 0203 	sub.w	r2, r2, r3
 800763c:	f300 80b1 	bgt.w	80077a2 <_strtod_l+0x842>
 8007640:	2500      	movs	r5, #0
 8007642:	fa07 f303 	lsl.w	r3, r7, r3
 8007646:	930f      	str	r3, [sp, #60]	; 0x3c
 8007648:	18b7      	adds	r7, r6, r2
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	42be      	cmp	r6, r7
 800764e:	4414      	add	r4, r2
 8007650:	441c      	add	r4, r3
 8007652:	4633      	mov	r3, r6
 8007654:	bfa8      	it	ge
 8007656:	463b      	movge	r3, r7
 8007658:	42a3      	cmp	r3, r4
 800765a:	bfa8      	it	ge
 800765c:	4623      	movge	r3, r4
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfc2      	ittt	gt
 8007662:	1aff      	subgt	r7, r7, r3
 8007664:	1ae4      	subgt	r4, r4, r3
 8007666:	1af6      	subgt	r6, r6, r3
 8007668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800766a:	2b00      	cmp	r3, #0
 800766c:	dd17      	ble.n	800769e <_strtod_l+0x73e>
 800766e:	461a      	mov	r2, r3
 8007670:	4650      	mov	r0, sl
 8007672:	9904      	ldr	r1, [sp, #16]
 8007674:	f001 fef8 	bl	8009468 <__pow5mult>
 8007678:	9004      	str	r0, [sp, #16]
 800767a:	2800      	cmp	r0, #0
 800767c:	f43f aeaf 	beq.w	80073de <_strtod_l+0x47e>
 8007680:	4601      	mov	r1, r0
 8007682:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007684:	4650      	mov	r0, sl
 8007686:	f001 fe47 	bl	8009318 <__multiply>
 800768a:	9009      	str	r0, [sp, #36]	; 0x24
 800768c:	2800      	cmp	r0, #0
 800768e:	f43f aea6 	beq.w	80073de <_strtod_l+0x47e>
 8007692:	4650      	mov	r0, sl
 8007694:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007696:	f001 fd29 	bl	80090ec <_Bfree>
 800769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769c:	931a      	str	r3, [sp, #104]	; 0x68
 800769e:	2f00      	cmp	r7, #0
 80076a0:	f300 808e 	bgt.w	80077c0 <_strtod_l+0x860>
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dd08      	ble.n	80076bc <_strtod_l+0x75c>
 80076aa:	4650      	mov	r0, sl
 80076ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076ae:	9906      	ldr	r1, [sp, #24]
 80076b0:	f001 feda 	bl	8009468 <__pow5mult>
 80076b4:	9006      	str	r0, [sp, #24]
 80076b6:	2800      	cmp	r0, #0
 80076b8:	f43f ae91 	beq.w	80073de <_strtod_l+0x47e>
 80076bc:	2c00      	cmp	r4, #0
 80076be:	dd08      	ble.n	80076d2 <_strtod_l+0x772>
 80076c0:	4622      	mov	r2, r4
 80076c2:	4650      	mov	r0, sl
 80076c4:	9906      	ldr	r1, [sp, #24]
 80076c6:	f001 ff29 	bl	800951c <__lshift>
 80076ca:	9006      	str	r0, [sp, #24]
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f43f ae86 	beq.w	80073de <_strtod_l+0x47e>
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	dd08      	ble.n	80076e8 <_strtod_l+0x788>
 80076d6:	4632      	mov	r2, r6
 80076d8:	4650      	mov	r0, sl
 80076da:	9904      	ldr	r1, [sp, #16]
 80076dc:	f001 ff1e 	bl	800951c <__lshift>
 80076e0:	9004      	str	r0, [sp, #16]
 80076e2:	2800      	cmp	r0, #0
 80076e4:	f43f ae7b 	beq.w	80073de <_strtod_l+0x47e>
 80076e8:	4650      	mov	r0, sl
 80076ea:	9a06      	ldr	r2, [sp, #24]
 80076ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076ee:	f001 ffa1 	bl	8009634 <__mdiff>
 80076f2:	4683      	mov	fp, r0
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f43f ae72 	beq.w	80073de <_strtod_l+0x47e>
 80076fa:	2400      	movs	r4, #0
 80076fc:	68c3      	ldr	r3, [r0, #12]
 80076fe:	9904      	ldr	r1, [sp, #16]
 8007700:	60c4      	str	r4, [r0, #12]
 8007702:	930b      	str	r3, [sp, #44]	; 0x2c
 8007704:	f001 ff7a 	bl	80095fc <__mcmp>
 8007708:	42a0      	cmp	r0, r4
 800770a:	da6b      	bge.n	80077e4 <_strtod_l+0x884>
 800770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770e:	ea53 0308 	orrs.w	r3, r3, r8
 8007712:	f040 8091 	bne.w	8007838 <_strtod_l+0x8d8>
 8007716:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 808c 	bne.w	8007838 <_strtod_l+0x8d8>
 8007720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007724:	0d1b      	lsrs	r3, r3, #20
 8007726:	051b      	lsls	r3, r3, #20
 8007728:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800772c:	f240 8084 	bls.w	8007838 <_strtod_l+0x8d8>
 8007730:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007734:	b91b      	cbnz	r3, 800773e <_strtod_l+0x7de>
 8007736:	f8db 3010 	ldr.w	r3, [fp, #16]
 800773a:	2b01      	cmp	r3, #1
 800773c:	dd7c      	ble.n	8007838 <_strtod_l+0x8d8>
 800773e:	4659      	mov	r1, fp
 8007740:	2201      	movs	r2, #1
 8007742:	4650      	mov	r0, sl
 8007744:	f001 feea 	bl	800951c <__lshift>
 8007748:	9904      	ldr	r1, [sp, #16]
 800774a:	4683      	mov	fp, r0
 800774c:	f001 ff56 	bl	80095fc <__mcmp>
 8007750:	2800      	cmp	r0, #0
 8007752:	dd71      	ble.n	8007838 <_strtod_l+0x8d8>
 8007754:	9905      	ldr	r1, [sp, #20]
 8007756:	464b      	mov	r3, r9
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <_strtod_l+0x87c>)
 800775a:	2900      	cmp	r1, #0
 800775c:	f000 808c 	beq.w	8007878 <_strtod_l+0x918>
 8007760:	ea02 0109 	and.w	r1, r2, r9
 8007764:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007768:	f300 8086 	bgt.w	8007878 <_strtod_l+0x918>
 800776c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007770:	f77f aeaa 	ble.w	80074c8 <_strtod_l+0x568>
 8007774:	4640      	mov	r0, r8
 8007776:	4649      	mov	r1, r9
 8007778:	4b19      	ldr	r3, [pc, #100]	; (80077e0 <_strtod_l+0x880>)
 800777a:	2200      	movs	r2, #0
 800777c:	f7f8 feac 	bl	80004d8 <__aeabi_dmul>
 8007780:	460b      	mov	r3, r1
 8007782:	4303      	orrs	r3, r0
 8007784:	bf08      	it	eq
 8007786:	2322      	moveq	r3, #34	; 0x22
 8007788:	4680      	mov	r8, r0
 800778a:	4689      	mov	r9, r1
 800778c:	bf08      	it	eq
 800778e:	f8ca 3000 	streq.w	r3, [sl]
 8007792:	e62f      	b.n	80073f4 <_strtod_l+0x494>
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	ea03 0808 	and.w	r8, r3, r8
 80077a0:	e6e0      	b.n	8007564 <_strtod_l+0x604>
 80077a2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80077a6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80077aa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80077ae:	35e2      	adds	r5, #226	; 0xe2
 80077b0:	fa07 f505 	lsl.w	r5, r7, r5
 80077b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80077b6:	e747      	b.n	8007648 <_strtod_l+0x6e8>
 80077b8:	2301      	movs	r3, #1
 80077ba:	2500      	movs	r5, #0
 80077bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80077be:	e743      	b.n	8007648 <_strtod_l+0x6e8>
 80077c0:	463a      	mov	r2, r7
 80077c2:	4650      	mov	r0, sl
 80077c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077c6:	f001 fea9 	bl	800951c <__lshift>
 80077ca:	901a      	str	r0, [sp, #104]	; 0x68
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f47f af69 	bne.w	80076a4 <_strtod_l+0x744>
 80077d2:	e604      	b.n	80073de <_strtod_l+0x47e>
 80077d4:	0800ab28 	.word	0x0800ab28
 80077d8:	fffffc02 	.word	0xfffffc02
 80077dc:	7ff00000 	.word	0x7ff00000
 80077e0:	39500000 	.word	0x39500000
 80077e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80077e8:	d165      	bne.n	80078b6 <_strtod_l+0x956>
 80077ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077f0:	b35a      	cbz	r2, 800784a <_strtod_l+0x8ea>
 80077f2:	4a99      	ldr	r2, [pc, #612]	; (8007a58 <_strtod_l+0xaf8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d12b      	bne.n	8007850 <_strtod_l+0x8f0>
 80077f8:	9b05      	ldr	r3, [sp, #20]
 80077fa:	4641      	mov	r1, r8
 80077fc:	b303      	cbz	r3, 8007840 <_strtod_l+0x8e0>
 80077fe:	464a      	mov	r2, r9
 8007800:	4b96      	ldr	r3, [pc, #600]	; (8007a5c <_strtod_l+0xafc>)
 8007802:	4013      	ands	r3, r2
 8007804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007808:	f04f 32ff 	mov.w	r2, #4294967295
 800780c:	d81b      	bhi.n	8007846 <_strtod_l+0x8e6>
 800780e:	0d1b      	lsrs	r3, r3, #20
 8007810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	4299      	cmp	r1, r3
 800781a:	d119      	bne.n	8007850 <_strtod_l+0x8f0>
 800781c:	4b90      	ldr	r3, [pc, #576]	; (8007a60 <_strtod_l+0xb00>)
 800781e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007820:	429a      	cmp	r2, r3
 8007822:	d102      	bne.n	800782a <_strtod_l+0x8ca>
 8007824:	3101      	adds	r1, #1
 8007826:	f43f adda 	beq.w	80073de <_strtod_l+0x47e>
 800782a:	f04f 0800 	mov.w	r8, #0
 800782e:	4b8b      	ldr	r3, [pc, #556]	; (8007a5c <_strtod_l+0xafc>)
 8007830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007832:	401a      	ands	r2, r3
 8007834:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007838:	9b05      	ldr	r3, [sp, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d19a      	bne.n	8007774 <_strtod_l+0x814>
 800783e:	e5d9      	b.n	80073f4 <_strtod_l+0x494>
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	e7e8      	b.n	8007818 <_strtod_l+0x8b8>
 8007846:	4613      	mov	r3, r2
 8007848:	e7e6      	b.n	8007818 <_strtod_l+0x8b8>
 800784a:	ea53 0308 	orrs.w	r3, r3, r8
 800784e:	d081      	beq.n	8007754 <_strtod_l+0x7f4>
 8007850:	b1e5      	cbz	r5, 800788c <_strtod_l+0x92c>
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007854:	421d      	tst	r5, r3
 8007856:	d0ef      	beq.n	8007838 <_strtod_l+0x8d8>
 8007858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	9a05      	ldr	r2, [sp, #20]
 8007860:	b1c3      	cbz	r3, 8007894 <_strtod_l+0x934>
 8007862:	f7ff fb5b 	bl	8006f1c <sulp>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800786e:	f7f8 fc7d 	bl	800016c <__adddf3>
 8007872:	4680      	mov	r8, r0
 8007874:	4689      	mov	r9, r1
 8007876:	e7df      	b.n	8007838 <_strtod_l+0x8d8>
 8007878:	4013      	ands	r3, r2
 800787a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800787e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007882:	f04f 38ff 	mov.w	r8, #4294967295
 8007886:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800788a:	e7d5      	b.n	8007838 <_strtod_l+0x8d8>
 800788c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800788e:	ea13 0f08 	tst.w	r3, r8
 8007892:	e7e0      	b.n	8007856 <_strtod_l+0x8f6>
 8007894:	f7ff fb42 	bl	8006f1c <sulp>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078a0:	f7f8 fc62 	bl	8000168 <__aeabi_dsub>
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4680      	mov	r8, r0
 80078aa:	4689      	mov	r9, r1
 80078ac:	f7f9 f87c 	bl	80009a8 <__aeabi_dcmpeq>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0c1      	beq.n	8007838 <_strtod_l+0x8d8>
 80078b4:	e608      	b.n	80074c8 <_strtod_l+0x568>
 80078b6:	4658      	mov	r0, fp
 80078b8:	9904      	ldr	r1, [sp, #16]
 80078ba:	f002 f81d 	bl	80098f8 <__ratio>
 80078be:	2200      	movs	r2, #0
 80078c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	f7f9 f882 	bl	80009d0 <__aeabi_dcmple>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d070      	beq.n	80079b2 <_strtod_l+0xa52>
 80078d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d042      	beq.n	800795c <_strtod_l+0x9fc>
 80078d6:	2600      	movs	r6, #0
 80078d8:	4f62      	ldr	r7, [pc, #392]	; (8007a64 <_strtod_l+0xb04>)
 80078da:	4d62      	ldr	r5, [pc, #392]	; (8007a64 <_strtod_l+0xb04>)
 80078dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078e2:	0d1b      	lsrs	r3, r3, #20
 80078e4:	051b      	lsls	r3, r3, #20
 80078e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ea:	4b5f      	ldr	r3, [pc, #380]	; (8007a68 <_strtod_l+0xb08>)
 80078ec:	429a      	cmp	r2, r3
 80078ee:	f040 80c3 	bne.w	8007a78 <_strtod_l+0xb18>
 80078f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f4:	4640      	mov	r0, r8
 80078f6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80078fa:	4649      	mov	r1, r9
 80078fc:	f001 ff26 	bl	800974c <__ulp>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f8 fde6 	bl	80004d8 <__aeabi_dmul>
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	f7f8 fc2c 	bl	800016c <__adddf3>
 8007914:	460b      	mov	r3, r1
 8007916:	4951      	ldr	r1, [pc, #324]	; (8007a5c <_strtod_l+0xafc>)
 8007918:	4a54      	ldr	r2, [pc, #336]	; (8007a6c <_strtod_l+0xb0c>)
 800791a:	4019      	ands	r1, r3
 800791c:	4291      	cmp	r1, r2
 800791e:	4680      	mov	r8, r0
 8007920:	d95d      	bls.n	80079de <_strtod_l+0xa7e>
 8007922:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007924:	4b4e      	ldr	r3, [pc, #312]	; (8007a60 <_strtod_l+0xb00>)
 8007926:	429a      	cmp	r2, r3
 8007928:	d103      	bne.n	8007932 <_strtod_l+0x9d2>
 800792a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800792c:	3301      	adds	r3, #1
 800792e:	f43f ad56 	beq.w	80073de <_strtod_l+0x47e>
 8007932:	f04f 38ff 	mov.w	r8, #4294967295
 8007936:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007a60 <_strtod_l+0xb00>
 800793a:	4650      	mov	r0, sl
 800793c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800793e:	f001 fbd5 	bl	80090ec <_Bfree>
 8007942:	4650      	mov	r0, sl
 8007944:	9906      	ldr	r1, [sp, #24]
 8007946:	f001 fbd1 	bl	80090ec <_Bfree>
 800794a:	4650      	mov	r0, sl
 800794c:	9904      	ldr	r1, [sp, #16]
 800794e:	f001 fbcd 	bl	80090ec <_Bfree>
 8007952:	4659      	mov	r1, fp
 8007954:	4650      	mov	r0, sl
 8007956:	f001 fbc9 	bl	80090ec <_Bfree>
 800795a:	e627      	b.n	80075ac <_strtod_l+0x64c>
 800795c:	f1b8 0f00 	cmp.w	r8, #0
 8007960:	d119      	bne.n	8007996 <_strtod_l+0xa36>
 8007962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007968:	b9e3      	cbnz	r3, 80079a4 <_strtod_l+0xa44>
 800796a:	2200      	movs	r2, #0
 800796c:	4630      	mov	r0, r6
 800796e:	4639      	mov	r1, r7
 8007970:	4b3c      	ldr	r3, [pc, #240]	; (8007a64 <_strtod_l+0xb04>)
 8007972:	f7f9 f823 	bl	80009bc <__aeabi_dcmplt>
 8007976:	b9c8      	cbnz	r0, 80079ac <_strtod_l+0xa4c>
 8007978:	2200      	movs	r2, #0
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	4b3c      	ldr	r3, [pc, #240]	; (8007a70 <_strtod_l+0xb10>)
 8007980:	f7f8 fdaa 	bl	80004d8 <__aeabi_dmul>
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800798c:	9416      	str	r4, [sp, #88]	; 0x58
 800798e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007990:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007994:	e7a2      	b.n	80078dc <_strtod_l+0x97c>
 8007996:	f1b8 0f01 	cmp.w	r8, #1
 800799a:	d103      	bne.n	80079a4 <_strtod_l+0xa44>
 800799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f43f ad92 	beq.w	80074c8 <_strtod_l+0x568>
 80079a4:	2600      	movs	r6, #0
 80079a6:	2400      	movs	r4, #0
 80079a8:	4f32      	ldr	r7, [pc, #200]	; (8007a74 <_strtod_l+0xb14>)
 80079aa:	e796      	b.n	80078da <_strtod_l+0x97a>
 80079ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80079ae:	4d30      	ldr	r5, [pc, #192]	; (8007a70 <_strtod_l+0xb10>)
 80079b0:	e7ea      	b.n	8007988 <_strtod_l+0xa28>
 80079b2:	4b2f      	ldr	r3, [pc, #188]	; (8007a70 <_strtod_l+0xb10>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f7f8 fd8d 	bl	80004d8 <__aeabi_dmul>
 80079be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	b933      	cbnz	r3, 80079d4 <_strtod_l+0xa74>
 80079c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079ca:	9010      	str	r0, [sp, #64]	; 0x40
 80079cc:	9311      	str	r3, [sp, #68]	; 0x44
 80079ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80079d2:	e783      	b.n	80078dc <_strtod_l+0x97c>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80079dc:	e7f7      	b.n	80079ce <_strtod_l+0xa6e>
 80079de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80079e2:	9b05      	ldr	r3, [sp, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1a8      	bne.n	800793a <_strtod_l+0x9da>
 80079e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079ee:	0d1b      	lsrs	r3, r3, #20
 80079f0:	051b      	lsls	r3, r3, #20
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d1a1      	bne.n	800793a <_strtod_l+0x9da>
 80079f6:	4620      	mov	r0, r4
 80079f8:	4629      	mov	r1, r5
 80079fa:	f7f9 fb89 	bl	8001110 <__aeabi_d2lz>
 80079fe:	f7f8 fd3d 	bl	800047c <__aeabi_l2d>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4620      	mov	r0, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7f8 fbad 	bl	8000168 <__aeabi_dsub>
 8007a0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a14:	ea43 0308 	orr.w	r3, r3, r8
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	d066      	beq.n	8007aee <_strtod_l+0xb8e>
 8007a20:	a309      	add	r3, pc, #36	; (adr r3, 8007a48 <_strtod_l+0xae8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 ffc9 	bl	80009bc <__aeabi_dcmplt>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f47f ace2 	bne.w	80073f4 <_strtod_l+0x494>
 8007a30:	a307      	add	r3, pc, #28	; (adr r3, 8007a50 <_strtod_l+0xaf0>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 ffdd 	bl	80009f8 <__aeabi_dcmpgt>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f af7b 	beq.w	800793a <_strtod_l+0x9da>
 8007a44:	e4d6      	b.n	80073f4 <_strtod_l+0x494>
 8007a46:	bf00      	nop
 8007a48:	94a03595 	.word	0x94a03595
 8007a4c:	3fdfffff 	.word	0x3fdfffff
 8007a50:	35afe535 	.word	0x35afe535
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	000fffff 	.word	0x000fffff
 8007a5c:	7ff00000 	.word	0x7ff00000
 8007a60:	7fefffff 	.word	0x7fefffff
 8007a64:	3ff00000 	.word	0x3ff00000
 8007a68:	7fe00000 	.word	0x7fe00000
 8007a6c:	7c9fffff 	.word	0x7c9fffff
 8007a70:	3fe00000 	.word	0x3fe00000
 8007a74:	bff00000 	.word	0xbff00000
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	b313      	cbz	r3, 8007ac2 <_strtod_l+0xb62>
 8007a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a82:	d81e      	bhi.n	8007ac2 <_strtod_l+0xb62>
 8007a84:	a326      	add	r3, pc, #152	; (adr r3, 8007b20 <_strtod_l+0xbc0>)
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7f8 ff9f 	bl	80009d0 <__aeabi_dcmple>
 8007a92:	b190      	cbz	r0, 8007aba <_strtod_l+0xb5a>
 8007a94:	4629      	mov	r1, r5
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7f8 fff6 	bl	8000a88 <__aeabi_d2uiz>
 8007a9c:	2801      	cmp	r0, #1
 8007a9e:	bf38      	it	cc
 8007aa0:	2001      	movcc	r0, #1
 8007aa2:	f7f8 fc9f 	bl	80003e4 <__aeabi_ui2d>
 8007aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	b9d3      	cbnz	r3, 8007ae4 <_strtod_l+0xb84>
 8007aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ab2:	9012      	str	r0, [sp, #72]	; 0x48
 8007ab4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ab6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007aba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007abc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007ac0:	1a9f      	subs	r7, r3, r2
 8007ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ac6:	f001 fe41 	bl	800974c <__ulp>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	f7f8 fd01 	bl	80004d8 <__aeabi_dmul>
 8007ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ada:	f7f8 fb47 	bl	800016c <__adddf3>
 8007ade:	4680      	mov	r8, r0
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	e77e      	b.n	80079e2 <_strtod_l+0xa82>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007aec:	e7e3      	b.n	8007ab6 <_strtod_l+0xb56>
 8007aee:	a30e      	add	r3, pc, #56	; (adr r3, 8007b28 <_strtod_l+0xbc8>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 ff62 	bl	80009bc <__aeabi_dcmplt>
 8007af8:	e7a1      	b.n	8007a3e <_strtod_l+0xade>
 8007afa:	2300      	movs	r3, #0
 8007afc:	930a      	str	r3, [sp, #40]	; 0x28
 8007afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	f7ff ba71 	b.w	8006fea <_strtod_l+0x8a>
 8007b08:	2a65      	cmp	r2, #101	; 0x65
 8007b0a:	f43f ab63 	beq.w	80071d4 <_strtod_l+0x274>
 8007b0e:	2a45      	cmp	r2, #69	; 0x45
 8007b10:	f43f ab60 	beq.w	80071d4 <_strtod_l+0x274>
 8007b14:	2301      	movs	r3, #1
 8007b16:	f7ff bb95 	b.w	8007244 <_strtod_l+0x2e4>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
 8007b20:	ffc00000 	.word	0xffc00000
 8007b24:	41dfffff 	.word	0x41dfffff
 8007b28:	94a03595 	.word	0x94a03595
 8007b2c:	3fcfffff 	.word	0x3fcfffff

08007b30 <_strtod_r>:
 8007b30:	4b01      	ldr	r3, [pc, #4]	; (8007b38 <_strtod_r+0x8>)
 8007b32:	f7ff ba15 	b.w	8006f60 <_strtod_l>
 8007b36:	bf00      	nop
 8007b38:	200000a4 	.word	0x200000a4

08007b3c <_strtol_l.constprop.0>:
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b42:	4680      	mov	r8, r0
 8007b44:	d001      	beq.n	8007b4a <_strtol_l.constprop.0+0xe>
 8007b46:	2b24      	cmp	r3, #36	; 0x24
 8007b48:	d906      	bls.n	8007b58 <_strtol_l.constprop.0+0x1c>
 8007b4a:	f7fe fb23 	bl	8006194 <__errno>
 8007b4e:	2316      	movs	r3, #22
 8007b50:	6003      	str	r3, [r0, #0]
 8007b52:	2000      	movs	r0, #0
 8007b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b58:	460d      	mov	r5, r1
 8007b5a:	4f35      	ldr	r7, [pc, #212]	; (8007c30 <_strtol_l.constprop.0+0xf4>)
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b62:	5de6      	ldrb	r6, [r4, r7]
 8007b64:	f016 0608 	ands.w	r6, r6, #8
 8007b68:	d1f8      	bne.n	8007b5c <_strtol_l.constprop.0+0x20>
 8007b6a:	2c2d      	cmp	r4, #45	; 0x2d
 8007b6c:	d12f      	bne.n	8007bce <_strtol_l.constprop.0+0x92>
 8007b6e:	2601      	movs	r6, #1
 8007b70:	782c      	ldrb	r4, [r5, #0]
 8007b72:	1c85      	adds	r5, r0, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d057      	beq.n	8007c28 <_strtol_l.constprop.0+0xec>
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d109      	bne.n	8007b90 <_strtol_l.constprop.0+0x54>
 8007b7c:	2c30      	cmp	r4, #48	; 0x30
 8007b7e:	d107      	bne.n	8007b90 <_strtol_l.constprop.0+0x54>
 8007b80:	7828      	ldrb	r0, [r5, #0]
 8007b82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007b86:	2858      	cmp	r0, #88	; 0x58
 8007b88:	d149      	bne.n	8007c1e <_strtol_l.constprop.0+0xe2>
 8007b8a:	2310      	movs	r3, #16
 8007b8c:	786c      	ldrb	r4, [r5, #1]
 8007b8e:	3502      	adds	r5, #2
 8007b90:	2700      	movs	r7, #0
 8007b92:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007b96:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007b9a:	fbbe f9f3 	udiv	r9, lr, r3
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	fb03 ea19 	mls	sl, r3, r9, lr
 8007ba4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ba8:	f1bc 0f09 	cmp.w	ip, #9
 8007bac:	d814      	bhi.n	8007bd8 <_strtol_l.constprop.0+0x9c>
 8007bae:	4664      	mov	r4, ip
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	dd22      	ble.n	8007bfa <_strtol_l.constprop.0+0xbe>
 8007bb4:	2f00      	cmp	r7, #0
 8007bb6:	db1d      	blt.n	8007bf4 <_strtol_l.constprop.0+0xb8>
 8007bb8:	4581      	cmp	r9, r0
 8007bba:	d31b      	bcc.n	8007bf4 <_strtol_l.constprop.0+0xb8>
 8007bbc:	d101      	bne.n	8007bc2 <_strtol_l.constprop.0+0x86>
 8007bbe:	45a2      	cmp	sl, r4
 8007bc0:	db18      	blt.n	8007bf4 <_strtol_l.constprop.0+0xb8>
 8007bc2:	2701      	movs	r7, #1
 8007bc4:	fb00 4003 	mla	r0, r0, r3, r4
 8007bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bcc:	e7ea      	b.n	8007ba4 <_strtol_l.constprop.0+0x68>
 8007bce:	2c2b      	cmp	r4, #43	; 0x2b
 8007bd0:	bf04      	itt	eq
 8007bd2:	782c      	ldrbeq	r4, [r5, #0]
 8007bd4:	1c85      	addeq	r5, r0, #2
 8007bd6:	e7cd      	b.n	8007b74 <_strtol_l.constprop.0+0x38>
 8007bd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007bdc:	f1bc 0f19 	cmp.w	ip, #25
 8007be0:	d801      	bhi.n	8007be6 <_strtol_l.constprop.0+0xaa>
 8007be2:	3c37      	subs	r4, #55	; 0x37
 8007be4:	e7e4      	b.n	8007bb0 <_strtol_l.constprop.0+0x74>
 8007be6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007bea:	f1bc 0f19 	cmp.w	ip, #25
 8007bee:	d804      	bhi.n	8007bfa <_strtol_l.constprop.0+0xbe>
 8007bf0:	3c57      	subs	r4, #87	; 0x57
 8007bf2:	e7dd      	b.n	8007bb0 <_strtol_l.constprop.0+0x74>
 8007bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8007bf8:	e7e6      	b.n	8007bc8 <_strtol_l.constprop.0+0x8c>
 8007bfa:	2f00      	cmp	r7, #0
 8007bfc:	da07      	bge.n	8007c0e <_strtol_l.constprop.0+0xd2>
 8007bfe:	2322      	movs	r3, #34	; 0x22
 8007c00:	4670      	mov	r0, lr
 8007c02:	f8c8 3000 	str.w	r3, [r8]
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d0a4      	beq.n	8007b54 <_strtol_l.constprop.0+0x18>
 8007c0a:	1e69      	subs	r1, r5, #1
 8007c0c:	e005      	b.n	8007c1a <_strtol_l.constprop.0+0xde>
 8007c0e:	b106      	cbz	r6, 8007c12 <_strtol_l.constprop.0+0xd6>
 8007c10:	4240      	negs	r0, r0
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	d09e      	beq.n	8007b54 <_strtol_l.constprop.0+0x18>
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	d1f7      	bne.n	8007c0a <_strtol_l.constprop.0+0xce>
 8007c1a:	6011      	str	r1, [r2, #0]
 8007c1c:	e79a      	b.n	8007b54 <_strtol_l.constprop.0+0x18>
 8007c1e:	2430      	movs	r4, #48	; 0x30
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1b5      	bne.n	8007b90 <_strtol_l.constprop.0+0x54>
 8007c24:	2308      	movs	r3, #8
 8007c26:	e7b3      	b.n	8007b90 <_strtol_l.constprop.0+0x54>
 8007c28:	2c30      	cmp	r4, #48	; 0x30
 8007c2a:	d0a9      	beq.n	8007b80 <_strtol_l.constprop.0+0x44>
 8007c2c:	230a      	movs	r3, #10
 8007c2e:	e7af      	b.n	8007b90 <_strtol_l.constprop.0+0x54>
 8007c30:	0800ab51 	.word	0x0800ab51

08007c34 <_strtol_r>:
 8007c34:	f7ff bf82 	b.w	8007b3c <_strtol_l.constprop.0>

08007c38 <quorem>:
 8007c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	6903      	ldr	r3, [r0, #16]
 8007c3e:	690c      	ldr	r4, [r1, #16]
 8007c40:	4607      	mov	r7, r0
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	f2c0 8082 	blt.w	8007d4c <quorem+0x114>
 8007c48:	3c01      	subs	r4, #1
 8007c4a:	f100 0514 	add.w	r5, r0, #20
 8007c4e:	f101 0814 	add.w	r8, r1, #20
 8007c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c60:	3301      	adds	r3, #1
 8007c62:	429a      	cmp	r2, r3
 8007c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c70:	d331      	bcc.n	8007cd6 <quorem+0x9e>
 8007c72:	f04f 0e00 	mov.w	lr, #0
 8007c76:	4640      	mov	r0, r8
 8007c78:	46ac      	mov	ip, r5
 8007c7a:	46f2      	mov	sl, lr
 8007c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c80:	b293      	uxth	r3, r2
 8007c82:	fb06 e303 	mla	r3, r6, r3, lr
 8007c86:	0c12      	lsrs	r2, r2, #16
 8007c88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c92:	ebaa 0303 	sub.w	r3, sl, r3
 8007c96:	f8dc a000 	ldr.w	sl, [ip]
 8007c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c9e:	fa1f fa8a 	uxth.w	sl, sl
 8007ca2:	4453      	add	r3, sl
 8007ca4:	f8dc a000 	ldr.w	sl, [ip]
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cb8:	4581      	cmp	r9, r0
 8007cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8007cc2:	d2db      	bcs.n	8007c7c <quorem+0x44>
 8007cc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cc8:	b92b      	cbnz	r3, 8007cd6 <quorem+0x9e>
 8007cca:	9b01      	ldr	r3, [sp, #4]
 8007ccc:	3b04      	subs	r3, #4
 8007cce:	429d      	cmp	r5, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	d32f      	bcc.n	8007d34 <quorem+0xfc>
 8007cd4:	613c      	str	r4, [r7, #16]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f001 fc90 	bl	80095fc <__mcmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	db25      	blt.n	8007d2c <quorem+0xf4>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f04f 0c00 	mov.w	ip, #0
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	f858 1b04 	ldr.w	r1, [r8], #4
 8007cec:	f8d0 e000 	ldr.w	lr, [r0]
 8007cf0:	b28b      	uxth	r3, r1
 8007cf2:	ebac 0303 	sub.w	r3, ip, r3
 8007cf6:	fa1f f28e 	uxth.w	r2, lr
 8007cfa:	4413      	add	r3, r2
 8007cfc:	0c0a      	lsrs	r2, r1, #16
 8007cfe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d0c:	45c1      	cmp	r9, r8
 8007d0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d12:	f840 3b04 	str.w	r3, [r0], #4
 8007d16:	d2e7      	bcs.n	8007ce8 <quorem+0xb0>
 8007d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d20:	b922      	cbnz	r2, 8007d2c <quorem+0xf4>
 8007d22:	3b04      	subs	r3, #4
 8007d24:	429d      	cmp	r5, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	d30a      	bcc.n	8007d40 <quorem+0x108>
 8007d2a:	613c      	str	r4, [r7, #16]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	b003      	add	sp, #12
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	6812      	ldr	r2, [r2, #0]
 8007d36:	3b04      	subs	r3, #4
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d1cb      	bne.n	8007cd4 <quorem+0x9c>
 8007d3c:	3c01      	subs	r4, #1
 8007d3e:	e7c6      	b.n	8007cce <quorem+0x96>
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	3b04      	subs	r3, #4
 8007d44:	2a00      	cmp	r2, #0
 8007d46:	d1f0      	bne.n	8007d2a <quorem+0xf2>
 8007d48:	3c01      	subs	r4, #1
 8007d4a:	e7eb      	b.n	8007d24 <quorem+0xec>
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7ee      	b.n	8007d2e <quorem+0xf6>

08007d50 <_dtoa_r>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	4616      	mov	r6, r2
 8007d56:	461f      	mov	r7, r3
 8007d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d5a:	b099      	sub	sp, #100	; 0x64
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007d66:	b974      	cbnz	r4, 8007d86 <_dtoa_r+0x36>
 8007d68:	2010      	movs	r0, #16
 8007d6a:	f001 f949 	bl	8009000 <malloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	6268      	str	r0, [r5, #36]	; 0x24
 8007d72:	b920      	cbnz	r0, 8007d7e <_dtoa_r+0x2e>
 8007d74:	21ea      	movs	r1, #234	; 0xea
 8007d76:	4ba8      	ldr	r3, [pc, #672]	; (8008018 <_dtoa_r+0x2c8>)
 8007d78:	48a8      	ldr	r0, [pc, #672]	; (800801c <_dtoa_r+0x2cc>)
 8007d7a:	f002 f8b3 	bl	8009ee4 <__assert_func>
 8007d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d82:	6004      	str	r4, [r0, #0]
 8007d84:	60c4      	str	r4, [r0, #12]
 8007d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	b151      	cbz	r1, 8007da2 <_dtoa_r+0x52>
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4093      	lsls	r3, r2
 8007d92:	604a      	str	r2, [r1, #4]
 8007d94:	608b      	str	r3, [r1, #8]
 8007d96:	4628      	mov	r0, r5
 8007d98:	f001 f9a8 	bl	80090ec <_Bfree>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	1e3b      	subs	r3, r7, #0
 8007da4:	bfaf      	iteee	ge
 8007da6:	2300      	movge	r3, #0
 8007da8:	2201      	movlt	r2, #1
 8007daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dae:	9305      	strlt	r3, [sp, #20]
 8007db0:	bfa8      	it	ge
 8007db2:	f8c8 3000 	strge.w	r3, [r8]
 8007db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007dba:	4b99      	ldr	r3, [pc, #612]	; (8008020 <_dtoa_r+0x2d0>)
 8007dbc:	bfb8      	it	lt
 8007dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8007dc2:	ea33 0309 	bics.w	r3, r3, r9
 8007dc6:	d119      	bne.n	8007dfc <_dtoa_r+0xac>
 8007dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dd4:	4333      	orrs	r3, r6
 8007dd6:	f000 857f 	beq.w	80088d8 <_dtoa_r+0xb88>
 8007dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ddc:	b953      	cbnz	r3, 8007df4 <_dtoa_r+0xa4>
 8007dde:	4b91      	ldr	r3, [pc, #580]	; (8008024 <_dtoa_r+0x2d4>)
 8007de0:	e022      	b.n	8007e28 <_dtoa_r+0xd8>
 8007de2:	4b91      	ldr	r3, [pc, #580]	; (8008028 <_dtoa_r+0x2d8>)
 8007de4:	9303      	str	r3, [sp, #12]
 8007de6:	3308      	adds	r3, #8
 8007de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	9803      	ldr	r0, [sp, #12]
 8007dee:	b019      	add	sp, #100	; 0x64
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	4b8b      	ldr	r3, [pc, #556]	; (8008024 <_dtoa_r+0x2d4>)
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	3303      	adds	r3, #3
 8007dfa:	e7f5      	b.n	8007de8 <_dtoa_r+0x98>
 8007dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f7f8 fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8007e10:	4680      	mov	r8, r0
 8007e12:	b158      	cbz	r0, 8007e2c <_dtoa_r+0xdc>
 8007e14:	2301      	movs	r3, #1
 8007e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8558 	beq.w	80088d2 <_dtoa_r+0xb82>
 8007e22:	4882      	ldr	r0, [pc, #520]	; (800802c <_dtoa_r+0x2dc>)
 8007e24:	6018      	str	r0, [r3, #0]
 8007e26:	1e43      	subs	r3, r0, #1
 8007e28:	9303      	str	r3, [sp, #12]
 8007e2a:	e7df      	b.n	8007dec <_dtoa_r+0x9c>
 8007e2c:	ab16      	add	r3, sp, #88	; 0x58
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	ab17      	add	r3, sp, #92	; 0x5c
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4628      	mov	r0, r5
 8007e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e3a:	f001 fd01 	bl	8009840 <__d2b>
 8007e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e42:	4683      	mov	fp, r0
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	d07f      	beq.n	8007f48 <_dtoa_r+0x1f8>
 8007e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007e5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007e5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007e62:	2200      	movs	r2, #0
 8007e64:	4b72      	ldr	r3, [pc, #456]	; (8008030 <_dtoa_r+0x2e0>)
 8007e66:	f7f8 f97f 	bl	8000168 <__aeabi_dsub>
 8007e6a:	a365      	add	r3, pc, #404	; (adr r3, 8008000 <_dtoa_r+0x2b0>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f7f8 fb32 	bl	80004d8 <__aeabi_dmul>
 8007e74:	a364      	add	r3, pc, #400	; (adr r3, 8008008 <_dtoa_r+0x2b8>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 f977 	bl	800016c <__adddf3>
 8007e7e:	4606      	mov	r6, r0
 8007e80:	4620      	mov	r0, r4
 8007e82:	460f      	mov	r7, r1
 8007e84:	f7f8 fabe 	bl	8000404 <__aeabi_i2d>
 8007e88:	a361      	add	r3, pc, #388	; (adr r3, 8008010 <_dtoa_r+0x2c0>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fb23 	bl	80004d8 <__aeabi_dmul>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 f967 	bl	800016c <__adddf3>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	f7f8 fdc9 	bl	8000a38 <__aeabi_d2iz>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 fd84 	bl	80009bc <__aeabi_dcmplt>
 8007eb4:	b148      	cbz	r0, 8007eca <_dtoa_r+0x17a>
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f7f8 faa4 	bl	8000404 <__aeabi_i2d>
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	f7f8 fd72 	bl	80009a8 <__aeabi_dcmpeq>
 8007ec4:	b908      	cbnz	r0, 8007eca <_dtoa_r+0x17a>
 8007ec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eca:	f1ba 0f16 	cmp.w	sl, #22
 8007ece:	d858      	bhi.n	8007f82 <_dtoa_r+0x232>
 8007ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ed4:	4b57      	ldr	r3, [pc, #348]	; (8008034 <_dtoa_r+0x2e4>)
 8007ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fd6d 	bl	80009bc <__aeabi_dcmplt>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d04f      	beq.n	8007f86 <_dtoa_r+0x236>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ef0:	1b1c      	subs	r4, r3, r4
 8007ef2:	1e63      	subs	r3, r4, #1
 8007ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef6:	bf49      	itett	mi
 8007ef8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007efc:	2300      	movpl	r3, #0
 8007efe:	9306      	strmi	r3, [sp, #24]
 8007f00:	2300      	movmi	r3, #0
 8007f02:	bf54      	ite	pl
 8007f04:	9306      	strpl	r3, [sp, #24]
 8007f06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	db3d      	blt.n	8007f8a <_dtoa_r+0x23a>
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f14:	4453      	add	r3, sl
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	2300      	movs	r3, #0
 8007f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f1e:	2b09      	cmp	r3, #9
 8007f20:	f200 808c 	bhi.w	800803c <_dtoa_r+0x2ec>
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	bfc4      	itt	gt
 8007f28:	3b04      	subgt	r3, #4
 8007f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f2e:	bfc8      	it	gt
 8007f30:	2400      	movgt	r4, #0
 8007f32:	f1a3 0302 	sub.w	r3, r3, #2
 8007f36:	bfd8      	it	le
 8007f38:	2401      	movle	r4, #1
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	f200 808a 	bhi.w	8008054 <_dtoa_r+0x304>
 8007f40:	e8df f003 	tbb	[pc, r3]
 8007f44:	5b4d4f2d 	.word	0x5b4d4f2d
 8007f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007f4c:	441c      	add	r4, r3
 8007f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	bfc3      	ittte	gt
 8007f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007f5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f62:	f1c3 0320 	rsble	r3, r3, #32
 8007f66:	bfc6      	itte	gt
 8007f68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f6c:	4318      	orrgt	r0, r3
 8007f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8007f72:	f7f8 fa37 	bl	80003e4 <__aeabi_ui2d>
 8007f76:	2301      	movs	r3, #1
 8007f78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f7c:	3c01      	subs	r4, #1
 8007f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f80:	e76f      	b.n	8007e62 <_dtoa_r+0x112>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e7b2      	b.n	8007eec <_dtoa_r+0x19c>
 8007f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f88:	e7b1      	b.n	8007eee <_dtoa_r+0x19e>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	eba3 030a 	sub.w	r3, r3, sl
 8007f90:	9306      	str	r3, [sp, #24]
 8007f92:	f1ca 0300 	rsb	r3, sl, #0
 8007f96:	930a      	str	r3, [sp, #40]	; 0x28
 8007f98:	2300      	movs	r3, #0
 8007f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f9c:	e7be      	b.n	8007f1c <_dtoa_r+0x1cc>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dc58      	bgt.n	800805a <_dtoa_r+0x30a>
 8007fa8:	f04f 0901 	mov.w	r9, #1
 8007fac:	464b      	mov	r3, r9
 8007fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8007fb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007fba:	6042      	str	r2, [r0, #4]
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	f102 0614 	add.w	r6, r2, #20
 8007fc2:	429e      	cmp	r6, r3
 8007fc4:	6841      	ldr	r1, [r0, #4]
 8007fc6:	d94e      	bls.n	8008066 <_dtoa_r+0x316>
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f001 f84f 	bl	800906c <_Balloc>
 8007fce:	9003      	str	r0, [sp, #12]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d14c      	bne.n	800806e <_dtoa_r+0x31e>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fda:	4b17      	ldr	r3, [pc, #92]	; (8008038 <_dtoa_r+0x2e8>)
 8007fdc:	e6cc      	b.n	8007d78 <_dtoa_r+0x28>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e7de      	b.n	8007fa0 <_dtoa_r+0x250>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fe8:	eb0a 0903 	add.w	r9, sl, r3
 8007fec:	f109 0301 	add.w	r3, r9, #1
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	9308      	str	r3, [sp, #32]
 8007ff4:	bfb8      	it	lt
 8007ff6:	2301      	movlt	r3, #1
 8007ff8:	e7dd      	b.n	8007fb6 <_dtoa_r+0x266>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e7f2      	b.n	8007fe4 <_dtoa_r+0x294>
 8007ffe:	bf00      	nop
 8008000:	636f4361 	.word	0x636f4361
 8008004:	3fd287a7 	.word	0x3fd287a7
 8008008:	8b60c8b3 	.word	0x8b60c8b3
 800800c:	3fc68a28 	.word	0x3fc68a28
 8008010:	509f79fb 	.word	0x509f79fb
 8008014:	3fd34413 	.word	0x3fd34413
 8008018:	0800ac5e 	.word	0x0800ac5e
 800801c:	0800ac75 	.word	0x0800ac75
 8008020:	7ff00000 	.word	0x7ff00000
 8008024:	0800ac5a 	.word	0x0800ac5a
 8008028:	0800ac51 	.word	0x0800ac51
 800802c:	0800aad1 	.word	0x0800aad1
 8008030:	3ff80000 	.word	0x3ff80000
 8008034:	0800ade0 	.word	0x0800ade0
 8008038:	0800acd0 	.word	0x0800acd0
 800803c:	2401      	movs	r4, #1
 800803e:	2300      	movs	r3, #0
 8008040:	940b      	str	r4, [sp, #44]	; 0x2c
 8008042:	9322      	str	r3, [sp, #136]	; 0x88
 8008044:	f04f 39ff 	mov.w	r9, #4294967295
 8008048:	2200      	movs	r2, #0
 800804a:	2312      	movs	r3, #18
 800804c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008050:	9223      	str	r2, [sp, #140]	; 0x8c
 8008052:	e7b0      	b.n	8007fb6 <_dtoa_r+0x266>
 8008054:	2301      	movs	r3, #1
 8008056:	930b      	str	r3, [sp, #44]	; 0x2c
 8008058:	e7f4      	b.n	8008044 <_dtoa_r+0x2f4>
 800805a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800805e:	464b      	mov	r3, r9
 8008060:	f8cd 9020 	str.w	r9, [sp, #32]
 8008064:	e7a7      	b.n	8007fb6 <_dtoa_r+0x266>
 8008066:	3101      	adds	r1, #1
 8008068:	6041      	str	r1, [r0, #4]
 800806a:	0052      	lsls	r2, r2, #1
 800806c:	e7a7      	b.n	8007fbe <_dtoa_r+0x26e>
 800806e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008070:	9a03      	ldr	r2, [sp, #12]
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	9b08      	ldr	r3, [sp, #32]
 8008076:	2b0e      	cmp	r3, #14
 8008078:	f200 80a8 	bhi.w	80081cc <_dtoa_r+0x47c>
 800807c:	2c00      	cmp	r4, #0
 800807e:	f000 80a5 	beq.w	80081cc <_dtoa_r+0x47c>
 8008082:	f1ba 0f00 	cmp.w	sl, #0
 8008086:	dd34      	ble.n	80080f2 <_dtoa_r+0x3a2>
 8008088:	4a9a      	ldr	r2, [pc, #616]	; (80082f4 <_dtoa_r+0x5a4>)
 800808a:	f00a 030f 	and.w	r3, sl, #15
 800808e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008092:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800809a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800809e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80080a2:	d016      	beq.n	80080d2 <_dtoa_r+0x382>
 80080a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080a8:	4b93      	ldr	r3, [pc, #588]	; (80082f8 <_dtoa_r+0x5a8>)
 80080aa:	2703      	movs	r7, #3
 80080ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080b0:	f7f8 fb3c 	bl	800072c <__aeabi_ddiv>
 80080b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b8:	f004 040f 	and.w	r4, r4, #15
 80080bc:	4e8e      	ldr	r6, [pc, #568]	; (80082f8 <_dtoa_r+0x5a8>)
 80080be:	b954      	cbnz	r4, 80080d6 <_dtoa_r+0x386>
 80080c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c8:	f7f8 fb30 	bl	800072c <__aeabi_ddiv>
 80080cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080d0:	e029      	b.n	8008126 <_dtoa_r+0x3d6>
 80080d2:	2702      	movs	r7, #2
 80080d4:	e7f2      	b.n	80080bc <_dtoa_r+0x36c>
 80080d6:	07e1      	lsls	r1, r4, #31
 80080d8:	d508      	bpl.n	80080ec <_dtoa_r+0x39c>
 80080da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080e2:	f7f8 f9f9 	bl	80004d8 <__aeabi_dmul>
 80080e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080ea:	3701      	adds	r7, #1
 80080ec:	1064      	asrs	r4, r4, #1
 80080ee:	3608      	adds	r6, #8
 80080f0:	e7e5      	b.n	80080be <_dtoa_r+0x36e>
 80080f2:	f000 80a5 	beq.w	8008240 <_dtoa_r+0x4f0>
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080fa:	f1ca 0400 	rsb	r4, sl, #0
 80080fe:	4b7d      	ldr	r3, [pc, #500]	; (80082f4 <_dtoa_r+0x5a4>)
 8008100:	f004 020f 	and.w	r2, r4, #15
 8008104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f9e4 	bl	80004d8 <__aeabi_dmul>
 8008110:	2702      	movs	r7, #2
 8008112:	2300      	movs	r3, #0
 8008114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008118:	4e77      	ldr	r6, [pc, #476]	; (80082f8 <_dtoa_r+0x5a8>)
 800811a:	1124      	asrs	r4, r4, #4
 800811c:	2c00      	cmp	r4, #0
 800811e:	f040 8084 	bne.w	800822a <_dtoa_r+0x4da>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1d2      	bne.n	80080cc <_dtoa_r+0x37c>
 8008126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 808b 	beq.w	8008244 <_dtoa_r+0x4f4>
 800812e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800813a:	2200      	movs	r2, #0
 800813c:	4b6f      	ldr	r3, [pc, #444]	; (80082fc <_dtoa_r+0x5ac>)
 800813e:	f7f8 fc3d 	bl	80009bc <__aeabi_dcmplt>
 8008142:	2800      	cmp	r0, #0
 8008144:	d07e      	beq.n	8008244 <_dtoa_r+0x4f4>
 8008146:	9b08      	ldr	r3, [sp, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d07b      	beq.n	8008244 <_dtoa_r+0x4f4>
 800814c:	f1b9 0f00 	cmp.w	r9, #0
 8008150:	dd38      	ble.n	80081c4 <_dtoa_r+0x474>
 8008152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008156:	2200      	movs	r2, #0
 8008158:	4b69      	ldr	r3, [pc, #420]	; (8008300 <_dtoa_r+0x5b0>)
 800815a:	f7f8 f9bd 	bl	80004d8 <__aeabi_dmul>
 800815e:	464c      	mov	r4, r9
 8008160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008164:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008168:	3701      	adds	r7, #1
 800816a:	4638      	mov	r0, r7
 800816c:	f7f8 f94a 	bl	8000404 <__aeabi_i2d>
 8008170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008174:	f7f8 f9b0 	bl	80004d8 <__aeabi_dmul>
 8008178:	2200      	movs	r2, #0
 800817a:	4b62      	ldr	r3, [pc, #392]	; (8008304 <_dtoa_r+0x5b4>)
 800817c:	f7f7 fff6 	bl	800016c <__adddf3>
 8008180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008188:	9611      	str	r6, [sp, #68]	; 0x44
 800818a:	2c00      	cmp	r4, #0
 800818c:	d15d      	bne.n	800824a <_dtoa_r+0x4fa>
 800818e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	4b5c      	ldr	r3, [pc, #368]	; (8008308 <_dtoa_r+0x5b8>)
 8008196:	f7f7 ffe7 	bl	8000168 <__aeabi_dsub>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081a2:	4633      	mov	r3, r6
 80081a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081a6:	f7f8 fc27 	bl	80009f8 <__aeabi_dcmpgt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	f040 829c 	bne.w	80086e8 <_dtoa_r+0x998>
 80081b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081ba:	f7f8 fbff 	bl	80009bc <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f040 8290 	bne.w	80086e4 <_dtoa_r+0x994>
 80081c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80081c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f2c0 8152 	blt.w	8008478 <_dtoa_r+0x728>
 80081d4:	f1ba 0f0e 	cmp.w	sl, #14
 80081d8:	f300 814e 	bgt.w	8008478 <_dtoa_r+0x728>
 80081dc:	4b45      	ldr	r3, [pc, #276]	; (80082f4 <_dtoa_r+0x5a4>)
 80081de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80081ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f280 80db 	bge.w	80083a8 <_dtoa_r+0x658>
 80081f2:	9b08      	ldr	r3, [sp, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f300 80d7 	bgt.w	80083a8 <_dtoa_r+0x658>
 80081fa:	f040 8272 	bne.w	80086e2 <_dtoa_r+0x992>
 80081fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008202:	2200      	movs	r2, #0
 8008204:	4b40      	ldr	r3, [pc, #256]	; (8008308 <_dtoa_r+0x5b8>)
 8008206:	f7f8 f967 	bl	80004d8 <__aeabi_dmul>
 800820a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820e:	f7f8 fbe9 	bl	80009e4 <__aeabi_dcmpge>
 8008212:	9c08      	ldr	r4, [sp, #32]
 8008214:	4626      	mov	r6, r4
 8008216:	2800      	cmp	r0, #0
 8008218:	f040 8248 	bne.w	80086ac <_dtoa_r+0x95c>
 800821c:	2331      	movs	r3, #49	; 0x31
 800821e:	9f03      	ldr	r7, [sp, #12]
 8008220:	f10a 0a01 	add.w	sl, sl, #1
 8008224:	f807 3b01 	strb.w	r3, [r7], #1
 8008228:	e244      	b.n	80086b4 <_dtoa_r+0x964>
 800822a:	07e2      	lsls	r2, r4, #31
 800822c:	d505      	bpl.n	800823a <_dtoa_r+0x4ea>
 800822e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008232:	f7f8 f951 	bl	80004d8 <__aeabi_dmul>
 8008236:	2301      	movs	r3, #1
 8008238:	3701      	adds	r7, #1
 800823a:	1064      	asrs	r4, r4, #1
 800823c:	3608      	adds	r6, #8
 800823e:	e76d      	b.n	800811c <_dtoa_r+0x3cc>
 8008240:	2702      	movs	r7, #2
 8008242:	e770      	b.n	8008126 <_dtoa_r+0x3d6>
 8008244:	46d0      	mov	r8, sl
 8008246:	9c08      	ldr	r4, [sp, #32]
 8008248:	e78f      	b.n	800816a <_dtoa_r+0x41a>
 800824a:	9903      	ldr	r1, [sp, #12]
 800824c:	4b29      	ldr	r3, [pc, #164]	; (80082f4 <_dtoa_r+0x5a4>)
 800824e:	4421      	add	r1, r4
 8008250:	9112      	str	r1, [sp, #72]	; 0x48
 8008252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008258:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800825c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008260:	2900      	cmp	r1, #0
 8008262:	d055      	beq.n	8008310 <_dtoa_r+0x5c0>
 8008264:	2000      	movs	r0, #0
 8008266:	4929      	ldr	r1, [pc, #164]	; (800830c <_dtoa_r+0x5bc>)
 8008268:	f7f8 fa60 	bl	800072c <__aeabi_ddiv>
 800826c:	463b      	mov	r3, r7
 800826e:	4632      	mov	r2, r6
 8008270:	f7f7 ff7a 	bl	8000168 <__aeabi_dsub>
 8008274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008278:	9f03      	ldr	r7, [sp, #12]
 800827a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800827e:	f7f8 fbdb 	bl	8000a38 <__aeabi_d2iz>
 8008282:	4604      	mov	r4, r0
 8008284:	f7f8 f8be 	bl	8000404 <__aeabi_i2d>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008290:	f7f7 ff6a 	bl	8000168 <__aeabi_dsub>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	3430      	adds	r4, #48	; 0x30
 800829a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800829e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082a2:	f807 4b01 	strb.w	r4, [r7], #1
 80082a6:	f7f8 fb89 	bl	80009bc <__aeabi_dcmplt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d174      	bne.n	8008398 <_dtoa_r+0x648>
 80082ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b2:	2000      	movs	r0, #0
 80082b4:	4911      	ldr	r1, [pc, #68]	; (80082fc <_dtoa_r+0x5ac>)
 80082b6:	f7f7 ff57 	bl	8000168 <__aeabi_dsub>
 80082ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082be:	f7f8 fb7d 	bl	80009bc <__aeabi_dcmplt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f040 80b7 	bne.w	8008436 <_dtoa_r+0x6e6>
 80082c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ca:	429f      	cmp	r7, r3
 80082cc:	f43f af7a 	beq.w	80081c4 <_dtoa_r+0x474>
 80082d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082d4:	2200      	movs	r2, #0
 80082d6:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <_dtoa_r+0x5b0>)
 80082d8:	f7f8 f8fe 	bl	80004d8 <__aeabi_dmul>
 80082dc:	2200      	movs	r2, #0
 80082de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <_dtoa_r+0x5b0>)
 80082e8:	f7f8 f8f6 	bl	80004d8 <__aeabi_dmul>
 80082ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f0:	e7c3      	b.n	800827a <_dtoa_r+0x52a>
 80082f2:	bf00      	nop
 80082f4:	0800ade0 	.word	0x0800ade0
 80082f8:	0800adb8 	.word	0x0800adb8
 80082fc:	3ff00000 	.word	0x3ff00000
 8008300:	40240000 	.word	0x40240000
 8008304:	401c0000 	.word	0x401c0000
 8008308:	40140000 	.word	0x40140000
 800830c:	3fe00000 	.word	0x3fe00000
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f8 f8e0 	bl	80004d8 <__aeabi_dmul>
 8008318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800831a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800831e:	9c03      	ldr	r4, [sp, #12]
 8008320:	9314      	str	r3, [sp, #80]	; 0x50
 8008322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008326:	f7f8 fb87 	bl	8000a38 <__aeabi_d2iz>
 800832a:	9015      	str	r0, [sp, #84]	; 0x54
 800832c:	f7f8 f86a 	bl	8000404 <__aeabi_i2d>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008338:	f7f7 ff16 	bl	8000168 <__aeabi_dsub>
 800833c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800833e:	4606      	mov	r6, r0
 8008340:	3330      	adds	r3, #48	; 0x30
 8008342:	f804 3b01 	strb.w	r3, [r4], #1
 8008346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008348:	460f      	mov	r7, r1
 800834a:	429c      	cmp	r4, r3
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	d124      	bne.n	800839c <_dtoa_r+0x64c>
 8008352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008356:	4bb0      	ldr	r3, [pc, #704]	; (8008618 <_dtoa_r+0x8c8>)
 8008358:	f7f7 ff08 	bl	800016c <__adddf3>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f8 fb48 	bl	80009f8 <__aeabi_dcmpgt>
 8008368:	2800      	cmp	r0, #0
 800836a:	d163      	bne.n	8008434 <_dtoa_r+0x6e4>
 800836c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008370:	2000      	movs	r0, #0
 8008372:	49a9      	ldr	r1, [pc, #676]	; (8008618 <_dtoa_r+0x8c8>)
 8008374:	f7f7 fef8 	bl	8000168 <__aeabi_dsub>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4630      	mov	r0, r6
 800837e:	4639      	mov	r1, r7
 8008380:	f7f8 fb1c 	bl	80009bc <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f af1d 	beq.w	80081c4 <_dtoa_r+0x474>
 800838a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800838c:	1e7b      	subs	r3, r7, #1
 800838e:	9314      	str	r3, [sp, #80]	; 0x50
 8008390:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d0f8      	beq.n	800838a <_dtoa_r+0x63a>
 8008398:	46c2      	mov	sl, r8
 800839a:	e03b      	b.n	8008414 <_dtoa_r+0x6c4>
 800839c:	4b9f      	ldr	r3, [pc, #636]	; (800861c <_dtoa_r+0x8cc>)
 800839e:	f7f8 f89b 	bl	80004d8 <__aeabi_dmul>
 80083a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083a6:	e7bc      	b.n	8008322 <_dtoa_r+0x5d2>
 80083a8:	9f03      	ldr	r7, [sp, #12]
 80083aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80083ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f8 f9b9 	bl	800072c <__aeabi_ddiv>
 80083ba:	f7f8 fb3d 	bl	8000a38 <__aeabi_d2iz>
 80083be:	4604      	mov	r4, r0
 80083c0:	f7f8 f820 	bl	8000404 <__aeabi_i2d>
 80083c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083c8:	f7f8 f886 	bl	80004d8 <__aeabi_dmul>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	f7f7 fec8 	bl	8000168 <__aeabi_dsub>
 80083d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80083dc:	f807 6b01 	strb.w	r6, [r7], #1
 80083e0:	9e03      	ldr	r6, [sp, #12]
 80083e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80083e6:	1bbe      	subs	r6, r7, r6
 80083e8:	45b4      	cmp	ip, r6
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	d136      	bne.n	800845e <_dtoa_r+0x70e>
 80083f0:	f7f7 febc 	bl	800016c <__adddf3>
 80083f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083f8:	4680      	mov	r8, r0
 80083fa:	4689      	mov	r9, r1
 80083fc:	f7f8 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8008400:	bb58      	cbnz	r0, 800845a <_dtoa_r+0x70a>
 8008402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008406:	4640      	mov	r0, r8
 8008408:	4649      	mov	r1, r9
 800840a:	f7f8 facd 	bl	80009a8 <__aeabi_dcmpeq>
 800840e:	b108      	cbz	r0, 8008414 <_dtoa_r+0x6c4>
 8008410:	07e1      	lsls	r1, r4, #31
 8008412:	d422      	bmi.n	800845a <_dtoa_r+0x70a>
 8008414:	4628      	mov	r0, r5
 8008416:	4659      	mov	r1, fp
 8008418:	f000 fe68 	bl	80090ec <_Bfree>
 800841c:	2300      	movs	r3, #0
 800841e:	703b      	strb	r3, [r7, #0]
 8008420:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008422:	f10a 0001 	add.w	r0, sl, #1
 8008426:	6018      	str	r0, [r3, #0]
 8008428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800842a:	2b00      	cmp	r3, #0
 800842c:	f43f acde 	beq.w	8007dec <_dtoa_r+0x9c>
 8008430:	601f      	str	r7, [r3, #0]
 8008432:	e4db      	b.n	8007dec <_dtoa_r+0x9c>
 8008434:	4627      	mov	r7, r4
 8008436:	463b      	mov	r3, r7
 8008438:	461f      	mov	r7, r3
 800843a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843e:	2a39      	cmp	r2, #57	; 0x39
 8008440:	d107      	bne.n	8008452 <_dtoa_r+0x702>
 8008442:	9a03      	ldr	r2, [sp, #12]
 8008444:	429a      	cmp	r2, r3
 8008446:	d1f7      	bne.n	8008438 <_dtoa_r+0x6e8>
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	9903      	ldr	r1, [sp, #12]
 800844c:	f108 0801 	add.w	r8, r8, #1
 8008450:	700a      	strb	r2, [r1, #0]
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	3201      	adds	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e79e      	b.n	8008398 <_dtoa_r+0x648>
 800845a:	46d0      	mov	r8, sl
 800845c:	e7eb      	b.n	8008436 <_dtoa_r+0x6e6>
 800845e:	2200      	movs	r2, #0
 8008460:	4b6e      	ldr	r3, [pc, #440]	; (800861c <_dtoa_r+0x8cc>)
 8008462:	f7f8 f839 	bl	80004d8 <__aeabi_dmul>
 8008466:	2200      	movs	r2, #0
 8008468:	2300      	movs	r3, #0
 800846a:	4680      	mov	r8, r0
 800846c:	4689      	mov	r9, r1
 800846e:	f7f8 fa9b 	bl	80009a8 <__aeabi_dcmpeq>
 8008472:	2800      	cmp	r0, #0
 8008474:	d09b      	beq.n	80083ae <_dtoa_r+0x65e>
 8008476:	e7cd      	b.n	8008414 <_dtoa_r+0x6c4>
 8008478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800847a:	2a00      	cmp	r2, #0
 800847c:	f000 80d0 	beq.w	8008620 <_dtoa_r+0x8d0>
 8008480:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008482:	2a01      	cmp	r2, #1
 8008484:	f300 80ae 	bgt.w	80085e4 <_dtoa_r+0x894>
 8008488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800848a:	2a00      	cmp	r2, #0
 800848c:	f000 80a6 	beq.w	80085dc <_dtoa_r+0x88c>
 8008490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008496:	9f06      	ldr	r7, [sp, #24]
 8008498:	9a06      	ldr	r2, [sp, #24]
 800849a:	2101      	movs	r1, #1
 800849c:	441a      	add	r2, r3
 800849e:	9206      	str	r2, [sp, #24]
 80084a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a2:	4628      	mov	r0, r5
 80084a4:	441a      	add	r2, r3
 80084a6:	9209      	str	r2, [sp, #36]	; 0x24
 80084a8:	f000 ff20 	bl	80092ec <__i2b>
 80084ac:	4606      	mov	r6, r0
 80084ae:	2f00      	cmp	r7, #0
 80084b0:	dd0c      	ble.n	80084cc <_dtoa_r+0x77c>
 80084b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd09      	ble.n	80084cc <_dtoa_r+0x77c>
 80084b8:	42bb      	cmp	r3, r7
 80084ba:	bfa8      	it	ge
 80084bc:	463b      	movge	r3, r7
 80084be:	9a06      	ldr	r2, [sp, #24]
 80084c0:	1aff      	subs	r7, r7, r3
 80084c2:	1ad2      	subs	r2, r2, r3
 80084c4:	9206      	str	r2, [sp, #24]
 80084c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	9309      	str	r3, [sp, #36]	; 0x24
 80084cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ce:	b1f3      	cbz	r3, 800850e <_dtoa_r+0x7be>
 80084d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80a8 	beq.w	8008628 <_dtoa_r+0x8d8>
 80084d8:	2c00      	cmp	r4, #0
 80084da:	dd10      	ble.n	80084fe <_dtoa_r+0x7ae>
 80084dc:	4631      	mov	r1, r6
 80084de:	4622      	mov	r2, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 ffc1 	bl	8009468 <__pow5mult>
 80084e6:	465a      	mov	r2, fp
 80084e8:	4601      	mov	r1, r0
 80084ea:	4606      	mov	r6, r0
 80084ec:	4628      	mov	r0, r5
 80084ee:	f000 ff13 	bl	8009318 <__multiply>
 80084f2:	4680      	mov	r8, r0
 80084f4:	4659      	mov	r1, fp
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 fdf8 	bl	80090ec <_Bfree>
 80084fc:	46c3      	mov	fp, r8
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	1b1a      	subs	r2, r3, r4
 8008502:	d004      	beq.n	800850e <_dtoa_r+0x7be>
 8008504:	4659      	mov	r1, fp
 8008506:	4628      	mov	r0, r5
 8008508:	f000 ffae 	bl	8009468 <__pow5mult>
 800850c:	4683      	mov	fp, r0
 800850e:	2101      	movs	r1, #1
 8008510:	4628      	mov	r0, r5
 8008512:	f000 feeb 	bl	80092ec <__i2b>
 8008516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008518:	4604      	mov	r4, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	f340 8086 	ble.w	800862c <_dtoa_r+0x8dc>
 8008520:	461a      	mov	r2, r3
 8008522:	4601      	mov	r1, r0
 8008524:	4628      	mov	r0, r5
 8008526:	f000 ff9f 	bl	8009468 <__pow5mult>
 800852a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800852c:	4604      	mov	r4, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	dd7f      	ble.n	8008632 <_dtoa_r+0x8e2>
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800853c:	6918      	ldr	r0, [r3, #16]
 800853e:	f000 fe87 	bl	8009250 <__hi0bits>
 8008542:	f1c0 0020 	rsb	r0, r0, #32
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	4418      	add	r0, r3
 800854a:	f010 001f 	ands.w	r0, r0, #31
 800854e:	f000 8092 	beq.w	8008676 <_dtoa_r+0x926>
 8008552:	f1c0 0320 	rsb	r3, r0, #32
 8008556:	2b04      	cmp	r3, #4
 8008558:	f340 808a 	ble.w	8008670 <_dtoa_r+0x920>
 800855c:	f1c0 001c 	rsb	r0, r0, #28
 8008560:	9b06      	ldr	r3, [sp, #24]
 8008562:	4407      	add	r7, r0
 8008564:	4403      	add	r3, r0
 8008566:	9306      	str	r3, [sp, #24]
 8008568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856a:	4403      	add	r3, r0
 800856c:	9309      	str	r3, [sp, #36]	; 0x24
 800856e:	9b06      	ldr	r3, [sp, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dd05      	ble.n	8008580 <_dtoa_r+0x830>
 8008574:	4659      	mov	r1, fp
 8008576:	461a      	mov	r2, r3
 8008578:	4628      	mov	r0, r5
 800857a:	f000 ffcf 	bl	800951c <__lshift>
 800857e:	4683      	mov	fp, r0
 8008580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd05      	ble.n	8008592 <_dtoa_r+0x842>
 8008586:	4621      	mov	r1, r4
 8008588:	461a      	mov	r2, r3
 800858a:	4628      	mov	r0, r5
 800858c:	f000 ffc6 	bl	800951c <__lshift>
 8008590:	4604      	mov	r4, r0
 8008592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d070      	beq.n	800867a <_dtoa_r+0x92a>
 8008598:	4621      	mov	r1, r4
 800859a:	4658      	mov	r0, fp
 800859c:	f001 f82e 	bl	80095fc <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	da6a      	bge.n	800867a <_dtoa_r+0x92a>
 80085a4:	2300      	movs	r3, #0
 80085a6:	4659      	mov	r1, fp
 80085a8:	220a      	movs	r2, #10
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 fdc0 	bl	8009130 <__multadd>
 80085b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b2:	4683      	mov	fp, r0
 80085b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8194 	beq.w	80088e6 <_dtoa_r+0xb96>
 80085be:	4631      	mov	r1, r6
 80085c0:	2300      	movs	r3, #0
 80085c2:	220a      	movs	r2, #10
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 fdb3 	bl	8009130 <__multadd>
 80085ca:	f1b9 0f00 	cmp.w	r9, #0
 80085ce:	4606      	mov	r6, r0
 80085d0:	f300 8093 	bgt.w	80086fa <_dtoa_r+0x9aa>
 80085d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	dc57      	bgt.n	800868a <_dtoa_r+0x93a>
 80085da:	e08e      	b.n	80086fa <_dtoa_r+0x9aa>
 80085dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085e2:	e757      	b.n	8008494 <_dtoa_r+0x744>
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	1e5c      	subs	r4, r3, #1
 80085e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	bfb7      	itett	lt
 80085ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085f0:	1b1c      	subge	r4, r3, r4
 80085f2:	1ae2      	sublt	r2, r4, r3
 80085f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085f6:	bfbe      	ittt	lt
 80085f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80085fa:	189b      	addlt	r3, r3, r2
 80085fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	bfb8      	it	lt
 8008602:	2400      	movlt	r4, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	9b06      	ldrlt	r3, [sp, #24]
 800860a:	9a08      	ldrlt	r2, [sp, #32]
 800860c:	9f06      	ldrge	r7, [sp, #24]
 800860e:	1a9f      	sublt	r7, r3, r2
 8008610:	bfac      	ite	ge
 8008612:	9b08      	ldrge	r3, [sp, #32]
 8008614:	2300      	movlt	r3, #0
 8008616:	e73f      	b.n	8008498 <_dtoa_r+0x748>
 8008618:	3fe00000 	.word	0x3fe00000
 800861c:	40240000 	.word	0x40240000
 8008620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008622:	9f06      	ldr	r7, [sp, #24]
 8008624:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008626:	e742      	b.n	80084ae <_dtoa_r+0x75e>
 8008628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800862a:	e76b      	b.n	8008504 <_dtoa_r+0x7b4>
 800862c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800862e:	2b01      	cmp	r3, #1
 8008630:	dc19      	bgt.n	8008666 <_dtoa_r+0x916>
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	b9bb      	cbnz	r3, 8008666 <_dtoa_r+0x916>
 8008636:	9b05      	ldr	r3, [sp, #20]
 8008638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800863c:	b99b      	cbnz	r3, 8008666 <_dtoa_r+0x916>
 800863e:	9b05      	ldr	r3, [sp, #20]
 8008640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008644:	0d1b      	lsrs	r3, r3, #20
 8008646:	051b      	lsls	r3, r3, #20
 8008648:	b183      	cbz	r3, 800866c <_dtoa_r+0x91c>
 800864a:	f04f 0801 	mov.w	r8, #1
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	3301      	adds	r3, #1
 8008652:	9306      	str	r3, [sp, #24]
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	3301      	adds	r3, #1
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	f47f af6a 	bne.w	8008536 <_dtoa_r+0x7e6>
 8008662:	2001      	movs	r0, #1
 8008664:	e76f      	b.n	8008546 <_dtoa_r+0x7f6>
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	e7f6      	b.n	800865a <_dtoa_r+0x90a>
 800866c:	4698      	mov	r8, r3
 800866e:	e7f4      	b.n	800865a <_dtoa_r+0x90a>
 8008670:	f43f af7d 	beq.w	800856e <_dtoa_r+0x81e>
 8008674:	4618      	mov	r0, r3
 8008676:	301c      	adds	r0, #28
 8008678:	e772      	b.n	8008560 <_dtoa_r+0x810>
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc36      	bgt.n	80086ee <_dtoa_r+0x99e>
 8008680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008682:	2b02      	cmp	r3, #2
 8008684:	dd33      	ble.n	80086ee <_dtoa_r+0x99e>
 8008686:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d10d      	bne.n	80086ac <_dtoa_r+0x95c>
 8008690:	4621      	mov	r1, r4
 8008692:	464b      	mov	r3, r9
 8008694:	2205      	movs	r2, #5
 8008696:	4628      	mov	r0, r5
 8008698:	f000 fd4a 	bl	8009130 <__multadd>
 800869c:	4601      	mov	r1, r0
 800869e:	4604      	mov	r4, r0
 80086a0:	4658      	mov	r0, fp
 80086a2:	f000 ffab 	bl	80095fc <__mcmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f73f adb8 	bgt.w	800821c <_dtoa_r+0x4cc>
 80086ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086ae:	9f03      	ldr	r7, [sp, #12]
 80086b0:	ea6f 0a03 	mvn.w	sl, r3
 80086b4:	f04f 0800 	mov.w	r8, #0
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 fd16 	bl	80090ec <_Bfree>
 80086c0:	2e00      	cmp	r6, #0
 80086c2:	f43f aea7 	beq.w	8008414 <_dtoa_r+0x6c4>
 80086c6:	f1b8 0f00 	cmp.w	r8, #0
 80086ca:	d005      	beq.n	80086d8 <_dtoa_r+0x988>
 80086cc:	45b0      	cmp	r8, r6
 80086ce:	d003      	beq.n	80086d8 <_dtoa_r+0x988>
 80086d0:	4641      	mov	r1, r8
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 fd0a 	bl	80090ec <_Bfree>
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fd06 	bl	80090ec <_Bfree>
 80086e0:	e698      	b.n	8008414 <_dtoa_r+0x6c4>
 80086e2:	2400      	movs	r4, #0
 80086e4:	4626      	mov	r6, r4
 80086e6:	e7e1      	b.n	80086ac <_dtoa_r+0x95c>
 80086e8:	46c2      	mov	sl, r8
 80086ea:	4626      	mov	r6, r4
 80086ec:	e596      	b.n	800821c <_dtoa_r+0x4cc>
 80086ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80fd 	beq.w	80088f4 <_dtoa_r+0xba4>
 80086fa:	2f00      	cmp	r7, #0
 80086fc:	dd05      	ble.n	800870a <_dtoa_r+0x9ba>
 80086fe:	4631      	mov	r1, r6
 8008700:	463a      	mov	r2, r7
 8008702:	4628      	mov	r0, r5
 8008704:	f000 ff0a 	bl	800951c <__lshift>
 8008708:	4606      	mov	r6, r0
 800870a:	f1b8 0f00 	cmp.w	r8, #0
 800870e:	d05c      	beq.n	80087ca <_dtoa_r+0xa7a>
 8008710:	4628      	mov	r0, r5
 8008712:	6871      	ldr	r1, [r6, #4]
 8008714:	f000 fcaa 	bl	800906c <_Balloc>
 8008718:	4607      	mov	r7, r0
 800871a:	b928      	cbnz	r0, 8008728 <_dtoa_r+0x9d8>
 800871c:	4602      	mov	r2, r0
 800871e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008722:	4b7f      	ldr	r3, [pc, #508]	; (8008920 <_dtoa_r+0xbd0>)
 8008724:	f7ff bb28 	b.w	8007d78 <_dtoa_r+0x28>
 8008728:	6932      	ldr	r2, [r6, #16]
 800872a:	f106 010c 	add.w	r1, r6, #12
 800872e:	3202      	adds	r2, #2
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	300c      	adds	r0, #12
 8008734:	f000 fc8c 	bl	8009050 <memcpy>
 8008738:	2201      	movs	r2, #1
 800873a:	4639      	mov	r1, r7
 800873c:	4628      	mov	r0, r5
 800873e:	f000 feed 	bl	800951c <__lshift>
 8008742:	46b0      	mov	r8, r6
 8008744:	4606      	mov	r6, r0
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	444b      	add	r3, r9
 8008750:	930a      	str	r3, [sp, #40]	; 0x28
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	9309      	str	r3, [sp, #36]	; 0x24
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	4621      	mov	r1, r4
 800875e:	3b01      	subs	r3, #1
 8008760:	4658      	mov	r0, fp
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	f7ff fa68 	bl	8007c38 <quorem>
 8008768:	4603      	mov	r3, r0
 800876a:	4641      	mov	r1, r8
 800876c:	3330      	adds	r3, #48	; 0x30
 800876e:	9006      	str	r0, [sp, #24]
 8008770:	4658      	mov	r0, fp
 8008772:	930b      	str	r3, [sp, #44]	; 0x2c
 8008774:	f000 ff42 	bl	80095fc <__mcmp>
 8008778:	4632      	mov	r2, r6
 800877a:	4681      	mov	r9, r0
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 ff58 	bl	8009634 <__mdiff>
 8008784:	68c2      	ldr	r2, [r0, #12]
 8008786:	4607      	mov	r7, r0
 8008788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878a:	bb02      	cbnz	r2, 80087ce <_dtoa_r+0xa7e>
 800878c:	4601      	mov	r1, r0
 800878e:	4658      	mov	r0, fp
 8008790:	f000 ff34 	bl	80095fc <__mcmp>
 8008794:	4602      	mov	r2, r0
 8008796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008798:	4639      	mov	r1, r7
 800879a:	4628      	mov	r0, r5
 800879c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80087a0:	f000 fca4 	bl	80090ec <_Bfree>
 80087a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a8:	9f08      	ldr	r7, [sp, #32]
 80087aa:	ea43 0102 	orr.w	r1, r3, r2
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	430b      	orrs	r3, r1
 80087b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b4:	d10d      	bne.n	80087d2 <_dtoa_r+0xa82>
 80087b6:	2b39      	cmp	r3, #57	; 0x39
 80087b8:	d029      	beq.n	800880e <_dtoa_r+0xabe>
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	dd01      	ble.n	80087c4 <_dtoa_r+0xa74>
 80087c0:	9b06      	ldr	r3, [sp, #24]
 80087c2:	3331      	adds	r3, #49	; 0x31
 80087c4:	9a04      	ldr	r2, [sp, #16]
 80087c6:	7013      	strb	r3, [r2, #0]
 80087c8:	e776      	b.n	80086b8 <_dtoa_r+0x968>
 80087ca:	4630      	mov	r0, r6
 80087cc:	e7b9      	b.n	8008742 <_dtoa_r+0x9f2>
 80087ce:	2201      	movs	r2, #1
 80087d0:	e7e2      	b.n	8008798 <_dtoa_r+0xa48>
 80087d2:	f1b9 0f00 	cmp.w	r9, #0
 80087d6:	db06      	blt.n	80087e6 <_dtoa_r+0xa96>
 80087d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80087da:	ea41 0909 	orr.w	r9, r1, r9
 80087de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e0:	ea59 0101 	orrs.w	r1, r9, r1
 80087e4:	d120      	bne.n	8008828 <_dtoa_r+0xad8>
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	ddec      	ble.n	80087c4 <_dtoa_r+0xa74>
 80087ea:	4659      	mov	r1, fp
 80087ec:	2201      	movs	r2, #1
 80087ee:	4628      	mov	r0, r5
 80087f0:	9308      	str	r3, [sp, #32]
 80087f2:	f000 fe93 	bl	800951c <__lshift>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4683      	mov	fp, r0
 80087fa:	f000 feff 	bl	80095fc <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	dc02      	bgt.n	800880a <_dtoa_r+0xaba>
 8008804:	d1de      	bne.n	80087c4 <_dtoa_r+0xa74>
 8008806:	07da      	lsls	r2, r3, #31
 8008808:	d5dc      	bpl.n	80087c4 <_dtoa_r+0xa74>
 800880a:	2b39      	cmp	r3, #57	; 0x39
 800880c:	d1d8      	bne.n	80087c0 <_dtoa_r+0xa70>
 800880e:	2339      	movs	r3, #57	; 0x39
 8008810:	9a04      	ldr	r2, [sp, #16]
 8008812:	7013      	strb	r3, [r2, #0]
 8008814:	463b      	mov	r3, r7
 8008816:	461f      	mov	r7, r3
 8008818:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800881c:	3b01      	subs	r3, #1
 800881e:	2a39      	cmp	r2, #57	; 0x39
 8008820:	d050      	beq.n	80088c4 <_dtoa_r+0xb74>
 8008822:	3201      	adds	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e747      	b.n	80086b8 <_dtoa_r+0x968>
 8008828:	2a00      	cmp	r2, #0
 800882a:	dd03      	ble.n	8008834 <_dtoa_r+0xae4>
 800882c:	2b39      	cmp	r3, #57	; 0x39
 800882e:	d0ee      	beq.n	800880e <_dtoa_r+0xabe>
 8008830:	3301      	adds	r3, #1
 8008832:	e7c7      	b.n	80087c4 <_dtoa_r+0xa74>
 8008834:	9a08      	ldr	r2, [sp, #32]
 8008836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008838:	f802 3c01 	strb.w	r3, [r2, #-1]
 800883c:	428a      	cmp	r2, r1
 800883e:	d02a      	beq.n	8008896 <_dtoa_r+0xb46>
 8008840:	4659      	mov	r1, fp
 8008842:	2300      	movs	r3, #0
 8008844:	220a      	movs	r2, #10
 8008846:	4628      	mov	r0, r5
 8008848:	f000 fc72 	bl	8009130 <__multadd>
 800884c:	45b0      	cmp	r8, r6
 800884e:	4683      	mov	fp, r0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	f04f 020a 	mov.w	r2, #10
 8008858:	4641      	mov	r1, r8
 800885a:	4628      	mov	r0, r5
 800885c:	d107      	bne.n	800886e <_dtoa_r+0xb1e>
 800885e:	f000 fc67 	bl	8009130 <__multadd>
 8008862:	4680      	mov	r8, r0
 8008864:	4606      	mov	r6, r0
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	3301      	adds	r3, #1
 800886a:	9308      	str	r3, [sp, #32]
 800886c:	e775      	b.n	800875a <_dtoa_r+0xa0a>
 800886e:	f000 fc5f 	bl	8009130 <__multadd>
 8008872:	4631      	mov	r1, r6
 8008874:	4680      	mov	r8, r0
 8008876:	2300      	movs	r3, #0
 8008878:	220a      	movs	r2, #10
 800887a:	4628      	mov	r0, r5
 800887c:	f000 fc58 	bl	8009130 <__multadd>
 8008880:	4606      	mov	r6, r0
 8008882:	e7f0      	b.n	8008866 <_dtoa_r+0xb16>
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	bfcc      	ite	gt
 800888a:	464f      	movgt	r7, r9
 800888c:	2701      	movle	r7, #1
 800888e:	f04f 0800 	mov.w	r8, #0
 8008892:	9a03      	ldr	r2, [sp, #12]
 8008894:	4417      	add	r7, r2
 8008896:	4659      	mov	r1, fp
 8008898:	2201      	movs	r2, #1
 800889a:	4628      	mov	r0, r5
 800889c:	9308      	str	r3, [sp, #32]
 800889e:	f000 fe3d 	bl	800951c <__lshift>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4683      	mov	fp, r0
 80088a6:	f000 fea9 	bl	80095fc <__mcmp>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	dcb2      	bgt.n	8008814 <_dtoa_r+0xac4>
 80088ae:	d102      	bne.n	80088b6 <_dtoa_r+0xb66>
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	07db      	lsls	r3, r3, #31
 80088b4:	d4ae      	bmi.n	8008814 <_dtoa_r+0xac4>
 80088b6:	463b      	mov	r3, r7
 80088b8:	461f      	mov	r7, r3
 80088ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088be:	2a30      	cmp	r2, #48	; 0x30
 80088c0:	d0fa      	beq.n	80088b8 <_dtoa_r+0xb68>
 80088c2:	e6f9      	b.n	80086b8 <_dtoa_r+0x968>
 80088c4:	9a03      	ldr	r2, [sp, #12]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d1a5      	bne.n	8008816 <_dtoa_r+0xac6>
 80088ca:	2331      	movs	r3, #49	; 0x31
 80088cc:	f10a 0a01 	add.w	sl, sl, #1
 80088d0:	e779      	b.n	80087c6 <_dtoa_r+0xa76>
 80088d2:	4b14      	ldr	r3, [pc, #80]	; (8008924 <_dtoa_r+0xbd4>)
 80088d4:	f7ff baa8 	b.w	8007e28 <_dtoa_r+0xd8>
 80088d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f aa81 	bne.w	8007de2 <_dtoa_r+0x92>
 80088e0:	4b11      	ldr	r3, [pc, #68]	; (8008928 <_dtoa_r+0xbd8>)
 80088e2:	f7ff baa1 	b.w	8007e28 <_dtoa_r+0xd8>
 80088e6:	f1b9 0f00 	cmp.w	r9, #0
 80088ea:	dc03      	bgt.n	80088f4 <_dtoa_r+0xba4>
 80088ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	f73f aecb 	bgt.w	800868a <_dtoa_r+0x93a>
 80088f4:	9f03      	ldr	r7, [sp, #12]
 80088f6:	4621      	mov	r1, r4
 80088f8:	4658      	mov	r0, fp
 80088fa:	f7ff f99d 	bl	8007c38 <quorem>
 80088fe:	9a03      	ldr	r2, [sp, #12]
 8008900:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008904:	f807 3b01 	strb.w	r3, [r7], #1
 8008908:	1aba      	subs	r2, r7, r2
 800890a:	4591      	cmp	r9, r2
 800890c:	ddba      	ble.n	8008884 <_dtoa_r+0xb34>
 800890e:	4659      	mov	r1, fp
 8008910:	2300      	movs	r3, #0
 8008912:	220a      	movs	r2, #10
 8008914:	4628      	mov	r0, r5
 8008916:	f000 fc0b 	bl	8009130 <__multadd>
 800891a:	4683      	mov	fp, r0
 800891c:	e7eb      	b.n	80088f6 <_dtoa_r+0xba6>
 800891e:	bf00      	nop
 8008920:	0800acd0 	.word	0x0800acd0
 8008924:	0800aad0 	.word	0x0800aad0
 8008928:	0800ac51 	.word	0x0800ac51

0800892c <rshift>:
 800892c:	6903      	ldr	r3, [r0, #16]
 800892e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008932:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008936:	f100 0414 	add.w	r4, r0, #20
 800893a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800893e:	dd46      	ble.n	80089ce <rshift+0xa2>
 8008940:	f011 011f 	ands.w	r1, r1, #31
 8008944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800894c:	d10c      	bne.n	8008968 <rshift+0x3c>
 800894e:	4629      	mov	r1, r5
 8008950:	f100 0710 	add.w	r7, r0, #16
 8008954:	42b1      	cmp	r1, r6
 8008956:	d335      	bcc.n	80089c4 <rshift+0x98>
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	1eea      	subs	r2, r5, #3
 800895e:	4296      	cmp	r6, r2
 8008960:	bf38      	it	cc
 8008962:	2300      	movcc	r3, #0
 8008964:	4423      	add	r3, r4
 8008966:	e015      	b.n	8008994 <rshift+0x68>
 8008968:	46a1      	mov	r9, r4
 800896a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800896e:	f1c1 0820 	rsb	r8, r1, #32
 8008972:	40cf      	lsrs	r7, r1
 8008974:	f105 0e04 	add.w	lr, r5, #4
 8008978:	4576      	cmp	r6, lr
 800897a:	46f4      	mov	ip, lr
 800897c:	d816      	bhi.n	80089ac <rshift+0x80>
 800897e:	1a9a      	subs	r2, r3, r2
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	3a04      	subs	r2, #4
 8008984:	3501      	adds	r5, #1
 8008986:	42ae      	cmp	r6, r5
 8008988:	bf38      	it	cc
 800898a:	2200      	movcc	r2, #0
 800898c:	18a3      	adds	r3, r4, r2
 800898e:	50a7      	str	r7, [r4, r2]
 8008990:	b107      	cbz	r7, 8008994 <rshift+0x68>
 8008992:	3304      	adds	r3, #4
 8008994:	42a3      	cmp	r3, r4
 8008996:	eba3 0204 	sub.w	r2, r3, r4
 800899a:	bf08      	it	eq
 800899c:	2300      	moveq	r3, #0
 800899e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089a2:	6102      	str	r2, [r0, #16]
 80089a4:	bf08      	it	eq
 80089a6:	6143      	streq	r3, [r0, #20]
 80089a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089ac:	f8dc c000 	ldr.w	ip, [ip]
 80089b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80089b4:	ea4c 0707 	orr.w	r7, ip, r7
 80089b8:	f849 7b04 	str.w	r7, [r9], #4
 80089bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089c0:	40cf      	lsrs	r7, r1
 80089c2:	e7d9      	b.n	8008978 <rshift+0x4c>
 80089c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80089c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80089cc:	e7c2      	b.n	8008954 <rshift+0x28>
 80089ce:	4623      	mov	r3, r4
 80089d0:	e7e0      	b.n	8008994 <rshift+0x68>

080089d2 <__hexdig_fun>:
 80089d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d802      	bhi.n	80089e0 <__hexdig_fun+0xe>
 80089da:	3820      	subs	r0, #32
 80089dc:	b2c0      	uxtb	r0, r0
 80089de:	4770      	bx	lr
 80089e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d801      	bhi.n	80089ec <__hexdig_fun+0x1a>
 80089e8:	3847      	subs	r0, #71	; 0x47
 80089ea:	e7f7      	b.n	80089dc <__hexdig_fun+0xa>
 80089ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d801      	bhi.n	80089f8 <__hexdig_fun+0x26>
 80089f4:	3827      	subs	r0, #39	; 0x27
 80089f6:	e7f1      	b.n	80089dc <__hexdig_fun+0xa>
 80089f8:	2000      	movs	r0, #0
 80089fa:	4770      	bx	lr

080089fc <__gethex>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	b08b      	sub	sp, #44	; 0x2c
 8008a02:	9305      	str	r3, [sp, #20]
 8008a04:	4bb2      	ldr	r3, [pc, #712]	; (8008cd0 <__gethex+0x2d4>)
 8008a06:	9002      	str	r0, [sp, #8]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	4690      	mov	r8, r2
 8008a10:	9303      	str	r3, [sp, #12]
 8008a12:	f7f7 fb9d 	bl	8000150 <strlen>
 8008a16:	4682      	mov	sl, r0
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	f8db 2000 	ldr.w	r2, [fp]
 8008a1e:	4403      	add	r3, r0
 8008a20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a24:	9306      	str	r3, [sp, #24]
 8008a26:	1c93      	adds	r3, r2, #2
 8008a28:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a2c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a30:	32fe      	adds	r2, #254	; 0xfe
 8008a32:	18d1      	adds	r1, r2, r3
 8008a34:	461f      	mov	r7, r3
 8008a36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a3a:	9101      	str	r1, [sp, #4]
 8008a3c:	2830      	cmp	r0, #48	; 0x30
 8008a3e:	d0f8      	beq.n	8008a32 <__gethex+0x36>
 8008a40:	f7ff ffc7 	bl	80089d2 <__hexdig_fun>
 8008a44:	4604      	mov	r4, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d13a      	bne.n	8008ac0 <__gethex+0xc4>
 8008a4a:	4652      	mov	r2, sl
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	9903      	ldr	r1, [sp, #12]
 8008a50:	f001 fa26 	bl	8009ea0 <strncmp>
 8008a54:	4605      	mov	r5, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d166      	bne.n	8008b28 <__gethex+0x12c>
 8008a5a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a5e:	eb07 060a 	add.w	r6, r7, sl
 8008a62:	f7ff ffb6 	bl	80089d2 <__hexdig_fun>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d060      	beq.n	8008b2c <__gethex+0x130>
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	7818      	ldrb	r0, [r3, #0]
 8008a6e:	461f      	mov	r7, r3
 8008a70:	2830      	cmp	r0, #48	; 0x30
 8008a72:	f103 0301 	add.w	r3, r3, #1
 8008a76:	d0f9      	beq.n	8008a6c <__gethex+0x70>
 8008a78:	f7ff ffab 	bl	80089d2 <__hexdig_fun>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	fab0 f480 	clz	r4, r0
 8008a82:	4635      	mov	r5, r6
 8008a84:	0964      	lsrs	r4, r4, #5
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4616      	mov	r6, r2
 8008a8c:	7830      	ldrb	r0, [r6, #0]
 8008a8e:	3201      	adds	r2, #1
 8008a90:	f7ff ff9f 	bl	80089d2 <__hexdig_fun>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d1f8      	bne.n	8008a8a <__gethex+0x8e>
 8008a98:	4652      	mov	r2, sl
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	9903      	ldr	r1, [sp, #12]
 8008a9e:	f001 f9ff 	bl	8009ea0 <strncmp>
 8008aa2:	b980      	cbnz	r0, 8008ac6 <__gethex+0xca>
 8008aa4:	b94d      	cbnz	r5, 8008aba <__gethex+0xbe>
 8008aa6:	eb06 050a 	add.w	r5, r6, sl
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4616      	mov	r6, r2
 8008aae:	7830      	ldrb	r0, [r6, #0]
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	f7ff ff8e 	bl	80089d2 <__hexdig_fun>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1f8      	bne.n	8008aac <__gethex+0xb0>
 8008aba:	1bad      	subs	r5, r5, r6
 8008abc:	00ad      	lsls	r5, r5, #2
 8008abe:	e004      	b.n	8008aca <__gethex+0xce>
 8008ac0:	2400      	movs	r4, #0
 8008ac2:	4625      	mov	r5, r4
 8008ac4:	e7e0      	b.n	8008a88 <__gethex+0x8c>
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	d1f7      	bne.n	8008aba <__gethex+0xbe>
 8008aca:	7833      	ldrb	r3, [r6, #0]
 8008acc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ad0:	2b50      	cmp	r3, #80	; 0x50
 8008ad2:	d139      	bne.n	8008b48 <__gethex+0x14c>
 8008ad4:	7873      	ldrb	r3, [r6, #1]
 8008ad6:	2b2b      	cmp	r3, #43	; 0x2b
 8008ad8:	d02a      	beq.n	8008b30 <__gethex+0x134>
 8008ada:	2b2d      	cmp	r3, #45	; 0x2d
 8008adc:	d02c      	beq.n	8008b38 <__gethex+0x13c>
 8008ade:	f04f 0900 	mov.w	r9, #0
 8008ae2:	1c71      	adds	r1, r6, #1
 8008ae4:	7808      	ldrb	r0, [r1, #0]
 8008ae6:	f7ff ff74 	bl	80089d2 <__hexdig_fun>
 8008aea:	1e43      	subs	r3, r0, #1
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b18      	cmp	r3, #24
 8008af0:	d82a      	bhi.n	8008b48 <__gethex+0x14c>
 8008af2:	f1a0 0210 	sub.w	r2, r0, #16
 8008af6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008afa:	f7ff ff6a 	bl	80089d2 <__hexdig_fun>
 8008afe:	1e43      	subs	r3, r0, #1
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b18      	cmp	r3, #24
 8008b04:	d91b      	bls.n	8008b3e <__gethex+0x142>
 8008b06:	f1b9 0f00 	cmp.w	r9, #0
 8008b0a:	d000      	beq.n	8008b0e <__gethex+0x112>
 8008b0c:	4252      	negs	r2, r2
 8008b0e:	4415      	add	r5, r2
 8008b10:	f8cb 1000 	str.w	r1, [fp]
 8008b14:	b1d4      	cbz	r4, 8008b4c <__gethex+0x150>
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	bf14      	ite	ne
 8008b1c:	2700      	movne	r7, #0
 8008b1e:	2706      	moveq	r7, #6
 8008b20:	4638      	mov	r0, r7
 8008b22:	b00b      	add	sp, #44	; 0x2c
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	463e      	mov	r6, r7
 8008b2a:	4625      	mov	r5, r4
 8008b2c:	2401      	movs	r4, #1
 8008b2e:	e7cc      	b.n	8008aca <__gethex+0xce>
 8008b30:	f04f 0900 	mov.w	r9, #0
 8008b34:	1cb1      	adds	r1, r6, #2
 8008b36:	e7d5      	b.n	8008ae4 <__gethex+0xe8>
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	e7fa      	b.n	8008b34 <__gethex+0x138>
 8008b3e:	230a      	movs	r3, #10
 8008b40:	fb03 0202 	mla	r2, r3, r2, r0
 8008b44:	3a10      	subs	r2, #16
 8008b46:	e7d6      	b.n	8008af6 <__gethex+0xfa>
 8008b48:	4631      	mov	r1, r6
 8008b4a:	e7e1      	b.n	8008b10 <__gethex+0x114>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	1bf3      	subs	r3, r6, r7
 8008b50:	3b01      	subs	r3, #1
 8008b52:	2b07      	cmp	r3, #7
 8008b54:	dc0a      	bgt.n	8008b6c <__gethex+0x170>
 8008b56:	9802      	ldr	r0, [sp, #8]
 8008b58:	f000 fa88 	bl	800906c <_Balloc>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	b940      	cbnz	r0, 8008b72 <__gethex+0x176>
 8008b60:	4602      	mov	r2, r0
 8008b62:	21de      	movs	r1, #222	; 0xde
 8008b64:	4b5b      	ldr	r3, [pc, #364]	; (8008cd4 <__gethex+0x2d8>)
 8008b66:	485c      	ldr	r0, [pc, #368]	; (8008cd8 <__gethex+0x2dc>)
 8008b68:	f001 f9bc 	bl	8009ee4 <__assert_func>
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	105b      	asrs	r3, r3, #1
 8008b70:	e7ef      	b.n	8008b52 <__gethex+0x156>
 8008b72:	f04f 0b00 	mov.w	fp, #0
 8008b76:	f100 0914 	add.w	r9, r0, #20
 8008b7a:	f1ca 0301 	rsb	r3, sl, #1
 8008b7e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b82:	f8cd b004 	str.w	fp, [sp, #4]
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	42b7      	cmp	r7, r6
 8008b8a:	d33f      	bcc.n	8008c0c <__gethex+0x210>
 8008b8c:	9f04      	ldr	r7, [sp, #16]
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	f847 3b04 	str.w	r3, [r7], #4
 8008b94:	eba7 0709 	sub.w	r7, r7, r9
 8008b98:	10bf      	asrs	r7, r7, #2
 8008b9a:	6127      	str	r7, [r4, #16]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fb57 	bl	8009250 <__hi0bits>
 8008ba2:	017f      	lsls	r7, r7, #5
 8008ba4:	f8d8 6000 	ldr.w	r6, [r8]
 8008ba8:	1a3f      	subs	r7, r7, r0
 8008baa:	42b7      	cmp	r7, r6
 8008bac:	dd62      	ble.n	8008c74 <__gethex+0x278>
 8008bae:	1bbf      	subs	r7, r7, r6
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fef1 	bl	800999a <__any_on>
 8008bb8:	4682      	mov	sl, r0
 8008bba:	b1a8      	cbz	r0, 8008be8 <__gethex+0x1ec>
 8008bbc:	f04f 0a01 	mov.w	sl, #1
 8008bc0:	1e7b      	subs	r3, r7, #1
 8008bc2:	1159      	asrs	r1, r3, #5
 8008bc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bc8:	f003 021f 	and.w	r2, r3, #31
 8008bcc:	fa0a f202 	lsl.w	r2, sl, r2
 8008bd0:	420a      	tst	r2, r1
 8008bd2:	d009      	beq.n	8008be8 <__gethex+0x1ec>
 8008bd4:	4553      	cmp	r3, sl
 8008bd6:	dd05      	ble.n	8008be4 <__gethex+0x1e8>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	1eb9      	subs	r1, r7, #2
 8008bdc:	f000 fedd 	bl	800999a <__any_on>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d144      	bne.n	8008c6e <__gethex+0x272>
 8008be4:	f04f 0a02 	mov.w	sl, #2
 8008be8:	4639      	mov	r1, r7
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff fe9e 	bl	800892c <rshift>
 8008bf0:	443d      	add	r5, r7
 8008bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bf6:	42ab      	cmp	r3, r5
 8008bf8:	da4a      	bge.n	8008c90 <__gethex+0x294>
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	9802      	ldr	r0, [sp, #8]
 8008bfe:	f000 fa75 	bl	80090ec <_Bfree>
 8008c02:	2300      	movs	r3, #0
 8008c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c06:	27a3      	movs	r7, #163	; 0xa3
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e789      	b.n	8008b20 <__gethex+0x124>
 8008c0c:	1e73      	subs	r3, r6, #1
 8008c0e:	9a06      	ldr	r2, [sp, #24]
 8008c10:	9307      	str	r3, [sp, #28]
 8008c12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d019      	beq.n	8008c4e <__gethex+0x252>
 8008c1a:	f1bb 0f20 	cmp.w	fp, #32
 8008c1e:	d107      	bne.n	8008c30 <__gethex+0x234>
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	f843 2b04 	str.w	r2, [r3], #4
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	469b      	mov	fp, r3
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c34:	f7ff fecd 	bl	80089d2 <__hexdig_fun>
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	f000 000f 	and.w	r0, r0, #15
 8008c3e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c42:	4303      	orrs	r3, r0
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f10b 0b04 	add.w	fp, fp, #4
 8008c4a:	9b07      	ldr	r3, [sp, #28]
 8008c4c:	e00d      	b.n	8008c6a <__gethex+0x26e>
 8008c4e:	9a08      	ldr	r2, [sp, #32]
 8008c50:	1e73      	subs	r3, r6, #1
 8008c52:	4413      	add	r3, r2
 8008c54:	42bb      	cmp	r3, r7
 8008c56:	d3e0      	bcc.n	8008c1a <__gethex+0x21e>
 8008c58:	4618      	mov	r0, r3
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c60:	f001 f91e 	bl	8009ea0 <strncmp>
 8008c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1d7      	bne.n	8008c1a <__gethex+0x21e>
 8008c6a:	461e      	mov	r6, r3
 8008c6c:	e78c      	b.n	8008b88 <__gethex+0x18c>
 8008c6e:	f04f 0a03 	mov.w	sl, #3
 8008c72:	e7b9      	b.n	8008be8 <__gethex+0x1ec>
 8008c74:	da09      	bge.n	8008c8a <__gethex+0x28e>
 8008c76:	1bf7      	subs	r7, r6, r7
 8008c78:	4621      	mov	r1, r4
 8008c7a:	463a      	mov	r2, r7
 8008c7c:	9802      	ldr	r0, [sp, #8]
 8008c7e:	f000 fc4d 	bl	800951c <__lshift>
 8008c82:	4604      	mov	r4, r0
 8008c84:	1bed      	subs	r5, r5, r7
 8008c86:	f100 0914 	add.w	r9, r0, #20
 8008c8a:	f04f 0a00 	mov.w	sl, #0
 8008c8e:	e7b0      	b.n	8008bf2 <__gethex+0x1f6>
 8008c90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c94:	42a8      	cmp	r0, r5
 8008c96:	dd72      	ble.n	8008d7e <__gethex+0x382>
 8008c98:	1b45      	subs	r5, r0, r5
 8008c9a:	42ae      	cmp	r6, r5
 8008c9c:	dc35      	bgt.n	8008d0a <__gethex+0x30e>
 8008c9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d029      	beq.n	8008cfa <__gethex+0x2fe>
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d02b      	beq.n	8008d02 <__gethex+0x306>
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d11c      	bne.n	8008ce8 <__gethex+0x2ec>
 8008cae:	42ae      	cmp	r6, r5
 8008cb0:	d11a      	bne.n	8008ce8 <__gethex+0x2ec>
 8008cb2:	2e01      	cmp	r6, #1
 8008cb4:	d112      	bne.n	8008cdc <__gethex+0x2e0>
 8008cb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cba:	9a05      	ldr	r2, [sp, #20]
 8008cbc:	2762      	movs	r7, #98	; 0x62
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	f8c9 3000 	str.w	r3, [r9]
 8008cc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cca:	601c      	str	r4, [r3, #0]
 8008ccc:	e728      	b.n	8008b20 <__gethex+0x124>
 8008cce:	bf00      	nop
 8008cd0:	0800ad48 	.word	0x0800ad48
 8008cd4:	0800acd0 	.word	0x0800acd0
 8008cd8:	0800ace1 	.word	0x0800ace1
 8008cdc:	4620      	mov	r0, r4
 8008cde:	1e71      	subs	r1, r6, #1
 8008ce0:	f000 fe5b 	bl	800999a <__any_on>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1e6      	bne.n	8008cb6 <__gethex+0x2ba>
 8008ce8:	4621      	mov	r1, r4
 8008cea:	9802      	ldr	r0, [sp, #8]
 8008cec:	f000 f9fe 	bl	80090ec <_Bfree>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cf4:	2750      	movs	r7, #80	; 0x50
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	e712      	b.n	8008b20 <__gethex+0x124>
 8008cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1f3      	bne.n	8008ce8 <__gethex+0x2ec>
 8008d00:	e7d9      	b.n	8008cb6 <__gethex+0x2ba>
 8008d02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1d6      	bne.n	8008cb6 <__gethex+0x2ba>
 8008d08:	e7ee      	b.n	8008ce8 <__gethex+0x2ec>
 8008d0a:	1e6f      	subs	r7, r5, #1
 8008d0c:	f1ba 0f00 	cmp.w	sl, #0
 8008d10:	d132      	bne.n	8008d78 <__gethex+0x37c>
 8008d12:	b127      	cbz	r7, 8008d1e <__gethex+0x322>
 8008d14:	4639      	mov	r1, r7
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 fe3f 	bl	800999a <__any_on>
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	2101      	movs	r1, #1
 8008d20:	117b      	asrs	r3, r7, #5
 8008d22:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d26:	f007 071f 	and.w	r7, r7, #31
 8008d2a:	fa01 f707 	lsl.w	r7, r1, r7
 8008d2e:	421f      	tst	r7, r3
 8008d30:	f04f 0702 	mov.w	r7, #2
 8008d34:	4629      	mov	r1, r5
 8008d36:	4620      	mov	r0, r4
 8008d38:	bf18      	it	ne
 8008d3a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d3e:	1b76      	subs	r6, r6, r5
 8008d40:	f7ff fdf4 	bl	800892c <rshift>
 8008d44:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d48:	f1ba 0f00 	cmp.w	sl, #0
 8008d4c:	d048      	beq.n	8008de0 <__gethex+0x3e4>
 8008d4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d015      	beq.n	8008d82 <__gethex+0x386>
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d017      	beq.n	8008d8a <__gethex+0x38e>
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d109      	bne.n	8008d72 <__gethex+0x376>
 8008d5e:	f01a 0f02 	tst.w	sl, #2
 8008d62:	d006      	beq.n	8008d72 <__gethex+0x376>
 8008d64:	f8d9 0000 	ldr.w	r0, [r9]
 8008d68:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d6c:	f01a 0f01 	tst.w	sl, #1
 8008d70:	d10e      	bne.n	8008d90 <__gethex+0x394>
 8008d72:	f047 0710 	orr.w	r7, r7, #16
 8008d76:	e033      	b.n	8008de0 <__gethex+0x3e4>
 8008d78:	f04f 0a01 	mov.w	sl, #1
 8008d7c:	e7cf      	b.n	8008d1e <__gethex+0x322>
 8008d7e:	2701      	movs	r7, #1
 8008d80:	e7e2      	b.n	8008d48 <__gethex+0x34c>
 8008d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d84:	f1c3 0301 	rsb	r3, r3, #1
 8008d88:	9315      	str	r3, [sp, #84]	; 0x54
 8008d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0f0      	beq.n	8008d72 <__gethex+0x376>
 8008d90:	f04f 0c00 	mov.w	ip, #0
 8008d94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d98:	f104 0314 	add.w	r3, r4, #20
 8008d9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008da0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008daa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008dae:	d01c      	beq.n	8008dea <__gethex+0x3ee>
 8008db0:	3201      	adds	r2, #1
 8008db2:	6002      	str	r2, [r0, #0]
 8008db4:	2f02      	cmp	r7, #2
 8008db6:	f104 0314 	add.w	r3, r4, #20
 8008dba:	d13d      	bne.n	8008e38 <__gethex+0x43c>
 8008dbc:	f8d8 2000 	ldr.w	r2, [r8]
 8008dc0:	3a01      	subs	r2, #1
 8008dc2:	42b2      	cmp	r2, r6
 8008dc4:	d10a      	bne.n	8008ddc <__gethex+0x3e0>
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	1171      	asrs	r1, r6, #5
 8008dca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dce:	f006 061f 	and.w	r6, r6, #31
 8008dd2:	fa02 f606 	lsl.w	r6, r2, r6
 8008dd6:	421e      	tst	r6, r3
 8008dd8:	bf18      	it	ne
 8008dda:	4617      	movne	r7, r2
 8008ddc:	f047 0720 	orr.w	r7, r7, #32
 8008de0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008de2:	601c      	str	r4, [r3, #0]
 8008de4:	9b05      	ldr	r3, [sp, #20]
 8008de6:	601d      	str	r5, [r3, #0]
 8008de8:	e69a      	b.n	8008b20 <__gethex+0x124>
 8008dea:	4299      	cmp	r1, r3
 8008dec:	f843 cc04 	str.w	ip, [r3, #-4]
 8008df0:	d8d8      	bhi.n	8008da4 <__gethex+0x3a8>
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	459b      	cmp	fp, r3
 8008df6:	db17      	blt.n	8008e28 <__gethex+0x42c>
 8008df8:	6861      	ldr	r1, [r4, #4]
 8008dfa:	9802      	ldr	r0, [sp, #8]
 8008dfc:	3101      	adds	r1, #1
 8008dfe:	f000 f935 	bl	800906c <_Balloc>
 8008e02:	4681      	mov	r9, r0
 8008e04:	b918      	cbnz	r0, 8008e0e <__gethex+0x412>
 8008e06:	4602      	mov	r2, r0
 8008e08:	2184      	movs	r1, #132	; 0x84
 8008e0a:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <__gethex+0x474>)
 8008e0c:	e6ab      	b.n	8008b66 <__gethex+0x16a>
 8008e0e:	6922      	ldr	r2, [r4, #16]
 8008e10:	f104 010c 	add.w	r1, r4, #12
 8008e14:	3202      	adds	r2, #2
 8008e16:	0092      	lsls	r2, r2, #2
 8008e18:	300c      	adds	r0, #12
 8008e1a:	f000 f919 	bl	8009050 <memcpy>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	9802      	ldr	r0, [sp, #8]
 8008e22:	f000 f963 	bl	80090ec <_Bfree>
 8008e26:	464c      	mov	r4, r9
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	6122      	str	r2, [r4, #16]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e34:	615a      	str	r2, [r3, #20]
 8008e36:	e7bd      	b.n	8008db4 <__gethex+0x3b8>
 8008e38:	6922      	ldr	r2, [r4, #16]
 8008e3a:	455a      	cmp	r2, fp
 8008e3c:	dd0b      	ble.n	8008e56 <__gethex+0x45a>
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff fd73 	bl	800892c <rshift>
 8008e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e4a:	3501      	adds	r5, #1
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	f6ff aed4 	blt.w	8008bfa <__gethex+0x1fe>
 8008e52:	2701      	movs	r7, #1
 8008e54:	e7c2      	b.n	8008ddc <__gethex+0x3e0>
 8008e56:	f016 061f 	ands.w	r6, r6, #31
 8008e5a:	d0fa      	beq.n	8008e52 <__gethex+0x456>
 8008e5c:	4453      	add	r3, sl
 8008e5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e62:	f000 f9f5 	bl	8009250 <__hi0bits>
 8008e66:	f1c6 0620 	rsb	r6, r6, #32
 8008e6a:	42b0      	cmp	r0, r6
 8008e6c:	dbe7      	blt.n	8008e3e <__gethex+0x442>
 8008e6e:	e7f0      	b.n	8008e52 <__gethex+0x456>
 8008e70:	0800acd0 	.word	0x0800acd0

08008e74 <L_shift>:
 8008e74:	f1c2 0208 	rsb	r2, r2, #8
 8008e78:	0092      	lsls	r2, r2, #2
 8008e7a:	b570      	push	{r4, r5, r6, lr}
 8008e7c:	f1c2 0620 	rsb	r6, r2, #32
 8008e80:	6843      	ldr	r3, [r0, #4]
 8008e82:	6804      	ldr	r4, [r0, #0]
 8008e84:	fa03 f506 	lsl.w	r5, r3, r6
 8008e88:	432c      	orrs	r4, r5
 8008e8a:	40d3      	lsrs	r3, r2
 8008e8c:	6004      	str	r4, [r0, #0]
 8008e8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e92:	4288      	cmp	r0, r1
 8008e94:	d3f4      	bcc.n	8008e80 <L_shift+0xc>
 8008e96:	bd70      	pop	{r4, r5, r6, pc}

08008e98 <__match>:
 8008e98:	b530      	push	{r4, r5, lr}
 8008e9a:	6803      	ldr	r3, [r0, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea2:	b914      	cbnz	r4, 8008eaa <__match+0x12>
 8008ea4:	6003      	str	r3, [r0, #0]
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	bd30      	pop	{r4, r5, pc}
 8008eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008eb2:	2d19      	cmp	r5, #25
 8008eb4:	bf98      	it	ls
 8008eb6:	3220      	addls	r2, #32
 8008eb8:	42a2      	cmp	r2, r4
 8008eba:	d0f0      	beq.n	8008e9e <__match+0x6>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	e7f3      	b.n	8008ea8 <__match+0x10>

08008ec0 <__hexnan>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	2500      	movs	r5, #0
 8008ec6:	680b      	ldr	r3, [r1, #0]
 8008ec8:	4682      	mov	sl, r0
 8008eca:	115e      	asrs	r6, r3, #5
 8008ecc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ed0:	f013 031f 	ands.w	r3, r3, #31
 8008ed4:	bf18      	it	ne
 8008ed6:	3604      	addne	r6, #4
 8008ed8:	1f37      	subs	r7, r6, #4
 8008eda:	46b9      	mov	r9, r7
 8008edc:	463c      	mov	r4, r7
 8008ede:	46ab      	mov	fp, r5
 8008ee0:	b087      	sub	sp, #28
 8008ee2:	4690      	mov	r8, r2
 8008ee4:	6802      	ldr	r2, [r0, #0]
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008eec:	9502      	str	r5, [sp, #8]
 8008eee:	7851      	ldrb	r1, [r2, #1]
 8008ef0:	1c53      	adds	r3, r2, #1
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	b341      	cbz	r1, 8008f48 <__hexnan+0x88>
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	9205      	str	r2, [sp, #20]
 8008efa:	9104      	str	r1, [sp, #16]
 8008efc:	f7ff fd69 	bl	80089d2 <__hexdig_fun>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d14f      	bne.n	8008fa4 <__hexnan+0xe4>
 8008f04:	9904      	ldr	r1, [sp, #16]
 8008f06:	9a05      	ldr	r2, [sp, #20]
 8008f08:	2920      	cmp	r1, #32
 8008f0a:	d818      	bhi.n	8008f3e <__hexnan+0x7e>
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	459b      	cmp	fp, r3
 8008f10:	dd13      	ble.n	8008f3a <__hexnan+0x7a>
 8008f12:	454c      	cmp	r4, r9
 8008f14:	d206      	bcs.n	8008f24 <__hexnan+0x64>
 8008f16:	2d07      	cmp	r5, #7
 8008f18:	dc04      	bgt.n	8008f24 <__hexnan+0x64>
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7ff ffa8 	bl	8008e74 <L_shift>
 8008f24:	4544      	cmp	r4, r8
 8008f26:	d950      	bls.n	8008fca <__hexnan+0x10a>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f1a4 0904 	sub.w	r9, r4, #4
 8008f2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f32:	461d      	mov	r5, r3
 8008f34:	464c      	mov	r4, r9
 8008f36:	f8cd b008 	str.w	fp, [sp, #8]
 8008f3a:	9a03      	ldr	r2, [sp, #12]
 8008f3c:	e7d7      	b.n	8008eee <__hexnan+0x2e>
 8008f3e:	2929      	cmp	r1, #41	; 0x29
 8008f40:	d156      	bne.n	8008ff0 <__hexnan+0x130>
 8008f42:	3202      	adds	r2, #2
 8008f44:	f8ca 2000 	str.w	r2, [sl]
 8008f48:	f1bb 0f00 	cmp.w	fp, #0
 8008f4c:	d050      	beq.n	8008ff0 <__hexnan+0x130>
 8008f4e:	454c      	cmp	r4, r9
 8008f50:	d206      	bcs.n	8008f60 <__hexnan+0xa0>
 8008f52:	2d07      	cmp	r5, #7
 8008f54:	dc04      	bgt.n	8008f60 <__hexnan+0xa0>
 8008f56:	462a      	mov	r2, r5
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f7ff ff8a 	bl	8008e74 <L_shift>
 8008f60:	4544      	cmp	r4, r8
 8008f62:	d934      	bls.n	8008fce <__hexnan+0x10e>
 8008f64:	4623      	mov	r3, r4
 8008f66:	f1a8 0204 	sub.w	r2, r8, #4
 8008f6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f6e:	429f      	cmp	r7, r3
 8008f70:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f74:	d2f9      	bcs.n	8008f6a <__hexnan+0xaa>
 8008f76:	1b3b      	subs	r3, r7, r4
 8008f78:	f023 0303 	bic.w	r3, r3, #3
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	3401      	adds	r4, #1
 8008f80:	3e03      	subs	r6, #3
 8008f82:	42b4      	cmp	r4, r6
 8008f84:	bf88      	it	hi
 8008f86:	2304      	movhi	r3, #4
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4443      	add	r3, r8
 8008f8c:	f843 2b04 	str.w	r2, [r3], #4
 8008f90:	429f      	cmp	r7, r3
 8008f92:	d2fb      	bcs.n	8008f8c <__hexnan+0xcc>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	b91b      	cbnz	r3, 8008fa0 <__hexnan+0xe0>
 8008f98:	4547      	cmp	r7, r8
 8008f9a:	d127      	bne.n	8008fec <__hexnan+0x12c>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	2005      	movs	r0, #5
 8008fa2:	e026      	b.n	8008ff2 <__hexnan+0x132>
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	2d08      	cmp	r5, #8
 8008fa8:	f10b 0b01 	add.w	fp, fp, #1
 8008fac:	dd06      	ble.n	8008fbc <__hexnan+0xfc>
 8008fae:	4544      	cmp	r4, r8
 8008fb0:	d9c3      	bls.n	8008f3a <__hexnan+0x7a>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2501      	movs	r5, #1
 8008fb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fba:	3c04      	subs	r4, #4
 8008fbc:	6822      	ldr	r2, [r4, #0]
 8008fbe:	f000 000f 	and.w	r0, r0, #15
 8008fc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008fc6:	6022      	str	r2, [r4, #0]
 8008fc8:	e7b7      	b.n	8008f3a <__hexnan+0x7a>
 8008fca:	2508      	movs	r5, #8
 8008fcc:	e7b5      	b.n	8008f3a <__hexnan+0x7a>
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0df      	beq.n	8008f94 <__hexnan+0xd4>
 8008fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd8:	f1c3 0320 	rsb	r3, r3, #32
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fe4:	401a      	ands	r2, r3
 8008fe6:	f846 2c04 	str.w	r2, [r6, #-4]
 8008fea:	e7d3      	b.n	8008f94 <__hexnan+0xd4>
 8008fec:	3f04      	subs	r7, #4
 8008fee:	e7d1      	b.n	8008f94 <__hexnan+0xd4>
 8008ff0:	2004      	movs	r0, #4
 8008ff2:	b007      	add	sp, #28
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ff8 <_localeconv_r>:
 8008ff8:	4800      	ldr	r0, [pc, #0]	; (8008ffc <_localeconv_r+0x4>)
 8008ffa:	4770      	bx	lr
 8008ffc:	20000194 	.word	0x20000194

08009000 <malloc>:
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <malloc+0xc>)
 8009002:	4601      	mov	r1, r0
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	f000 bd65 	b.w	8009ad4 <_malloc_r>
 800900a:	bf00      	nop
 800900c:	2000003c 	.word	0x2000003c

08009010 <__ascii_mbtowc>:
 8009010:	b082      	sub	sp, #8
 8009012:	b901      	cbnz	r1, 8009016 <__ascii_mbtowc+0x6>
 8009014:	a901      	add	r1, sp, #4
 8009016:	b142      	cbz	r2, 800902a <__ascii_mbtowc+0x1a>
 8009018:	b14b      	cbz	r3, 800902e <__ascii_mbtowc+0x1e>
 800901a:	7813      	ldrb	r3, [r2, #0]
 800901c:	600b      	str	r3, [r1, #0]
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	1e10      	subs	r0, r2, #0
 8009022:	bf18      	it	ne
 8009024:	2001      	movne	r0, #1
 8009026:	b002      	add	sp, #8
 8009028:	4770      	bx	lr
 800902a:	4610      	mov	r0, r2
 800902c:	e7fb      	b.n	8009026 <__ascii_mbtowc+0x16>
 800902e:	f06f 0001 	mvn.w	r0, #1
 8009032:	e7f8      	b.n	8009026 <__ascii_mbtowc+0x16>

08009034 <memchr>:
 8009034:	4603      	mov	r3, r0
 8009036:	b510      	push	{r4, lr}
 8009038:	b2c9      	uxtb	r1, r1
 800903a:	4402      	add	r2, r0
 800903c:	4293      	cmp	r3, r2
 800903e:	4618      	mov	r0, r3
 8009040:	d101      	bne.n	8009046 <memchr+0x12>
 8009042:	2000      	movs	r0, #0
 8009044:	e003      	b.n	800904e <memchr+0x1a>
 8009046:	7804      	ldrb	r4, [r0, #0]
 8009048:	3301      	adds	r3, #1
 800904a:	428c      	cmp	r4, r1
 800904c:	d1f6      	bne.n	800903c <memchr+0x8>
 800904e:	bd10      	pop	{r4, pc}

08009050 <memcpy>:
 8009050:	440a      	add	r2, r1
 8009052:	4291      	cmp	r1, r2
 8009054:	f100 33ff 	add.w	r3, r0, #4294967295
 8009058:	d100      	bne.n	800905c <memcpy+0xc>
 800905a:	4770      	bx	lr
 800905c:	b510      	push	{r4, lr}
 800905e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009062:	4291      	cmp	r1, r2
 8009064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009068:	d1f9      	bne.n	800905e <memcpy+0xe>
 800906a:	bd10      	pop	{r4, pc}

0800906c <_Balloc>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	b976      	cbnz	r6, 8009094 <_Balloc+0x28>
 8009076:	2010      	movs	r0, #16
 8009078:	f7ff ffc2 	bl	8009000 <malloc>
 800907c:	4602      	mov	r2, r0
 800907e:	6260      	str	r0, [r4, #36]	; 0x24
 8009080:	b920      	cbnz	r0, 800908c <_Balloc+0x20>
 8009082:	2166      	movs	r1, #102	; 0x66
 8009084:	4b17      	ldr	r3, [pc, #92]	; (80090e4 <_Balloc+0x78>)
 8009086:	4818      	ldr	r0, [pc, #96]	; (80090e8 <_Balloc+0x7c>)
 8009088:	f000 ff2c 	bl	8009ee4 <__assert_func>
 800908c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009090:	6006      	str	r6, [r0, #0]
 8009092:	60c6      	str	r6, [r0, #12]
 8009094:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009096:	68f3      	ldr	r3, [r6, #12]
 8009098:	b183      	cbz	r3, 80090bc <_Balloc+0x50>
 800909a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090a2:	b9b8      	cbnz	r0, 80090d4 <_Balloc+0x68>
 80090a4:	2101      	movs	r1, #1
 80090a6:	fa01 f605 	lsl.w	r6, r1, r5
 80090aa:	1d72      	adds	r2, r6, #5
 80090ac:	4620      	mov	r0, r4
 80090ae:	0092      	lsls	r2, r2, #2
 80090b0:	f000 fc94 	bl	80099dc <_calloc_r>
 80090b4:	b160      	cbz	r0, 80090d0 <_Balloc+0x64>
 80090b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ba:	e00e      	b.n	80090da <_Balloc+0x6e>
 80090bc:	2221      	movs	r2, #33	; 0x21
 80090be:	2104      	movs	r1, #4
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fc8b 	bl	80099dc <_calloc_r>
 80090c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c8:	60f0      	str	r0, [r6, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e4      	bne.n	800909a <_Balloc+0x2e>
 80090d0:	2000      	movs	r0, #0
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	6802      	ldr	r2, [r0, #0]
 80090d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090da:	2300      	movs	r3, #0
 80090dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090e0:	e7f7      	b.n	80090d2 <_Balloc+0x66>
 80090e2:	bf00      	nop
 80090e4:	0800ac5e 	.word	0x0800ac5e
 80090e8:	0800ad5c 	.word	0x0800ad5c

080090ec <_Bfree>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090f0:	4605      	mov	r5, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	b976      	cbnz	r6, 8009114 <_Bfree+0x28>
 80090f6:	2010      	movs	r0, #16
 80090f8:	f7ff ff82 	bl	8009000 <malloc>
 80090fc:	4602      	mov	r2, r0
 80090fe:	6268      	str	r0, [r5, #36]	; 0x24
 8009100:	b920      	cbnz	r0, 800910c <_Bfree+0x20>
 8009102:	218a      	movs	r1, #138	; 0x8a
 8009104:	4b08      	ldr	r3, [pc, #32]	; (8009128 <_Bfree+0x3c>)
 8009106:	4809      	ldr	r0, [pc, #36]	; (800912c <_Bfree+0x40>)
 8009108:	f000 feec 	bl	8009ee4 <__assert_func>
 800910c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009110:	6006      	str	r6, [r0, #0]
 8009112:	60c6      	str	r6, [r0, #12]
 8009114:	b13c      	cbz	r4, 8009126 <_Bfree+0x3a>
 8009116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009118:	6862      	ldr	r2, [r4, #4]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009120:	6021      	str	r1, [r4, #0]
 8009122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	0800ac5e 	.word	0x0800ac5e
 800912c:	0800ad5c 	.word	0x0800ad5c

08009130 <__multadd>:
 8009130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009134:	4607      	mov	r7, r0
 8009136:	460c      	mov	r4, r1
 8009138:	461e      	mov	r6, r3
 800913a:	2000      	movs	r0, #0
 800913c:	690d      	ldr	r5, [r1, #16]
 800913e:	f101 0c14 	add.w	ip, r1, #20
 8009142:	f8dc 3000 	ldr.w	r3, [ip]
 8009146:	3001      	adds	r0, #1
 8009148:	b299      	uxth	r1, r3
 800914a:	fb02 6101 	mla	r1, r2, r1, r6
 800914e:	0c1e      	lsrs	r6, r3, #16
 8009150:	0c0b      	lsrs	r3, r1, #16
 8009152:	fb02 3306 	mla	r3, r2, r6, r3
 8009156:	b289      	uxth	r1, r1
 8009158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800915c:	4285      	cmp	r5, r0
 800915e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009162:	f84c 1b04 	str.w	r1, [ip], #4
 8009166:	dcec      	bgt.n	8009142 <__multadd+0x12>
 8009168:	b30e      	cbz	r6, 80091ae <__multadd+0x7e>
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	42ab      	cmp	r3, r5
 800916e:	dc19      	bgt.n	80091a4 <__multadd+0x74>
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	4638      	mov	r0, r7
 8009174:	3101      	adds	r1, #1
 8009176:	f7ff ff79 	bl	800906c <_Balloc>
 800917a:	4680      	mov	r8, r0
 800917c:	b928      	cbnz	r0, 800918a <__multadd+0x5a>
 800917e:	4602      	mov	r2, r0
 8009180:	21b5      	movs	r1, #181	; 0xb5
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <__multadd+0x84>)
 8009184:	480c      	ldr	r0, [pc, #48]	; (80091b8 <__multadd+0x88>)
 8009186:	f000 fead 	bl	8009ee4 <__assert_func>
 800918a:	6922      	ldr	r2, [r4, #16]
 800918c:	f104 010c 	add.w	r1, r4, #12
 8009190:	3202      	adds	r2, #2
 8009192:	0092      	lsls	r2, r2, #2
 8009194:	300c      	adds	r0, #12
 8009196:	f7ff ff5b 	bl	8009050 <memcpy>
 800919a:	4621      	mov	r1, r4
 800919c:	4638      	mov	r0, r7
 800919e:	f7ff ffa5 	bl	80090ec <_Bfree>
 80091a2:	4644      	mov	r4, r8
 80091a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091a8:	3501      	adds	r5, #1
 80091aa:	615e      	str	r6, [r3, #20]
 80091ac:	6125      	str	r5, [r4, #16]
 80091ae:	4620      	mov	r0, r4
 80091b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b4:	0800acd0 	.word	0x0800acd0
 80091b8:	0800ad5c 	.word	0x0800ad5c

080091bc <__s2b>:
 80091bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c0:	4615      	mov	r5, r2
 80091c2:	2209      	movs	r2, #9
 80091c4:	461f      	mov	r7, r3
 80091c6:	3308      	adds	r3, #8
 80091c8:	460c      	mov	r4, r1
 80091ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80091ce:	4606      	mov	r6, r0
 80091d0:	2201      	movs	r2, #1
 80091d2:	2100      	movs	r1, #0
 80091d4:	429a      	cmp	r2, r3
 80091d6:	db09      	blt.n	80091ec <__s2b+0x30>
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff ff47 	bl	800906c <_Balloc>
 80091de:	b940      	cbnz	r0, 80091f2 <__s2b+0x36>
 80091e0:	4602      	mov	r2, r0
 80091e2:	21ce      	movs	r1, #206	; 0xce
 80091e4:	4b18      	ldr	r3, [pc, #96]	; (8009248 <__s2b+0x8c>)
 80091e6:	4819      	ldr	r0, [pc, #100]	; (800924c <__s2b+0x90>)
 80091e8:	f000 fe7c 	bl	8009ee4 <__assert_func>
 80091ec:	0052      	lsls	r2, r2, #1
 80091ee:	3101      	adds	r1, #1
 80091f0:	e7f0      	b.n	80091d4 <__s2b+0x18>
 80091f2:	9b08      	ldr	r3, [sp, #32]
 80091f4:	2d09      	cmp	r5, #9
 80091f6:	6143      	str	r3, [r0, #20]
 80091f8:	f04f 0301 	mov.w	r3, #1
 80091fc:	6103      	str	r3, [r0, #16]
 80091fe:	dd16      	ble.n	800922e <__s2b+0x72>
 8009200:	f104 0909 	add.w	r9, r4, #9
 8009204:	46c8      	mov	r8, r9
 8009206:	442c      	add	r4, r5
 8009208:	f818 3b01 	ldrb.w	r3, [r8], #1
 800920c:	4601      	mov	r1, r0
 800920e:	220a      	movs	r2, #10
 8009210:	4630      	mov	r0, r6
 8009212:	3b30      	subs	r3, #48	; 0x30
 8009214:	f7ff ff8c 	bl	8009130 <__multadd>
 8009218:	45a0      	cmp	r8, r4
 800921a:	d1f5      	bne.n	8009208 <__s2b+0x4c>
 800921c:	f1a5 0408 	sub.w	r4, r5, #8
 8009220:	444c      	add	r4, r9
 8009222:	1b2d      	subs	r5, r5, r4
 8009224:	1963      	adds	r3, r4, r5
 8009226:	42bb      	cmp	r3, r7
 8009228:	db04      	blt.n	8009234 <__s2b+0x78>
 800922a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922e:	2509      	movs	r5, #9
 8009230:	340a      	adds	r4, #10
 8009232:	e7f6      	b.n	8009222 <__s2b+0x66>
 8009234:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009238:	4601      	mov	r1, r0
 800923a:	220a      	movs	r2, #10
 800923c:	4630      	mov	r0, r6
 800923e:	3b30      	subs	r3, #48	; 0x30
 8009240:	f7ff ff76 	bl	8009130 <__multadd>
 8009244:	e7ee      	b.n	8009224 <__s2b+0x68>
 8009246:	bf00      	nop
 8009248:	0800acd0 	.word	0x0800acd0
 800924c:	0800ad5c 	.word	0x0800ad5c

08009250 <__hi0bits>:
 8009250:	0c02      	lsrs	r2, r0, #16
 8009252:	0412      	lsls	r2, r2, #16
 8009254:	4603      	mov	r3, r0
 8009256:	b9ca      	cbnz	r2, 800928c <__hi0bits+0x3c>
 8009258:	0403      	lsls	r3, r0, #16
 800925a:	2010      	movs	r0, #16
 800925c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009260:	bf04      	itt	eq
 8009262:	021b      	lsleq	r3, r3, #8
 8009264:	3008      	addeq	r0, #8
 8009266:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800926a:	bf04      	itt	eq
 800926c:	011b      	lsleq	r3, r3, #4
 800926e:	3004      	addeq	r0, #4
 8009270:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009274:	bf04      	itt	eq
 8009276:	009b      	lsleq	r3, r3, #2
 8009278:	3002      	addeq	r0, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	db05      	blt.n	800928a <__hi0bits+0x3a>
 800927e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009282:	f100 0001 	add.w	r0, r0, #1
 8009286:	bf08      	it	eq
 8009288:	2020      	moveq	r0, #32
 800928a:	4770      	bx	lr
 800928c:	2000      	movs	r0, #0
 800928e:	e7e5      	b.n	800925c <__hi0bits+0xc>

08009290 <__lo0bits>:
 8009290:	6803      	ldr	r3, [r0, #0]
 8009292:	4602      	mov	r2, r0
 8009294:	f013 0007 	ands.w	r0, r3, #7
 8009298:	d00b      	beq.n	80092b2 <__lo0bits+0x22>
 800929a:	07d9      	lsls	r1, r3, #31
 800929c:	d421      	bmi.n	80092e2 <__lo0bits+0x52>
 800929e:	0798      	lsls	r0, r3, #30
 80092a0:	bf49      	itett	mi
 80092a2:	085b      	lsrmi	r3, r3, #1
 80092a4:	089b      	lsrpl	r3, r3, #2
 80092a6:	2001      	movmi	r0, #1
 80092a8:	6013      	strmi	r3, [r2, #0]
 80092aa:	bf5c      	itt	pl
 80092ac:	2002      	movpl	r0, #2
 80092ae:	6013      	strpl	r3, [r2, #0]
 80092b0:	4770      	bx	lr
 80092b2:	b299      	uxth	r1, r3
 80092b4:	b909      	cbnz	r1, 80092ba <__lo0bits+0x2a>
 80092b6:	2010      	movs	r0, #16
 80092b8:	0c1b      	lsrs	r3, r3, #16
 80092ba:	b2d9      	uxtb	r1, r3
 80092bc:	b909      	cbnz	r1, 80092c2 <__lo0bits+0x32>
 80092be:	3008      	adds	r0, #8
 80092c0:	0a1b      	lsrs	r3, r3, #8
 80092c2:	0719      	lsls	r1, r3, #28
 80092c4:	bf04      	itt	eq
 80092c6:	091b      	lsreq	r3, r3, #4
 80092c8:	3004      	addeq	r0, #4
 80092ca:	0799      	lsls	r1, r3, #30
 80092cc:	bf04      	itt	eq
 80092ce:	089b      	lsreq	r3, r3, #2
 80092d0:	3002      	addeq	r0, #2
 80092d2:	07d9      	lsls	r1, r3, #31
 80092d4:	d403      	bmi.n	80092de <__lo0bits+0x4e>
 80092d6:	085b      	lsrs	r3, r3, #1
 80092d8:	f100 0001 	add.w	r0, r0, #1
 80092dc:	d003      	beq.n	80092e6 <__lo0bits+0x56>
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	4770      	bx	lr
 80092e2:	2000      	movs	r0, #0
 80092e4:	4770      	bx	lr
 80092e6:	2020      	movs	r0, #32
 80092e8:	4770      	bx	lr
	...

080092ec <__i2b>:
 80092ec:	b510      	push	{r4, lr}
 80092ee:	460c      	mov	r4, r1
 80092f0:	2101      	movs	r1, #1
 80092f2:	f7ff febb 	bl	800906c <_Balloc>
 80092f6:	4602      	mov	r2, r0
 80092f8:	b928      	cbnz	r0, 8009306 <__i2b+0x1a>
 80092fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092fe:	4b04      	ldr	r3, [pc, #16]	; (8009310 <__i2b+0x24>)
 8009300:	4804      	ldr	r0, [pc, #16]	; (8009314 <__i2b+0x28>)
 8009302:	f000 fdef 	bl	8009ee4 <__assert_func>
 8009306:	2301      	movs	r3, #1
 8009308:	6144      	str	r4, [r0, #20]
 800930a:	6103      	str	r3, [r0, #16]
 800930c:	bd10      	pop	{r4, pc}
 800930e:	bf00      	nop
 8009310:	0800acd0 	.word	0x0800acd0
 8009314:	0800ad5c 	.word	0x0800ad5c

08009318 <__multiply>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	4691      	mov	r9, r2
 800931e:	690a      	ldr	r2, [r1, #16]
 8009320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009324:	460c      	mov	r4, r1
 8009326:	429a      	cmp	r2, r3
 8009328:	bfbe      	ittt	lt
 800932a:	460b      	movlt	r3, r1
 800932c:	464c      	movlt	r4, r9
 800932e:	4699      	movlt	r9, r3
 8009330:	6927      	ldr	r7, [r4, #16]
 8009332:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	6861      	ldr	r1, [r4, #4]
 800933a:	eb07 060a 	add.w	r6, r7, sl
 800933e:	42b3      	cmp	r3, r6
 8009340:	b085      	sub	sp, #20
 8009342:	bfb8      	it	lt
 8009344:	3101      	addlt	r1, #1
 8009346:	f7ff fe91 	bl	800906c <_Balloc>
 800934a:	b930      	cbnz	r0, 800935a <__multiply+0x42>
 800934c:	4602      	mov	r2, r0
 800934e:	f240 115d 	movw	r1, #349	; 0x15d
 8009352:	4b43      	ldr	r3, [pc, #268]	; (8009460 <__multiply+0x148>)
 8009354:	4843      	ldr	r0, [pc, #268]	; (8009464 <__multiply+0x14c>)
 8009356:	f000 fdc5 	bl	8009ee4 <__assert_func>
 800935a:	f100 0514 	add.w	r5, r0, #20
 800935e:	462b      	mov	r3, r5
 8009360:	2200      	movs	r2, #0
 8009362:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009366:	4543      	cmp	r3, r8
 8009368:	d321      	bcc.n	80093ae <__multiply+0x96>
 800936a:	f104 0314 	add.w	r3, r4, #20
 800936e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009372:	f109 0314 	add.w	r3, r9, #20
 8009376:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800937a:	9202      	str	r2, [sp, #8]
 800937c:	1b3a      	subs	r2, r7, r4
 800937e:	3a15      	subs	r2, #21
 8009380:	f022 0203 	bic.w	r2, r2, #3
 8009384:	3204      	adds	r2, #4
 8009386:	f104 0115 	add.w	r1, r4, #21
 800938a:	428f      	cmp	r7, r1
 800938c:	bf38      	it	cc
 800938e:	2204      	movcc	r2, #4
 8009390:	9201      	str	r2, [sp, #4]
 8009392:	9a02      	ldr	r2, [sp, #8]
 8009394:	9303      	str	r3, [sp, #12]
 8009396:	429a      	cmp	r2, r3
 8009398:	d80c      	bhi.n	80093b4 <__multiply+0x9c>
 800939a:	2e00      	cmp	r6, #0
 800939c:	dd03      	ble.n	80093a6 <__multiply+0x8e>
 800939e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d059      	beq.n	800945a <__multiply+0x142>
 80093a6:	6106      	str	r6, [r0, #16]
 80093a8:	b005      	add	sp, #20
 80093aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ae:	f843 2b04 	str.w	r2, [r3], #4
 80093b2:	e7d8      	b.n	8009366 <__multiply+0x4e>
 80093b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80093b8:	f1ba 0f00 	cmp.w	sl, #0
 80093bc:	d023      	beq.n	8009406 <__multiply+0xee>
 80093be:	46a9      	mov	r9, r5
 80093c0:	f04f 0c00 	mov.w	ip, #0
 80093c4:	f104 0e14 	add.w	lr, r4, #20
 80093c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093cc:	f8d9 1000 	ldr.w	r1, [r9]
 80093d0:	fa1f fb82 	uxth.w	fp, r2
 80093d4:	b289      	uxth	r1, r1
 80093d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80093da:	4461      	add	r1, ip
 80093dc:	f8d9 c000 	ldr.w	ip, [r9]
 80093e0:	0c12      	lsrs	r2, r2, #16
 80093e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80093e6:	fb0a c202 	mla	r2, sl, r2, ip
 80093ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093ee:	b289      	uxth	r1, r1
 80093f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093f4:	4577      	cmp	r7, lr
 80093f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093fa:	f849 1b04 	str.w	r1, [r9], #4
 80093fe:	d8e3      	bhi.n	80093c8 <__multiply+0xb0>
 8009400:	9a01      	ldr	r2, [sp, #4]
 8009402:	f845 c002 	str.w	ip, [r5, r2]
 8009406:	9a03      	ldr	r2, [sp, #12]
 8009408:	3304      	adds	r3, #4
 800940a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800940e:	f1b9 0f00 	cmp.w	r9, #0
 8009412:	d020      	beq.n	8009456 <__multiply+0x13e>
 8009414:	46ae      	mov	lr, r5
 8009416:	f04f 0a00 	mov.w	sl, #0
 800941a:	6829      	ldr	r1, [r5, #0]
 800941c:	f104 0c14 	add.w	ip, r4, #20
 8009420:	f8bc b000 	ldrh.w	fp, [ip]
 8009424:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009428:	b289      	uxth	r1, r1
 800942a:	fb09 220b 	mla	r2, r9, fp, r2
 800942e:	4492      	add	sl, r2
 8009430:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009434:	f84e 1b04 	str.w	r1, [lr], #4
 8009438:	f85c 2b04 	ldr.w	r2, [ip], #4
 800943c:	f8be 1000 	ldrh.w	r1, [lr]
 8009440:	0c12      	lsrs	r2, r2, #16
 8009442:	fb09 1102 	mla	r1, r9, r2, r1
 8009446:	4567      	cmp	r7, ip
 8009448:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800944c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009450:	d8e6      	bhi.n	8009420 <__multiply+0x108>
 8009452:	9a01      	ldr	r2, [sp, #4]
 8009454:	50a9      	str	r1, [r5, r2]
 8009456:	3504      	adds	r5, #4
 8009458:	e79b      	b.n	8009392 <__multiply+0x7a>
 800945a:	3e01      	subs	r6, #1
 800945c:	e79d      	b.n	800939a <__multiply+0x82>
 800945e:	bf00      	nop
 8009460:	0800acd0 	.word	0x0800acd0
 8009464:	0800ad5c 	.word	0x0800ad5c

08009468 <__pow5mult>:
 8009468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800946c:	4615      	mov	r5, r2
 800946e:	f012 0203 	ands.w	r2, r2, #3
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
 8009476:	d007      	beq.n	8009488 <__pow5mult+0x20>
 8009478:	4c25      	ldr	r4, [pc, #148]	; (8009510 <__pow5mult+0xa8>)
 800947a:	3a01      	subs	r2, #1
 800947c:	2300      	movs	r3, #0
 800947e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009482:	f7ff fe55 	bl	8009130 <__multadd>
 8009486:	4607      	mov	r7, r0
 8009488:	10ad      	asrs	r5, r5, #2
 800948a:	d03d      	beq.n	8009508 <__pow5mult+0xa0>
 800948c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800948e:	b97c      	cbnz	r4, 80094b0 <__pow5mult+0x48>
 8009490:	2010      	movs	r0, #16
 8009492:	f7ff fdb5 	bl	8009000 <malloc>
 8009496:	4602      	mov	r2, r0
 8009498:	6270      	str	r0, [r6, #36]	; 0x24
 800949a:	b928      	cbnz	r0, 80094a8 <__pow5mult+0x40>
 800949c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094a0:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <__pow5mult+0xac>)
 80094a2:	481d      	ldr	r0, [pc, #116]	; (8009518 <__pow5mult+0xb0>)
 80094a4:	f000 fd1e 	bl	8009ee4 <__assert_func>
 80094a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094ac:	6004      	str	r4, [r0, #0]
 80094ae:	60c4      	str	r4, [r0, #12]
 80094b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094b8:	b94c      	cbnz	r4, 80094ce <__pow5mult+0x66>
 80094ba:	f240 2171 	movw	r1, #625	; 0x271
 80094be:	4630      	mov	r0, r6
 80094c0:	f7ff ff14 	bl	80092ec <__i2b>
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80094cc:	6003      	str	r3, [r0, #0]
 80094ce:	f04f 0900 	mov.w	r9, #0
 80094d2:	07eb      	lsls	r3, r5, #31
 80094d4:	d50a      	bpl.n	80094ec <__pow5mult+0x84>
 80094d6:	4639      	mov	r1, r7
 80094d8:	4622      	mov	r2, r4
 80094da:	4630      	mov	r0, r6
 80094dc:	f7ff ff1c 	bl	8009318 <__multiply>
 80094e0:	4680      	mov	r8, r0
 80094e2:	4639      	mov	r1, r7
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff fe01 	bl	80090ec <_Bfree>
 80094ea:	4647      	mov	r7, r8
 80094ec:	106d      	asrs	r5, r5, #1
 80094ee:	d00b      	beq.n	8009508 <__pow5mult+0xa0>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	b938      	cbnz	r0, 8009504 <__pow5mult+0x9c>
 80094f4:	4622      	mov	r2, r4
 80094f6:	4621      	mov	r1, r4
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7ff ff0d 	bl	8009318 <__multiply>
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	f8c0 9000 	str.w	r9, [r0]
 8009504:	4604      	mov	r4, r0
 8009506:	e7e4      	b.n	80094d2 <__pow5mult+0x6a>
 8009508:	4638      	mov	r0, r7
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950e:	bf00      	nop
 8009510:	0800aea8 	.word	0x0800aea8
 8009514:	0800ac5e 	.word	0x0800ac5e
 8009518:	0800ad5c 	.word	0x0800ad5c

0800951c <__lshift>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	4607      	mov	r7, r0
 8009524:	4691      	mov	r9, r2
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	6849      	ldr	r1, [r1, #4]
 800952a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800952e:	68a3      	ldr	r3, [r4, #8]
 8009530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009534:	f108 0601 	add.w	r6, r8, #1
 8009538:	42b3      	cmp	r3, r6
 800953a:	db0b      	blt.n	8009554 <__lshift+0x38>
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff fd95 	bl	800906c <_Balloc>
 8009542:	4605      	mov	r5, r0
 8009544:	b948      	cbnz	r0, 800955a <__lshift+0x3e>
 8009546:	4602      	mov	r2, r0
 8009548:	f240 11d9 	movw	r1, #473	; 0x1d9
 800954c:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <__lshift+0xd8>)
 800954e:	482a      	ldr	r0, [pc, #168]	; (80095f8 <__lshift+0xdc>)
 8009550:	f000 fcc8 	bl	8009ee4 <__assert_func>
 8009554:	3101      	adds	r1, #1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	e7ee      	b.n	8009538 <__lshift+0x1c>
 800955a:	2300      	movs	r3, #0
 800955c:	f100 0114 	add.w	r1, r0, #20
 8009560:	f100 0210 	add.w	r2, r0, #16
 8009564:	4618      	mov	r0, r3
 8009566:	4553      	cmp	r3, sl
 8009568:	db37      	blt.n	80095da <__lshift+0xbe>
 800956a:	6920      	ldr	r0, [r4, #16]
 800956c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009570:	f104 0314 	add.w	r3, r4, #20
 8009574:	f019 091f 	ands.w	r9, r9, #31
 8009578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800957c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009580:	d02f      	beq.n	80095e2 <__lshift+0xc6>
 8009582:	468a      	mov	sl, r1
 8009584:	f04f 0c00 	mov.w	ip, #0
 8009588:	f1c9 0e20 	rsb	lr, r9, #32
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	fa02 f209 	lsl.w	r2, r2, r9
 8009592:	ea42 020c 	orr.w	r2, r2, ip
 8009596:	f84a 2b04 	str.w	r2, [sl], #4
 800959a:	f853 2b04 	ldr.w	r2, [r3], #4
 800959e:	4298      	cmp	r0, r3
 80095a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80095a4:	d8f2      	bhi.n	800958c <__lshift+0x70>
 80095a6:	1b03      	subs	r3, r0, r4
 80095a8:	3b15      	subs	r3, #21
 80095aa:	f023 0303 	bic.w	r3, r3, #3
 80095ae:	3304      	adds	r3, #4
 80095b0:	f104 0215 	add.w	r2, r4, #21
 80095b4:	4290      	cmp	r0, r2
 80095b6:	bf38      	it	cc
 80095b8:	2304      	movcc	r3, #4
 80095ba:	f841 c003 	str.w	ip, [r1, r3]
 80095be:	f1bc 0f00 	cmp.w	ip, #0
 80095c2:	d001      	beq.n	80095c8 <__lshift+0xac>
 80095c4:	f108 0602 	add.w	r6, r8, #2
 80095c8:	3e01      	subs	r6, #1
 80095ca:	4638      	mov	r0, r7
 80095cc:	4621      	mov	r1, r4
 80095ce:	612e      	str	r6, [r5, #16]
 80095d0:	f7ff fd8c 	bl	80090ec <_Bfree>
 80095d4:	4628      	mov	r0, r5
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	f842 0f04 	str.w	r0, [r2, #4]!
 80095de:	3301      	adds	r3, #1
 80095e0:	e7c1      	b.n	8009566 <__lshift+0x4a>
 80095e2:	3904      	subs	r1, #4
 80095e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e8:	4298      	cmp	r0, r3
 80095ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80095ee:	d8f9      	bhi.n	80095e4 <__lshift+0xc8>
 80095f0:	e7ea      	b.n	80095c8 <__lshift+0xac>
 80095f2:	bf00      	nop
 80095f4:	0800acd0 	.word	0x0800acd0
 80095f8:	0800ad5c 	.word	0x0800ad5c

080095fc <__mcmp>:
 80095fc:	4603      	mov	r3, r0
 80095fe:	690a      	ldr	r2, [r1, #16]
 8009600:	6900      	ldr	r0, [r0, #16]
 8009602:	b530      	push	{r4, r5, lr}
 8009604:	1a80      	subs	r0, r0, r2
 8009606:	d10d      	bne.n	8009624 <__mcmp+0x28>
 8009608:	3314      	adds	r3, #20
 800960a:	3114      	adds	r1, #20
 800960c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009610:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009614:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009618:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800961c:	4295      	cmp	r5, r2
 800961e:	d002      	beq.n	8009626 <__mcmp+0x2a>
 8009620:	d304      	bcc.n	800962c <__mcmp+0x30>
 8009622:	2001      	movs	r0, #1
 8009624:	bd30      	pop	{r4, r5, pc}
 8009626:	42a3      	cmp	r3, r4
 8009628:	d3f4      	bcc.n	8009614 <__mcmp+0x18>
 800962a:	e7fb      	b.n	8009624 <__mcmp+0x28>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	e7f8      	b.n	8009624 <__mcmp+0x28>
	...

08009634 <__mdiff>:
 8009634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	460d      	mov	r5, r1
 800963a:	4607      	mov	r7, r0
 800963c:	4611      	mov	r1, r2
 800963e:	4628      	mov	r0, r5
 8009640:	4614      	mov	r4, r2
 8009642:	f7ff ffdb 	bl	80095fc <__mcmp>
 8009646:	1e06      	subs	r6, r0, #0
 8009648:	d111      	bne.n	800966e <__mdiff+0x3a>
 800964a:	4631      	mov	r1, r6
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff fd0d 	bl	800906c <_Balloc>
 8009652:	4602      	mov	r2, r0
 8009654:	b928      	cbnz	r0, 8009662 <__mdiff+0x2e>
 8009656:	f240 2132 	movw	r1, #562	; 0x232
 800965a:	4b3a      	ldr	r3, [pc, #232]	; (8009744 <__mdiff+0x110>)
 800965c:	483a      	ldr	r0, [pc, #232]	; (8009748 <__mdiff+0x114>)
 800965e:	f000 fc41 	bl	8009ee4 <__assert_func>
 8009662:	2301      	movs	r3, #1
 8009664:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009668:	4610      	mov	r0, r2
 800966a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	bfa4      	itt	ge
 8009670:	4623      	movge	r3, r4
 8009672:	462c      	movge	r4, r5
 8009674:	4638      	mov	r0, r7
 8009676:	6861      	ldr	r1, [r4, #4]
 8009678:	bfa6      	itte	ge
 800967a:	461d      	movge	r5, r3
 800967c:	2600      	movge	r6, #0
 800967e:	2601      	movlt	r6, #1
 8009680:	f7ff fcf4 	bl	800906c <_Balloc>
 8009684:	4602      	mov	r2, r0
 8009686:	b918      	cbnz	r0, 8009690 <__mdiff+0x5c>
 8009688:	f44f 7110 	mov.w	r1, #576	; 0x240
 800968c:	4b2d      	ldr	r3, [pc, #180]	; (8009744 <__mdiff+0x110>)
 800968e:	e7e5      	b.n	800965c <__mdiff+0x28>
 8009690:	f102 0814 	add.w	r8, r2, #20
 8009694:	46c2      	mov	sl, r8
 8009696:	f04f 0c00 	mov.w	ip, #0
 800969a:	6927      	ldr	r7, [r4, #16]
 800969c:	60c6      	str	r6, [r0, #12]
 800969e:	692e      	ldr	r6, [r5, #16]
 80096a0:	f104 0014 	add.w	r0, r4, #20
 80096a4:	f105 0914 	add.w	r9, r5, #20
 80096a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80096ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096b0:	3410      	adds	r4, #16
 80096b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80096b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80096ba:	fa1f f18b 	uxth.w	r1, fp
 80096be:	448c      	add	ip, r1
 80096c0:	b299      	uxth	r1, r3
 80096c2:	0c1b      	lsrs	r3, r3, #16
 80096c4:	ebac 0101 	sub.w	r1, ip, r1
 80096c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80096d0:	b289      	uxth	r1, r1
 80096d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80096d6:	454e      	cmp	r6, r9
 80096d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80096dc:	f84a 3b04 	str.w	r3, [sl], #4
 80096e0:	d8e7      	bhi.n	80096b2 <__mdiff+0x7e>
 80096e2:	1b73      	subs	r3, r6, r5
 80096e4:	3b15      	subs	r3, #21
 80096e6:	f023 0303 	bic.w	r3, r3, #3
 80096ea:	3515      	adds	r5, #21
 80096ec:	3304      	adds	r3, #4
 80096ee:	42ae      	cmp	r6, r5
 80096f0:	bf38      	it	cc
 80096f2:	2304      	movcc	r3, #4
 80096f4:	4418      	add	r0, r3
 80096f6:	4443      	add	r3, r8
 80096f8:	461e      	mov	r6, r3
 80096fa:	4605      	mov	r5, r0
 80096fc:	4575      	cmp	r5, lr
 80096fe:	d30e      	bcc.n	800971e <__mdiff+0xea>
 8009700:	f10e 0103 	add.w	r1, lr, #3
 8009704:	1a09      	subs	r1, r1, r0
 8009706:	f021 0103 	bic.w	r1, r1, #3
 800970a:	3803      	subs	r0, #3
 800970c:	4586      	cmp	lr, r0
 800970e:	bf38      	it	cc
 8009710:	2100      	movcc	r1, #0
 8009712:	4419      	add	r1, r3
 8009714:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009718:	b18b      	cbz	r3, 800973e <__mdiff+0x10a>
 800971a:	6117      	str	r7, [r2, #16]
 800971c:	e7a4      	b.n	8009668 <__mdiff+0x34>
 800971e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009722:	fa1f f188 	uxth.w	r1, r8
 8009726:	4461      	add	r1, ip
 8009728:	140c      	asrs	r4, r1, #16
 800972a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800972e:	b289      	uxth	r1, r1
 8009730:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009734:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009738:	f846 1b04 	str.w	r1, [r6], #4
 800973c:	e7de      	b.n	80096fc <__mdiff+0xc8>
 800973e:	3f01      	subs	r7, #1
 8009740:	e7e8      	b.n	8009714 <__mdiff+0xe0>
 8009742:	bf00      	nop
 8009744:	0800acd0 	.word	0x0800acd0
 8009748:	0800ad5c 	.word	0x0800ad5c

0800974c <__ulp>:
 800974c:	4b11      	ldr	r3, [pc, #68]	; (8009794 <__ulp+0x48>)
 800974e:	400b      	ands	r3, r1
 8009750:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd02      	ble.n	800975e <__ulp+0x12>
 8009758:	2000      	movs	r0, #0
 800975a:	4619      	mov	r1, r3
 800975c:	4770      	bx	lr
 800975e:	425b      	negs	r3, r3
 8009760:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009764:	f04f 0000 	mov.w	r0, #0
 8009768:	f04f 0100 	mov.w	r1, #0
 800976c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009770:	da04      	bge.n	800977c <__ulp+0x30>
 8009772:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009776:	fa43 f102 	asr.w	r1, r3, r2
 800977a:	4770      	bx	lr
 800977c:	f1a2 0314 	sub.w	r3, r2, #20
 8009780:	2b1e      	cmp	r3, #30
 8009782:	bfd6      	itet	le
 8009784:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009788:	2301      	movgt	r3, #1
 800978a:	fa22 f303 	lsrle.w	r3, r2, r3
 800978e:	4618      	mov	r0, r3
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	7ff00000 	.word	0x7ff00000

08009798 <__b2d>:
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	6907      	ldr	r7, [r0, #16]
 800979e:	f100 0914 	add.w	r9, r0, #20
 80097a2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80097a6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80097aa:	f1a7 0804 	sub.w	r8, r7, #4
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7ff fd4e 	bl	8009250 <__hi0bits>
 80097b4:	f1c0 0320 	rsb	r3, r0, #32
 80097b8:	280a      	cmp	r0, #10
 80097ba:	600b      	str	r3, [r1, #0]
 80097bc:	491f      	ldr	r1, [pc, #124]	; (800983c <__b2d+0xa4>)
 80097be:	dc17      	bgt.n	80097f0 <__b2d+0x58>
 80097c0:	45c1      	cmp	r9, r8
 80097c2:	bf28      	it	cs
 80097c4:	2200      	movcs	r2, #0
 80097c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80097ca:	fa26 f30c 	lsr.w	r3, r6, ip
 80097ce:	bf38      	it	cc
 80097d0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80097d4:	ea43 0501 	orr.w	r5, r3, r1
 80097d8:	f100 0315 	add.w	r3, r0, #21
 80097dc:	fa06 f303 	lsl.w	r3, r6, r3
 80097e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80097e4:	ea43 0402 	orr.w	r4, r3, r2
 80097e8:	4620      	mov	r0, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f0:	45c1      	cmp	r9, r8
 80097f2:	bf2e      	itee	cs
 80097f4:	2200      	movcs	r2, #0
 80097f6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80097fa:	f1a7 0808 	subcc.w	r8, r7, #8
 80097fe:	f1b0 030b 	subs.w	r3, r0, #11
 8009802:	d016      	beq.n	8009832 <__b2d+0x9a>
 8009804:	f1c3 0720 	rsb	r7, r3, #32
 8009808:	fa22 f107 	lsr.w	r1, r2, r7
 800980c:	45c8      	cmp	r8, r9
 800980e:	fa06 f603 	lsl.w	r6, r6, r3
 8009812:	ea46 0601 	orr.w	r6, r6, r1
 8009816:	bf94      	ite	ls
 8009818:	2100      	movls	r1, #0
 800981a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800981e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009822:	fa02 f003 	lsl.w	r0, r2, r3
 8009826:	40f9      	lsrs	r1, r7
 8009828:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800982c:	ea40 0401 	orr.w	r4, r0, r1
 8009830:	e7da      	b.n	80097e8 <__b2d+0x50>
 8009832:	4614      	mov	r4, r2
 8009834:	ea46 0501 	orr.w	r5, r6, r1
 8009838:	e7d6      	b.n	80097e8 <__b2d+0x50>
 800983a:	bf00      	nop
 800983c:	3ff00000 	.word	0x3ff00000

08009840 <__d2b>:
 8009840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009844:	2101      	movs	r1, #1
 8009846:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800984a:	4690      	mov	r8, r2
 800984c:	461d      	mov	r5, r3
 800984e:	f7ff fc0d 	bl	800906c <_Balloc>
 8009852:	4604      	mov	r4, r0
 8009854:	b930      	cbnz	r0, 8009864 <__d2b+0x24>
 8009856:	4602      	mov	r2, r0
 8009858:	f240 310a 	movw	r1, #778	; 0x30a
 800985c:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <__d2b+0xb0>)
 800985e:	4825      	ldr	r0, [pc, #148]	; (80098f4 <__d2b+0xb4>)
 8009860:	f000 fb40 	bl	8009ee4 <__assert_func>
 8009864:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009868:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800986c:	bb2d      	cbnz	r5, 80098ba <__d2b+0x7a>
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	f1b8 0300 	subs.w	r3, r8, #0
 8009874:	d026      	beq.n	80098c4 <__d2b+0x84>
 8009876:	4668      	mov	r0, sp
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	f7ff fd09 	bl	8009290 <__lo0bits>
 800987e:	9900      	ldr	r1, [sp, #0]
 8009880:	b1f0      	cbz	r0, 80098c0 <__d2b+0x80>
 8009882:	9a01      	ldr	r2, [sp, #4]
 8009884:	f1c0 0320 	rsb	r3, r0, #32
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	430b      	orrs	r3, r1
 800988e:	40c2      	lsrs	r2, r0
 8009890:	6163      	str	r3, [r4, #20]
 8009892:	9201      	str	r2, [sp, #4]
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	bf14      	ite	ne
 800989a:	2102      	movne	r1, #2
 800989c:	2101      	moveq	r1, #1
 800989e:	61a3      	str	r3, [r4, #24]
 80098a0:	6121      	str	r1, [r4, #16]
 80098a2:	b1c5      	cbz	r5, 80098d6 <__d2b+0x96>
 80098a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098a8:	4405      	add	r5, r0
 80098aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098ae:	603d      	str	r5, [r7, #0]
 80098b0:	6030      	str	r0, [r6, #0]
 80098b2:	4620      	mov	r0, r4
 80098b4:	b002      	add	sp, #8
 80098b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098be:	e7d6      	b.n	800986e <__d2b+0x2e>
 80098c0:	6161      	str	r1, [r4, #20]
 80098c2:	e7e7      	b.n	8009894 <__d2b+0x54>
 80098c4:	a801      	add	r0, sp, #4
 80098c6:	f7ff fce3 	bl	8009290 <__lo0bits>
 80098ca:	2101      	movs	r1, #1
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	6121      	str	r1, [r4, #16]
 80098d0:	6163      	str	r3, [r4, #20]
 80098d2:	3020      	adds	r0, #32
 80098d4:	e7e5      	b.n	80098a2 <__d2b+0x62>
 80098d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80098da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098de:	6038      	str	r0, [r7, #0]
 80098e0:	6918      	ldr	r0, [r3, #16]
 80098e2:	f7ff fcb5 	bl	8009250 <__hi0bits>
 80098e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80098ea:	6031      	str	r1, [r6, #0]
 80098ec:	e7e1      	b.n	80098b2 <__d2b+0x72>
 80098ee:	bf00      	nop
 80098f0:	0800acd0 	.word	0x0800acd0
 80098f4:	0800ad5c 	.word	0x0800ad5c

080098f8 <__ratio>:
 80098f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4688      	mov	r8, r1
 80098fe:	4669      	mov	r1, sp
 8009900:	4681      	mov	r9, r0
 8009902:	f7ff ff49 	bl	8009798 <__b2d>
 8009906:	460f      	mov	r7, r1
 8009908:	4604      	mov	r4, r0
 800990a:	460d      	mov	r5, r1
 800990c:	4640      	mov	r0, r8
 800990e:	a901      	add	r1, sp, #4
 8009910:	f7ff ff42 	bl	8009798 <__b2d>
 8009914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009918:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800991c:	468b      	mov	fp, r1
 800991e:	eba3 0c02 	sub.w	ip, r3, r2
 8009922:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009926:	1a9b      	subs	r3, r3, r2
 8009928:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800992c:	2b00      	cmp	r3, #0
 800992e:	bfd5      	itete	le
 8009930:	460a      	movle	r2, r1
 8009932:	462a      	movgt	r2, r5
 8009934:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009938:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800993c:	bfd8      	it	le
 800993e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009942:	465b      	mov	r3, fp
 8009944:	4602      	mov	r2, r0
 8009946:	4639      	mov	r1, r7
 8009948:	4620      	mov	r0, r4
 800994a:	f7f6 feef 	bl	800072c <__aeabi_ddiv>
 800994e:	b003      	add	sp, #12
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009954 <__copybits>:
 8009954:	3901      	subs	r1, #1
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	1149      	asrs	r1, r1, #5
 800995a:	6914      	ldr	r4, [r2, #16]
 800995c:	3101      	adds	r1, #1
 800995e:	f102 0314 	add.w	r3, r2, #20
 8009962:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009966:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800996a:	1f05      	subs	r5, r0, #4
 800996c:	42a3      	cmp	r3, r4
 800996e:	d30c      	bcc.n	800998a <__copybits+0x36>
 8009970:	1aa3      	subs	r3, r4, r2
 8009972:	3b11      	subs	r3, #17
 8009974:	f023 0303 	bic.w	r3, r3, #3
 8009978:	3211      	adds	r2, #17
 800997a:	42a2      	cmp	r2, r4
 800997c:	bf88      	it	hi
 800997e:	2300      	movhi	r3, #0
 8009980:	4418      	add	r0, r3
 8009982:	2300      	movs	r3, #0
 8009984:	4288      	cmp	r0, r1
 8009986:	d305      	bcc.n	8009994 <__copybits+0x40>
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	f853 6b04 	ldr.w	r6, [r3], #4
 800998e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009992:	e7eb      	b.n	800996c <__copybits+0x18>
 8009994:	f840 3b04 	str.w	r3, [r0], #4
 8009998:	e7f4      	b.n	8009984 <__copybits+0x30>

0800999a <__any_on>:
 800999a:	f100 0214 	add.w	r2, r0, #20
 800999e:	6900      	ldr	r0, [r0, #16]
 80099a0:	114b      	asrs	r3, r1, #5
 80099a2:	4298      	cmp	r0, r3
 80099a4:	b510      	push	{r4, lr}
 80099a6:	db11      	blt.n	80099cc <__any_on+0x32>
 80099a8:	dd0a      	ble.n	80099c0 <__any_on+0x26>
 80099aa:	f011 011f 	ands.w	r1, r1, #31
 80099ae:	d007      	beq.n	80099c0 <__any_on+0x26>
 80099b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099b4:	fa24 f001 	lsr.w	r0, r4, r1
 80099b8:	fa00 f101 	lsl.w	r1, r0, r1
 80099bc:	428c      	cmp	r4, r1
 80099be:	d10b      	bne.n	80099d8 <__any_on+0x3e>
 80099c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d803      	bhi.n	80099d0 <__any_on+0x36>
 80099c8:	2000      	movs	r0, #0
 80099ca:	bd10      	pop	{r4, pc}
 80099cc:	4603      	mov	r3, r0
 80099ce:	e7f7      	b.n	80099c0 <__any_on+0x26>
 80099d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d0f5      	beq.n	80099c4 <__any_on+0x2a>
 80099d8:	2001      	movs	r0, #1
 80099da:	e7f6      	b.n	80099ca <__any_on+0x30>

080099dc <_calloc_r>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	fba1 5402 	umull	r5, r4, r1, r2
 80099e2:	b934      	cbnz	r4, 80099f2 <_calloc_r+0x16>
 80099e4:	4629      	mov	r1, r5
 80099e6:	f000 f875 	bl	8009ad4 <_malloc_r>
 80099ea:	4606      	mov	r6, r0
 80099ec:	b928      	cbnz	r0, 80099fa <_calloc_r+0x1e>
 80099ee:	4630      	mov	r0, r6
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
 80099f2:	220c      	movs	r2, #12
 80099f4:	2600      	movs	r6, #0
 80099f6:	6002      	str	r2, [r0, #0]
 80099f8:	e7f9      	b.n	80099ee <_calloc_r+0x12>
 80099fa:	462a      	mov	r2, r5
 80099fc:	4621      	mov	r1, r4
 80099fe:	f7fc fbf3 	bl	80061e8 <memset>
 8009a02:	e7f4      	b.n	80099ee <_calloc_r+0x12>

08009a04 <_free_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4605      	mov	r5, r0
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d040      	beq.n	8009a8e <_free_r+0x8a>
 8009a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a10:	1f0c      	subs	r4, r1, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfb8      	it	lt
 8009a16:	18e4      	addlt	r4, r4, r3
 8009a18:	f000 faae 	bl	8009f78 <__malloc_lock>
 8009a1c:	4a1c      	ldr	r2, [pc, #112]	; (8009a90 <_free_r+0x8c>)
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	b933      	cbnz	r3, 8009a30 <_free_r+0x2c>
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	6014      	str	r4, [r2, #0]
 8009a26:	4628      	mov	r0, r5
 8009a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2c:	f000 baaa 	b.w	8009f84 <__malloc_unlock>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d908      	bls.n	8009a46 <_free_r+0x42>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf01      	itttt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	1809      	addeq	r1, r1, r0
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	e7ed      	b.n	8009a22 <_free_r+0x1e>
 8009a46:	461a      	mov	r2, r3
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b10b      	cbz	r3, 8009a50 <_free_r+0x4c>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d9fa      	bls.n	8009a46 <_free_r+0x42>
 8009a50:	6811      	ldr	r1, [r2, #0]
 8009a52:	1850      	adds	r0, r2, r1
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d10b      	bne.n	8009a70 <_free_r+0x6c>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	4401      	add	r1, r0
 8009a5c:	1850      	adds	r0, r2, r1
 8009a5e:	4283      	cmp	r3, r0
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	d1e0      	bne.n	8009a26 <_free_r+0x22>
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4401      	add	r1, r0
 8009a6a:	6011      	str	r1, [r2, #0]
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	e7da      	b.n	8009a26 <_free_r+0x22>
 8009a70:	d902      	bls.n	8009a78 <_free_r+0x74>
 8009a72:	230c      	movs	r3, #12
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	e7d6      	b.n	8009a26 <_free_r+0x22>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	1821      	adds	r1, r4, r0
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf01      	itttt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	6054      	str	r4, [r2, #4]
 8009a8c:	e7cb      	b.n	8009a26 <_free_r+0x22>
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20000498 	.word	0x20000498

08009a94 <sbrk_aligned>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	4e0e      	ldr	r6, [pc, #56]	; (8009ad0 <sbrk_aligned+0x3c>)
 8009a98:	460c      	mov	r4, r1
 8009a9a:	6831      	ldr	r1, [r6, #0]
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	b911      	cbnz	r1, 8009aa6 <sbrk_aligned+0x12>
 8009aa0:	f000 f9ee 	bl	8009e80 <_sbrk_r>
 8009aa4:	6030      	str	r0, [r6, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 f9e9 	bl	8009e80 <_sbrk_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d00a      	beq.n	8009ac8 <sbrk_aligned+0x34>
 8009ab2:	1cc4      	adds	r4, r0, #3
 8009ab4:	f024 0403 	bic.w	r4, r4, #3
 8009ab8:	42a0      	cmp	r0, r4
 8009aba:	d007      	beq.n	8009acc <sbrk_aligned+0x38>
 8009abc:	1a21      	subs	r1, r4, r0
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 f9de 	bl	8009e80 <_sbrk_r>
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d101      	bne.n	8009acc <sbrk_aligned+0x38>
 8009ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8009acc:	4620      	mov	r0, r4
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	2000049c 	.word	0x2000049c

08009ad4 <_malloc_r>:
 8009ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	1ccd      	adds	r5, r1, #3
 8009ada:	f025 0503 	bic.w	r5, r5, #3
 8009ade:	3508      	adds	r5, #8
 8009ae0:	2d0c      	cmp	r5, #12
 8009ae2:	bf38      	it	cc
 8009ae4:	250c      	movcc	r5, #12
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	4607      	mov	r7, r0
 8009aea:	db01      	blt.n	8009af0 <_malloc_r+0x1c>
 8009aec:	42a9      	cmp	r1, r5
 8009aee:	d905      	bls.n	8009afc <_malloc_r+0x28>
 8009af0:	230c      	movs	r3, #12
 8009af2:	2600      	movs	r6, #0
 8009af4:	603b      	str	r3, [r7, #0]
 8009af6:	4630      	mov	r0, r6
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	4e2e      	ldr	r6, [pc, #184]	; (8009bb8 <_malloc_r+0xe4>)
 8009afe:	f000 fa3b 	bl	8009f78 <__malloc_lock>
 8009b02:	6833      	ldr	r3, [r6, #0]
 8009b04:	461c      	mov	r4, r3
 8009b06:	bb34      	cbnz	r4, 8009b56 <_malloc_r+0x82>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff ffc2 	bl	8009a94 <sbrk_aligned>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	4604      	mov	r4, r0
 8009b14:	d14d      	bne.n	8009bb2 <_malloc_r+0xde>
 8009b16:	6834      	ldr	r4, [r6, #0]
 8009b18:	4626      	mov	r6, r4
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	d140      	bne.n	8009ba0 <_malloc_r+0xcc>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	4631      	mov	r1, r6
 8009b22:	4638      	mov	r0, r7
 8009b24:	eb04 0803 	add.w	r8, r4, r3
 8009b28:	f000 f9aa 	bl	8009e80 <_sbrk_r>
 8009b2c:	4580      	cmp	r8, r0
 8009b2e:	d13a      	bne.n	8009ba6 <_malloc_r+0xd2>
 8009b30:	6821      	ldr	r1, [r4, #0]
 8009b32:	3503      	adds	r5, #3
 8009b34:	1a6d      	subs	r5, r5, r1
 8009b36:	f025 0503 	bic.w	r5, r5, #3
 8009b3a:	3508      	adds	r5, #8
 8009b3c:	2d0c      	cmp	r5, #12
 8009b3e:	bf38      	it	cc
 8009b40:	250c      	movcc	r5, #12
 8009b42:	4638      	mov	r0, r7
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7ff ffa5 	bl	8009a94 <sbrk_aligned>
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d02b      	beq.n	8009ba6 <_malloc_r+0xd2>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	442b      	add	r3, r5
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	e00e      	b.n	8009b74 <_malloc_r+0xa0>
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	1b52      	subs	r2, r2, r5
 8009b5a:	d41e      	bmi.n	8009b9a <_malloc_r+0xc6>
 8009b5c:	2a0b      	cmp	r2, #11
 8009b5e:	d916      	bls.n	8009b8e <_malloc_r+0xba>
 8009b60:	1961      	adds	r1, r4, r5
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	6025      	str	r5, [r4, #0]
 8009b66:	bf18      	it	ne
 8009b68:	6059      	strne	r1, [r3, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	bf08      	it	eq
 8009b6e:	6031      	streq	r1, [r6, #0]
 8009b70:	5162      	str	r2, [r4, r5]
 8009b72:	604b      	str	r3, [r1, #4]
 8009b74:	4638      	mov	r0, r7
 8009b76:	f104 060b 	add.w	r6, r4, #11
 8009b7a:	f000 fa03 	bl	8009f84 <__malloc_unlock>
 8009b7e:	f026 0607 	bic.w	r6, r6, #7
 8009b82:	1d23      	adds	r3, r4, #4
 8009b84:	1af2      	subs	r2, r6, r3
 8009b86:	d0b6      	beq.n	8009af6 <_malloc_r+0x22>
 8009b88:	1b9b      	subs	r3, r3, r6
 8009b8a:	50a3      	str	r3, [r4, r2]
 8009b8c:	e7b3      	b.n	8009af6 <_malloc_r+0x22>
 8009b8e:	6862      	ldr	r2, [r4, #4]
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	bf0c      	ite	eq
 8009b94:	6032      	streq	r2, [r6, #0]
 8009b96:	605a      	strne	r2, [r3, #4]
 8009b98:	e7ec      	b.n	8009b74 <_malloc_r+0xa0>
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	6864      	ldr	r4, [r4, #4]
 8009b9e:	e7b2      	b.n	8009b06 <_malloc_r+0x32>
 8009ba0:	4634      	mov	r4, r6
 8009ba2:	6876      	ldr	r6, [r6, #4]
 8009ba4:	e7b9      	b.n	8009b1a <_malloc_r+0x46>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	4638      	mov	r0, r7
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	f000 f9ea 	bl	8009f84 <__malloc_unlock>
 8009bb0:	e7a1      	b.n	8009af6 <_malloc_r+0x22>
 8009bb2:	6025      	str	r5, [r4, #0]
 8009bb4:	e7de      	b.n	8009b74 <_malloc_r+0xa0>
 8009bb6:	bf00      	nop
 8009bb8:	20000498 	.word	0x20000498

08009bbc <__ssputs_r>:
 8009bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	688e      	ldr	r6, [r1, #8]
 8009bc2:	4682      	mov	sl, r0
 8009bc4:	429e      	cmp	r6, r3
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4690      	mov	r8, r2
 8009bca:	461f      	mov	r7, r3
 8009bcc:	d838      	bhi.n	8009c40 <__ssputs_r+0x84>
 8009bce:	898a      	ldrh	r2, [r1, #12]
 8009bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bd4:	d032      	beq.n	8009c3c <__ssputs_r+0x80>
 8009bd6:	6825      	ldr	r5, [r4, #0]
 8009bd8:	6909      	ldr	r1, [r1, #16]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	eba5 0901 	sub.w	r9, r5, r1
 8009be0:	6965      	ldr	r5, [r4, #20]
 8009be2:	444b      	add	r3, r9
 8009be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bec:	106d      	asrs	r5, r5, #1
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	bf38      	it	cc
 8009bf2:	461d      	movcc	r5, r3
 8009bf4:	0553      	lsls	r3, r2, #21
 8009bf6:	d531      	bpl.n	8009c5c <__ssputs_r+0xa0>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7ff ff6b 	bl	8009ad4 <_malloc_r>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	b950      	cbnz	r0, 8009c18 <__ssputs_r+0x5c>
 8009c02:	230c      	movs	r3, #12
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	f8ca 3000 	str.w	r3, [sl]
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	464a      	mov	r2, r9
 8009c1a:	6921      	ldr	r1, [r4, #16]
 8009c1c:	f7ff fa18 	bl	8009050 <memcpy>
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c2a:	81a3      	strh	r3, [r4, #12]
 8009c2c:	6126      	str	r6, [r4, #16]
 8009c2e:	444e      	add	r6, r9
 8009c30:	6026      	str	r6, [r4, #0]
 8009c32:	463e      	mov	r6, r7
 8009c34:	6165      	str	r5, [r4, #20]
 8009c36:	eba5 0509 	sub.w	r5, r5, r9
 8009c3a:	60a5      	str	r5, [r4, #8]
 8009c3c:	42be      	cmp	r6, r7
 8009c3e:	d900      	bls.n	8009c42 <__ssputs_r+0x86>
 8009c40:	463e      	mov	r6, r7
 8009c42:	4632      	mov	r2, r6
 8009c44:	4641      	mov	r1, r8
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	f000 f97c 	bl	8009f44 <memmove>
 8009c4c:	68a3      	ldr	r3, [r4, #8]
 8009c4e:	2000      	movs	r0, #0
 8009c50:	1b9b      	subs	r3, r3, r6
 8009c52:	60a3      	str	r3, [r4, #8]
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	4433      	add	r3, r6
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	e7db      	b.n	8009c14 <__ssputs_r+0x58>
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	f000 f997 	bl	8009f90 <_realloc_r>
 8009c62:	4606      	mov	r6, r0
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d1e1      	bne.n	8009c2c <__ssputs_r+0x70>
 8009c68:	4650      	mov	r0, sl
 8009c6a:	6921      	ldr	r1, [r4, #16]
 8009c6c:	f7ff feca 	bl	8009a04 <_free_r>
 8009c70:	e7c7      	b.n	8009c02 <__ssputs_r+0x46>
	...

08009c74 <_svfiprintf_r>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	4698      	mov	r8, r3
 8009c7a:	898b      	ldrh	r3, [r1, #12]
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	061b      	lsls	r3, r3, #24
 8009c80:	460d      	mov	r5, r1
 8009c82:	4614      	mov	r4, r2
 8009c84:	b09d      	sub	sp, #116	; 0x74
 8009c86:	d50e      	bpl.n	8009ca6 <_svfiprintf_r+0x32>
 8009c88:	690b      	ldr	r3, [r1, #16]
 8009c8a:	b963      	cbnz	r3, 8009ca6 <_svfiprintf_r+0x32>
 8009c8c:	2140      	movs	r1, #64	; 0x40
 8009c8e:	f7ff ff21 	bl	8009ad4 <_malloc_r>
 8009c92:	6028      	str	r0, [r5, #0]
 8009c94:	6128      	str	r0, [r5, #16]
 8009c96:	b920      	cbnz	r0, 8009ca2 <_svfiprintf_r+0x2e>
 8009c98:	230c      	movs	r3, #12
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e0d1      	b.n	8009e46 <_svfiprintf_r+0x1d2>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	616b      	str	r3, [r5, #20]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8009caa:	2320      	movs	r3, #32
 8009cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb0:	2330      	movs	r3, #48	; 0x30
 8009cb2:	f04f 0901 	mov.w	r9, #1
 8009cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e60 <_svfiprintf_r+0x1ec>
 8009cbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc2:	4623      	mov	r3, r4
 8009cc4:	469a      	mov	sl, r3
 8009cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cca:	b10a      	cbz	r2, 8009cd0 <_svfiprintf_r+0x5c>
 8009ccc:	2a25      	cmp	r2, #37	; 0x25
 8009cce:	d1f9      	bne.n	8009cc4 <_svfiprintf_r+0x50>
 8009cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd4:	d00b      	beq.n	8009cee <_svfiprintf_r+0x7a>
 8009cd6:	465b      	mov	r3, fp
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f7ff ff6d 	bl	8009bbc <__ssputs_r>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f000 80aa 	beq.w	8009e3c <_svfiprintf_r+0x1c8>
 8009ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cea:	445a      	add	r2, fp
 8009cec:	9209      	str	r2, [sp, #36]	; 0x24
 8009cee:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 80a2 	beq.w	8009e3c <_svfiprintf_r+0x1c8>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d02:	f10a 0a01 	add.w	sl, sl, #1
 8009d06:	9304      	str	r3, [sp, #16]
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d10:	4654      	mov	r4, sl
 8009d12:	2205      	movs	r2, #5
 8009d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d18:	4851      	ldr	r0, [pc, #324]	; (8009e60 <_svfiprintf_r+0x1ec>)
 8009d1a:	f7ff f98b 	bl	8009034 <memchr>
 8009d1e:	9a04      	ldr	r2, [sp, #16]
 8009d20:	b9d8      	cbnz	r0, 8009d5a <_svfiprintf_r+0xe6>
 8009d22:	06d0      	lsls	r0, r2, #27
 8009d24:	bf44      	itt	mi
 8009d26:	2320      	movmi	r3, #32
 8009d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d2c:	0711      	lsls	r1, r2, #28
 8009d2e:	bf44      	itt	mi
 8009d30:	232b      	movmi	r3, #43	; 0x2b
 8009d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d36:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d3c:	d015      	beq.n	8009d6a <_svfiprintf_r+0xf6>
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2000      	movs	r0, #0
 8009d42:	f04f 0c0a 	mov.w	ip, #10
 8009d46:	9a07      	ldr	r2, [sp, #28]
 8009d48:	4621      	mov	r1, r4
 8009d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d4e:	3b30      	subs	r3, #48	; 0x30
 8009d50:	2b09      	cmp	r3, #9
 8009d52:	d94e      	bls.n	8009df2 <_svfiprintf_r+0x17e>
 8009d54:	b1b0      	cbz	r0, 8009d84 <_svfiprintf_r+0x110>
 8009d56:	9207      	str	r2, [sp, #28]
 8009d58:	e014      	b.n	8009d84 <_svfiprintf_r+0x110>
 8009d5a:	eba0 0308 	sub.w	r3, r0, r8
 8009d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d62:	4313      	orrs	r3, r2
 8009d64:	46a2      	mov	sl, r4
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	e7d2      	b.n	8009d10 <_svfiprintf_r+0x9c>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	1d19      	adds	r1, r3, #4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	9103      	str	r1, [sp, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bfbb      	ittet	lt
 8009d76:	425b      	neglt	r3, r3
 8009d78:	f042 0202 	orrlt.w	r2, r2, #2
 8009d7c:	9307      	strge	r3, [sp, #28]
 8009d7e:	9307      	strlt	r3, [sp, #28]
 8009d80:	bfb8      	it	lt
 8009d82:	9204      	strlt	r2, [sp, #16]
 8009d84:	7823      	ldrb	r3, [r4, #0]
 8009d86:	2b2e      	cmp	r3, #46	; 0x2e
 8009d88:	d10c      	bne.n	8009da4 <_svfiprintf_r+0x130>
 8009d8a:	7863      	ldrb	r3, [r4, #1]
 8009d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8e:	d135      	bne.n	8009dfc <_svfiprintf_r+0x188>
 8009d90:	9b03      	ldr	r3, [sp, #12]
 8009d92:	3402      	adds	r4, #2
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9203      	str	r2, [sp, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bfb8      	it	lt
 8009d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009da2:	9305      	str	r3, [sp, #20]
 8009da4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e64 <_svfiprintf_r+0x1f0>
 8009da8:	2203      	movs	r2, #3
 8009daa:	4650      	mov	r0, sl
 8009dac:	7821      	ldrb	r1, [r4, #0]
 8009dae:	f7ff f941 	bl	8009034 <memchr>
 8009db2:	b140      	cbz	r0, 8009dc6 <_svfiprintf_r+0x152>
 8009db4:	2340      	movs	r3, #64	; 0x40
 8009db6:	eba0 000a 	sub.w	r0, r0, sl
 8009dba:	fa03 f000 	lsl.w	r0, r3, r0
 8009dbe:	9b04      	ldr	r3, [sp, #16]
 8009dc0:	3401      	adds	r4, #1
 8009dc2:	4303      	orrs	r3, r0
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dca:	2206      	movs	r2, #6
 8009dcc:	4826      	ldr	r0, [pc, #152]	; (8009e68 <_svfiprintf_r+0x1f4>)
 8009dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dd2:	f7ff f92f 	bl	8009034 <memchr>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d038      	beq.n	8009e4c <_svfiprintf_r+0x1d8>
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <_svfiprintf_r+0x1f8>)
 8009ddc:	bb1b      	cbnz	r3, 8009e26 <_svfiprintf_r+0x1b2>
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	3307      	adds	r3, #7
 8009de2:	f023 0307 	bic.w	r3, r3, #7
 8009de6:	3308      	adds	r3, #8
 8009de8:	9303      	str	r3, [sp, #12]
 8009dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dec:	4433      	add	r3, r6
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	e767      	b.n	8009cc2 <_svfiprintf_r+0x4e>
 8009df2:	460c      	mov	r4, r1
 8009df4:	2001      	movs	r0, #1
 8009df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dfa:	e7a5      	b.n	8009d48 <_svfiprintf_r+0xd4>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f04f 0c0a 	mov.w	ip, #10
 8009e02:	4619      	mov	r1, r3
 8009e04:	3401      	adds	r4, #1
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0e:	3a30      	subs	r2, #48	; 0x30
 8009e10:	2a09      	cmp	r2, #9
 8009e12:	d903      	bls.n	8009e1c <_svfiprintf_r+0x1a8>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0c5      	beq.n	8009da4 <_svfiprintf_r+0x130>
 8009e18:	9105      	str	r1, [sp, #20]
 8009e1a:	e7c3      	b.n	8009da4 <_svfiprintf_r+0x130>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2301      	movs	r3, #1
 8009e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e24:	e7f0      	b.n	8009e08 <_svfiprintf_r+0x194>
 8009e26:	ab03      	add	r3, sp, #12
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	462a      	mov	r2, r5
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <_svfiprintf_r+0x1fc>)
 8009e30:	a904      	add	r1, sp, #16
 8009e32:	f7fc fa7f 	bl	8006334 <_printf_float>
 8009e36:	1c42      	adds	r2, r0, #1
 8009e38:	4606      	mov	r6, r0
 8009e3a:	d1d6      	bne.n	8009dea <_svfiprintf_r+0x176>
 8009e3c:	89ab      	ldrh	r3, [r5, #12]
 8009e3e:	065b      	lsls	r3, r3, #25
 8009e40:	f53f af2c 	bmi.w	8009c9c <_svfiprintf_r+0x28>
 8009e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e46:	b01d      	add	sp, #116	; 0x74
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4c:	ab03      	add	r3, sp, #12
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	462a      	mov	r2, r5
 8009e52:	4638      	mov	r0, r7
 8009e54:	4b06      	ldr	r3, [pc, #24]	; (8009e70 <_svfiprintf_r+0x1fc>)
 8009e56:	a904      	add	r1, sp, #16
 8009e58:	f7fc fd08 	bl	800686c <_printf_i>
 8009e5c:	e7eb      	b.n	8009e36 <_svfiprintf_r+0x1c2>
 8009e5e:	bf00      	nop
 8009e60:	0800aeb4 	.word	0x0800aeb4
 8009e64:	0800aeba 	.word	0x0800aeba
 8009e68:	0800aebe 	.word	0x0800aebe
 8009e6c:	08006335 	.word	0x08006335
 8009e70:	08009bbd 	.word	0x08009bbd

08009e74 <nan>:
 8009e74:	2000      	movs	r0, #0
 8009e76:	4901      	ldr	r1, [pc, #4]	; (8009e7c <nan+0x8>)
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	7ff80000 	.word	0x7ff80000

08009e80 <_sbrk_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	2300      	movs	r3, #0
 8009e84:	4d05      	ldr	r5, [pc, #20]	; (8009e9c <_sbrk_r+0x1c>)
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f8 fe00 	bl	8002a90 <_sbrk>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_sbrk_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_sbrk_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	200004a0 	.word	0x200004a0

08009ea0 <strncmp>:
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	b510      	push	{r4, lr}
 8009ea4:	b172      	cbz	r2, 8009ec4 <strncmp+0x24>
 8009ea6:	3901      	subs	r1, #1
 8009ea8:	1884      	adds	r4, r0, r2
 8009eaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009eae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009eb2:	4290      	cmp	r0, r2
 8009eb4:	d101      	bne.n	8009eba <strncmp+0x1a>
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	d101      	bne.n	8009ebe <strncmp+0x1e>
 8009eba:	1a80      	subs	r0, r0, r2
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d1f3      	bne.n	8009eaa <strncmp+0xa>
 8009ec2:	e7fa      	b.n	8009eba <strncmp+0x1a>
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	e7f9      	b.n	8009ebc <strncmp+0x1c>

08009ec8 <__ascii_wctomb>:
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4608      	mov	r0, r1
 8009ecc:	b141      	cbz	r1, 8009ee0 <__ascii_wctomb+0x18>
 8009ece:	2aff      	cmp	r2, #255	; 0xff
 8009ed0:	d904      	bls.n	8009edc <__ascii_wctomb+0x14>
 8009ed2:	228a      	movs	r2, #138	; 0x8a
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	4770      	bx	lr
 8009edc:	2001      	movs	r0, #1
 8009ede:	700a      	strb	r2, [r1, #0]
 8009ee0:	4770      	bx	lr
	...

08009ee4 <__assert_func>:
 8009ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <__assert_func+0x2c>)
 8009eec:	4605      	mov	r5, r0
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68d8      	ldr	r0, [r3, #12]
 8009ef2:	b14c      	cbz	r4, 8009f08 <__assert_func+0x24>
 8009ef4:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <__assert_func+0x30>)
 8009ef6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009efa:	9100      	str	r1, [sp, #0]
 8009efc:	462b      	mov	r3, r5
 8009efe:	4906      	ldr	r1, [pc, #24]	; (8009f18 <__assert_func+0x34>)
 8009f00:	f000 f80e 	bl	8009f20 <fiprintf>
 8009f04:	f000 fa8a 	bl	800a41c <abort>
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <__assert_func+0x38>)
 8009f0a:	461c      	mov	r4, r3
 8009f0c:	e7f3      	b.n	8009ef6 <__assert_func+0x12>
 8009f0e:	bf00      	nop
 8009f10:	2000003c 	.word	0x2000003c
 8009f14:	0800aec5 	.word	0x0800aec5
 8009f18:	0800aed2 	.word	0x0800aed2
 8009f1c:	0800af00 	.word	0x0800af00

08009f20 <fiprintf>:
 8009f20:	b40e      	push	{r1, r2, r3}
 8009f22:	b503      	push	{r0, r1, lr}
 8009f24:	4601      	mov	r1, r0
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	4805      	ldr	r0, [pc, #20]	; (8009f40 <fiprintf+0x20>)
 8009f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2e:	6800      	ldr	r0, [r0, #0]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	f000 f883 	bl	800a03c <_vfiprintf_r>
 8009f36:	b002      	add	sp, #8
 8009f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3c:	b003      	add	sp, #12
 8009f3e:	4770      	bx	lr
 8009f40:	2000003c 	.word	0x2000003c

08009f44 <memmove>:
 8009f44:	4288      	cmp	r0, r1
 8009f46:	b510      	push	{r4, lr}
 8009f48:	eb01 0402 	add.w	r4, r1, r2
 8009f4c:	d902      	bls.n	8009f54 <memmove+0x10>
 8009f4e:	4284      	cmp	r4, r0
 8009f50:	4623      	mov	r3, r4
 8009f52:	d807      	bhi.n	8009f64 <memmove+0x20>
 8009f54:	1e43      	subs	r3, r0, #1
 8009f56:	42a1      	cmp	r1, r4
 8009f58:	d008      	beq.n	8009f6c <memmove+0x28>
 8009f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f62:	e7f8      	b.n	8009f56 <memmove+0x12>
 8009f64:	4601      	mov	r1, r0
 8009f66:	4402      	add	r2, r0
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	d100      	bne.n	8009f6e <memmove+0x2a>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f76:	e7f7      	b.n	8009f68 <memmove+0x24>

08009f78 <__malloc_lock>:
 8009f78:	4801      	ldr	r0, [pc, #4]	; (8009f80 <__malloc_lock+0x8>)
 8009f7a:	f000 bc0b 	b.w	800a794 <__retarget_lock_acquire_recursive>
 8009f7e:	bf00      	nop
 8009f80:	200004a4 	.word	0x200004a4

08009f84 <__malloc_unlock>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__malloc_unlock+0x8>)
 8009f86:	f000 bc06 	b.w	800a796 <__retarget_lock_release_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	200004a4 	.word	0x200004a4

08009f90 <_realloc_r>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	4680      	mov	r8, r0
 8009f96:	4614      	mov	r4, r2
 8009f98:	460e      	mov	r6, r1
 8009f9a:	b921      	cbnz	r1, 8009fa6 <_realloc_r+0x16>
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa2:	f7ff bd97 	b.w	8009ad4 <_malloc_r>
 8009fa6:	b92a      	cbnz	r2, 8009fb4 <_realloc_r+0x24>
 8009fa8:	f7ff fd2c 	bl	8009a04 <_free_r>
 8009fac:	4625      	mov	r5, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	f000 fc56 	bl	800a864 <_malloc_usable_size_r>
 8009fb8:	4284      	cmp	r4, r0
 8009fba:	4607      	mov	r7, r0
 8009fbc:	d802      	bhi.n	8009fc4 <_realloc_r+0x34>
 8009fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fc2:	d812      	bhi.n	8009fea <_realloc_r+0x5a>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7ff fd84 	bl	8009ad4 <_malloc_r>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0ed      	beq.n	8009fae <_realloc_r+0x1e>
 8009fd2:	42bc      	cmp	r4, r7
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	bf28      	it	cs
 8009fda:	463a      	movcs	r2, r7
 8009fdc:	f7ff f838 	bl	8009050 <memcpy>
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff fd0e 	bl	8009a04 <_free_r>
 8009fe8:	e7e1      	b.n	8009fae <_realloc_r+0x1e>
 8009fea:	4635      	mov	r5, r6
 8009fec:	e7df      	b.n	8009fae <_realloc_r+0x1e>

08009fee <__sfputc_r>:
 8009fee:	6893      	ldr	r3, [r2, #8]
 8009ff0:	b410      	push	{r4}
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	6093      	str	r3, [r2, #8]
 8009ff8:	da07      	bge.n	800a00a <__sfputc_r+0x1c>
 8009ffa:	6994      	ldr	r4, [r2, #24]
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	db01      	blt.n	800a004 <__sfputc_r+0x16>
 800a000:	290a      	cmp	r1, #10
 800a002:	d102      	bne.n	800a00a <__sfputc_r+0x1c>
 800a004:	bc10      	pop	{r4}
 800a006:	f000 b949 	b.w	800a29c <__swbuf_r>
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	1c58      	adds	r0, r3, #1
 800a00e:	6010      	str	r0, [r2, #0]
 800a010:	7019      	strb	r1, [r3, #0]
 800a012:	4608      	mov	r0, r1
 800a014:	bc10      	pop	{r4}
 800a016:	4770      	bx	lr

0800a018 <__sfputs_r>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	4606      	mov	r6, r0
 800a01c:	460f      	mov	r7, r1
 800a01e:	4614      	mov	r4, r2
 800a020:	18d5      	adds	r5, r2, r3
 800a022:	42ac      	cmp	r4, r5
 800a024:	d101      	bne.n	800a02a <__sfputs_r+0x12>
 800a026:	2000      	movs	r0, #0
 800a028:	e007      	b.n	800a03a <__sfputs_r+0x22>
 800a02a:	463a      	mov	r2, r7
 800a02c:	4630      	mov	r0, r6
 800a02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a032:	f7ff ffdc 	bl	8009fee <__sfputc_r>
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d1f3      	bne.n	800a022 <__sfputs_r+0xa>
 800a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a03c <_vfiprintf_r>:
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	460d      	mov	r5, r1
 800a042:	4614      	mov	r4, r2
 800a044:	4698      	mov	r8, r3
 800a046:	4606      	mov	r6, r0
 800a048:	b09d      	sub	sp, #116	; 0x74
 800a04a:	b118      	cbz	r0, 800a054 <_vfiprintf_r+0x18>
 800a04c:	6983      	ldr	r3, [r0, #24]
 800a04e:	b90b      	cbnz	r3, 800a054 <_vfiprintf_r+0x18>
 800a050:	f000 fb02 	bl	800a658 <__sinit>
 800a054:	4b89      	ldr	r3, [pc, #548]	; (800a27c <_vfiprintf_r+0x240>)
 800a056:	429d      	cmp	r5, r3
 800a058:	d11b      	bne.n	800a092 <_vfiprintf_r+0x56>
 800a05a:	6875      	ldr	r5, [r6, #4]
 800a05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	d405      	bmi.n	800a06e <_vfiprintf_r+0x32>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	059a      	lsls	r2, r3, #22
 800a066:	d402      	bmi.n	800a06e <_vfiprintf_r+0x32>
 800a068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06a:	f000 fb93 	bl	800a794 <__retarget_lock_acquire_recursive>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	071b      	lsls	r3, r3, #28
 800a072:	d501      	bpl.n	800a078 <_vfiprintf_r+0x3c>
 800a074:	692b      	ldr	r3, [r5, #16]
 800a076:	b9eb      	cbnz	r3, 800a0b4 <_vfiprintf_r+0x78>
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 f960 	bl	800a340 <__swsetup_r>
 800a080:	b1c0      	cbz	r0, 800a0b4 <_vfiprintf_r+0x78>
 800a082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a084:	07dc      	lsls	r4, r3, #31
 800a086:	d50e      	bpl.n	800a0a6 <_vfiprintf_r+0x6a>
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	b01d      	add	sp, #116	; 0x74
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	4b7b      	ldr	r3, [pc, #492]	; (800a280 <_vfiprintf_r+0x244>)
 800a094:	429d      	cmp	r5, r3
 800a096:	d101      	bne.n	800a09c <_vfiprintf_r+0x60>
 800a098:	68b5      	ldr	r5, [r6, #8]
 800a09a:	e7df      	b.n	800a05c <_vfiprintf_r+0x20>
 800a09c:	4b79      	ldr	r3, [pc, #484]	; (800a284 <_vfiprintf_r+0x248>)
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	bf08      	it	eq
 800a0a2:	68f5      	ldreq	r5, [r6, #12]
 800a0a4:	e7da      	b.n	800a05c <_vfiprintf_r+0x20>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	0598      	lsls	r0, r3, #22
 800a0aa:	d4ed      	bmi.n	800a088 <_vfiprintf_r+0x4c>
 800a0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ae:	f000 fb72 	bl	800a796 <__retarget_lock_release_recursive>
 800a0b2:	e7e9      	b.n	800a088 <_vfiprintf_r+0x4c>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0be:	2330      	movs	r3, #48	; 0x30
 800a0c0:	f04f 0901 	mov.w	r9, #1
 800a0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a288 <_vfiprintf_r+0x24c>
 800a0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d8:	b10a      	cbz	r2, 800a0de <_vfiprintf_r+0xa2>
 800a0da:	2a25      	cmp	r2, #37	; 0x25
 800a0dc:	d1f9      	bne.n	800a0d2 <_vfiprintf_r+0x96>
 800a0de:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e2:	d00b      	beq.n	800a0fc <_vfiprintf_r+0xc0>
 800a0e4:	465b      	mov	r3, fp
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ff94 	bl	800a018 <__sfputs_r>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f000 80aa 	beq.w	800a24a <_vfiprintf_r+0x20e>
 800a0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f8:	445a      	add	r2, fp
 800a0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80a2 	beq.w	800a24a <_vfiprintf_r+0x20e>
 800a106:	2300      	movs	r3, #0
 800a108:	f04f 32ff 	mov.w	r2, #4294967295
 800a10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a110:	f10a 0a01 	add.w	sl, sl, #1
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	9307      	str	r3, [sp, #28]
 800a118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11c:	931a      	str	r3, [sp, #104]	; 0x68
 800a11e:	4654      	mov	r4, sl
 800a120:	2205      	movs	r2, #5
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	4858      	ldr	r0, [pc, #352]	; (800a288 <_vfiprintf_r+0x24c>)
 800a128:	f7fe ff84 	bl	8009034 <memchr>
 800a12c:	9a04      	ldr	r2, [sp, #16]
 800a12e:	b9d8      	cbnz	r0, 800a168 <_vfiprintf_r+0x12c>
 800a130:	06d1      	lsls	r1, r2, #27
 800a132:	bf44      	itt	mi
 800a134:	2320      	movmi	r3, #32
 800a136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13a:	0713      	lsls	r3, r2, #28
 800a13c:	bf44      	itt	mi
 800a13e:	232b      	movmi	r3, #43	; 0x2b
 800a140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a144:	f89a 3000 	ldrb.w	r3, [sl]
 800a148:	2b2a      	cmp	r3, #42	; 0x2a
 800a14a:	d015      	beq.n	800a178 <_vfiprintf_r+0x13c>
 800a14c:	4654      	mov	r4, sl
 800a14e:	2000      	movs	r0, #0
 800a150:	f04f 0c0a 	mov.w	ip, #10
 800a154:	9a07      	ldr	r2, [sp, #28]
 800a156:	4621      	mov	r1, r4
 800a158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15c:	3b30      	subs	r3, #48	; 0x30
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d94e      	bls.n	800a200 <_vfiprintf_r+0x1c4>
 800a162:	b1b0      	cbz	r0, 800a192 <_vfiprintf_r+0x156>
 800a164:	9207      	str	r2, [sp, #28]
 800a166:	e014      	b.n	800a192 <_vfiprintf_r+0x156>
 800a168:	eba0 0308 	sub.w	r3, r0, r8
 800a16c:	fa09 f303 	lsl.w	r3, r9, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	46a2      	mov	sl, r4
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	e7d2      	b.n	800a11e <_vfiprintf_r+0xe2>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	1d19      	adds	r1, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	9103      	str	r1, [sp, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfbb      	ittet	lt
 800a184:	425b      	neglt	r3, r3
 800a186:	f042 0202 	orrlt.w	r2, r2, #2
 800a18a:	9307      	strge	r3, [sp, #28]
 800a18c:	9307      	strlt	r3, [sp, #28]
 800a18e:	bfb8      	it	lt
 800a190:	9204      	strlt	r2, [sp, #16]
 800a192:	7823      	ldrb	r3, [r4, #0]
 800a194:	2b2e      	cmp	r3, #46	; 0x2e
 800a196:	d10c      	bne.n	800a1b2 <_vfiprintf_r+0x176>
 800a198:	7863      	ldrb	r3, [r4, #1]
 800a19a:	2b2a      	cmp	r3, #42	; 0x2a
 800a19c:	d135      	bne.n	800a20a <_vfiprintf_r+0x1ce>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	3402      	adds	r4, #2
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9203      	str	r2, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfb8      	it	lt
 800a1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a28c <_vfiprintf_r+0x250>
 800a1b6:	2203      	movs	r2, #3
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	7821      	ldrb	r1, [r4, #0]
 800a1bc:	f7fe ff3a 	bl	8009034 <memchr>
 800a1c0:	b140      	cbz	r0, 800a1d4 <_vfiprintf_r+0x198>
 800a1c2:	2340      	movs	r3, #64	; 0x40
 800a1c4:	eba0 000a 	sub.w	r0, r0, sl
 800a1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	4303      	orrs	r3, r0
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d8:	2206      	movs	r2, #6
 800a1da:	482d      	ldr	r0, [pc, #180]	; (800a290 <_vfiprintf_r+0x254>)
 800a1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e0:	f7fe ff28 	bl	8009034 <memchr>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d03f      	beq.n	800a268 <_vfiprintf_r+0x22c>
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <_vfiprintf_r+0x258>)
 800a1ea:	bb1b      	cbnz	r3, 800a234 <_vfiprintf_r+0x1f8>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	3307      	adds	r3, #7
 800a1f0:	f023 0307 	bic.w	r3, r3, #7
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fa:	443b      	add	r3, r7
 800a1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fe:	e767      	b.n	800a0d0 <_vfiprintf_r+0x94>
 800a200:	460c      	mov	r4, r1
 800a202:	2001      	movs	r0, #1
 800a204:	fb0c 3202 	mla	r2, ip, r2, r3
 800a208:	e7a5      	b.n	800a156 <_vfiprintf_r+0x11a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	f04f 0c0a 	mov.w	ip, #10
 800a210:	4619      	mov	r1, r3
 800a212:	3401      	adds	r4, #1
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	4620      	mov	r0, r4
 800a218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21c:	3a30      	subs	r2, #48	; 0x30
 800a21e:	2a09      	cmp	r2, #9
 800a220:	d903      	bls.n	800a22a <_vfiprintf_r+0x1ee>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c5      	beq.n	800a1b2 <_vfiprintf_r+0x176>
 800a226:	9105      	str	r1, [sp, #20]
 800a228:	e7c3      	b.n	800a1b2 <_vfiprintf_r+0x176>
 800a22a:	4604      	mov	r4, r0
 800a22c:	2301      	movs	r3, #1
 800a22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a232:	e7f0      	b.n	800a216 <_vfiprintf_r+0x1da>
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	462a      	mov	r2, r5
 800a23a:	4630      	mov	r0, r6
 800a23c:	4b16      	ldr	r3, [pc, #88]	; (800a298 <_vfiprintf_r+0x25c>)
 800a23e:	a904      	add	r1, sp, #16
 800a240:	f7fc f878 	bl	8006334 <_printf_float>
 800a244:	4607      	mov	r7, r0
 800a246:	1c78      	adds	r0, r7, #1
 800a248:	d1d6      	bne.n	800a1f8 <_vfiprintf_r+0x1bc>
 800a24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d405      	bmi.n	800a25c <_vfiprintf_r+0x220>
 800a250:	89ab      	ldrh	r3, [r5, #12]
 800a252:	059a      	lsls	r2, r3, #22
 800a254:	d402      	bmi.n	800a25c <_vfiprintf_r+0x220>
 800a256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a258:	f000 fa9d 	bl	800a796 <__retarget_lock_release_recursive>
 800a25c:	89ab      	ldrh	r3, [r5, #12]
 800a25e:	065b      	lsls	r3, r3, #25
 800a260:	f53f af12 	bmi.w	800a088 <_vfiprintf_r+0x4c>
 800a264:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a266:	e711      	b.n	800a08c <_vfiprintf_r+0x50>
 800a268:	ab03      	add	r3, sp, #12
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	462a      	mov	r2, r5
 800a26e:	4630      	mov	r0, r6
 800a270:	4b09      	ldr	r3, [pc, #36]	; (800a298 <_vfiprintf_r+0x25c>)
 800a272:	a904      	add	r1, sp, #16
 800a274:	f7fc fafa 	bl	800686c <_printf_i>
 800a278:	e7e4      	b.n	800a244 <_vfiprintf_r+0x208>
 800a27a:	bf00      	nop
 800a27c:	0800af24 	.word	0x0800af24
 800a280:	0800af44 	.word	0x0800af44
 800a284:	0800af04 	.word	0x0800af04
 800a288:	0800aeb4 	.word	0x0800aeb4
 800a28c:	0800aeba 	.word	0x0800aeba
 800a290:	0800aebe 	.word	0x0800aebe
 800a294:	08006335 	.word	0x08006335
 800a298:	0800a019 	.word	0x0800a019

0800a29c <__swbuf_r>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	460e      	mov	r6, r1
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	b118      	cbz	r0, 800a2ae <__swbuf_r+0x12>
 800a2a6:	6983      	ldr	r3, [r0, #24]
 800a2a8:	b90b      	cbnz	r3, 800a2ae <__swbuf_r+0x12>
 800a2aa:	f000 f9d5 	bl	800a658 <__sinit>
 800a2ae:	4b21      	ldr	r3, [pc, #132]	; (800a334 <__swbuf_r+0x98>)
 800a2b0:	429c      	cmp	r4, r3
 800a2b2:	d12b      	bne.n	800a30c <__swbuf_r+0x70>
 800a2b4:	686c      	ldr	r4, [r5, #4]
 800a2b6:	69a3      	ldr	r3, [r4, #24]
 800a2b8:	60a3      	str	r3, [r4, #8]
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	071a      	lsls	r2, r3, #28
 800a2be:	d52f      	bpl.n	800a320 <__swbuf_r+0x84>
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	b36b      	cbz	r3, 800a320 <__swbuf_r+0x84>
 800a2c4:	6923      	ldr	r3, [r4, #16]
 800a2c6:	6820      	ldr	r0, [r4, #0]
 800a2c8:	b2f6      	uxtb	r6, r6
 800a2ca:	1ac0      	subs	r0, r0, r3
 800a2cc:	6963      	ldr	r3, [r4, #20]
 800a2ce:	4637      	mov	r7, r6
 800a2d0:	4283      	cmp	r3, r0
 800a2d2:	dc04      	bgt.n	800a2de <__swbuf_r+0x42>
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 f92a 	bl	800a530 <_fflush_r>
 800a2dc:	bb30      	cbnz	r0, 800a32c <__swbuf_r+0x90>
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	6022      	str	r2, [r4, #0]
 800a2ec:	701e      	strb	r6, [r3, #0]
 800a2ee:	6963      	ldr	r3, [r4, #20]
 800a2f0:	4283      	cmp	r3, r0
 800a2f2:	d004      	beq.n	800a2fe <__swbuf_r+0x62>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	07db      	lsls	r3, r3, #31
 800a2f8:	d506      	bpl.n	800a308 <__swbuf_r+0x6c>
 800a2fa:	2e0a      	cmp	r6, #10
 800a2fc:	d104      	bne.n	800a308 <__swbuf_r+0x6c>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4628      	mov	r0, r5
 800a302:	f000 f915 	bl	800a530 <_fflush_r>
 800a306:	b988      	cbnz	r0, 800a32c <__swbuf_r+0x90>
 800a308:	4638      	mov	r0, r7
 800a30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a30c:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <__swbuf_r+0x9c>)
 800a30e:	429c      	cmp	r4, r3
 800a310:	d101      	bne.n	800a316 <__swbuf_r+0x7a>
 800a312:	68ac      	ldr	r4, [r5, #8]
 800a314:	e7cf      	b.n	800a2b6 <__swbuf_r+0x1a>
 800a316:	4b09      	ldr	r3, [pc, #36]	; (800a33c <__swbuf_r+0xa0>)
 800a318:	429c      	cmp	r4, r3
 800a31a:	bf08      	it	eq
 800a31c:	68ec      	ldreq	r4, [r5, #12]
 800a31e:	e7ca      	b.n	800a2b6 <__swbuf_r+0x1a>
 800a320:	4621      	mov	r1, r4
 800a322:	4628      	mov	r0, r5
 800a324:	f000 f80c 	bl	800a340 <__swsetup_r>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d0cb      	beq.n	800a2c4 <__swbuf_r+0x28>
 800a32c:	f04f 37ff 	mov.w	r7, #4294967295
 800a330:	e7ea      	b.n	800a308 <__swbuf_r+0x6c>
 800a332:	bf00      	nop
 800a334:	0800af24 	.word	0x0800af24
 800a338:	0800af44 	.word	0x0800af44
 800a33c:	0800af04 	.word	0x0800af04

0800a340 <__swsetup_r>:
 800a340:	4b32      	ldr	r3, [pc, #200]	; (800a40c <__swsetup_r+0xcc>)
 800a342:	b570      	push	{r4, r5, r6, lr}
 800a344:	681d      	ldr	r5, [r3, #0]
 800a346:	4606      	mov	r6, r0
 800a348:	460c      	mov	r4, r1
 800a34a:	b125      	cbz	r5, 800a356 <__swsetup_r+0x16>
 800a34c:	69ab      	ldr	r3, [r5, #24]
 800a34e:	b913      	cbnz	r3, 800a356 <__swsetup_r+0x16>
 800a350:	4628      	mov	r0, r5
 800a352:	f000 f981 	bl	800a658 <__sinit>
 800a356:	4b2e      	ldr	r3, [pc, #184]	; (800a410 <__swsetup_r+0xd0>)
 800a358:	429c      	cmp	r4, r3
 800a35a:	d10f      	bne.n	800a37c <__swsetup_r+0x3c>
 800a35c:	686c      	ldr	r4, [r5, #4]
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a364:	0719      	lsls	r1, r3, #28
 800a366:	d42c      	bmi.n	800a3c2 <__swsetup_r+0x82>
 800a368:	06dd      	lsls	r5, r3, #27
 800a36a:	d411      	bmi.n	800a390 <__swsetup_r+0x50>
 800a36c:	2309      	movs	r3, #9
 800a36e:	6033      	str	r3, [r6, #0]
 800a370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	e03e      	b.n	800a3fa <__swsetup_r+0xba>
 800a37c:	4b25      	ldr	r3, [pc, #148]	; (800a414 <__swsetup_r+0xd4>)
 800a37e:	429c      	cmp	r4, r3
 800a380:	d101      	bne.n	800a386 <__swsetup_r+0x46>
 800a382:	68ac      	ldr	r4, [r5, #8]
 800a384:	e7eb      	b.n	800a35e <__swsetup_r+0x1e>
 800a386:	4b24      	ldr	r3, [pc, #144]	; (800a418 <__swsetup_r+0xd8>)
 800a388:	429c      	cmp	r4, r3
 800a38a:	bf08      	it	eq
 800a38c:	68ec      	ldreq	r4, [r5, #12]
 800a38e:	e7e6      	b.n	800a35e <__swsetup_r+0x1e>
 800a390:	0758      	lsls	r0, r3, #29
 800a392:	d512      	bpl.n	800a3ba <__swsetup_r+0x7a>
 800a394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a396:	b141      	cbz	r1, 800a3aa <__swsetup_r+0x6a>
 800a398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a39c:	4299      	cmp	r1, r3
 800a39e:	d002      	beq.n	800a3a6 <__swsetup_r+0x66>
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7ff fb2f 	bl	8009a04 <_free_r>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6363      	str	r3, [r4, #52]	; 0x34
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6063      	str	r3, [r4, #4]
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f043 0308 	orr.w	r3, r3, #8
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	b94b      	cbnz	r3, 800a3da <__swsetup_r+0x9a>
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d0:	d003      	beq.n	800a3da <__swsetup_r+0x9a>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f000 fa05 	bl	800a7e4 <__smakebuf_r>
 800a3da:	89a0      	ldrh	r0, [r4, #12]
 800a3dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3e0:	f010 0301 	ands.w	r3, r0, #1
 800a3e4:	d00a      	beq.n	800a3fc <__swsetup_r+0xbc>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	6963      	ldr	r3, [r4, #20]
 800a3ec:	425b      	negs	r3, r3
 800a3ee:	61a3      	str	r3, [r4, #24]
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	b943      	cbnz	r3, 800a406 <__swsetup_r+0xc6>
 800a3f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3f8:	d1ba      	bne.n	800a370 <__swsetup_r+0x30>
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
 800a3fc:	0781      	lsls	r1, r0, #30
 800a3fe:	bf58      	it	pl
 800a400:	6963      	ldrpl	r3, [r4, #20]
 800a402:	60a3      	str	r3, [r4, #8]
 800a404:	e7f4      	b.n	800a3f0 <__swsetup_r+0xb0>
 800a406:	2000      	movs	r0, #0
 800a408:	e7f7      	b.n	800a3fa <__swsetup_r+0xba>
 800a40a:	bf00      	nop
 800a40c:	2000003c 	.word	0x2000003c
 800a410:	0800af24 	.word	0x0800af24
 800a414:	0800af44 	.word	0x0800af44
 800a418:	0800af04 	.word	0x0800af04

0800a41c <abort>:
 800a41c:	2006      	movs	r0, #6
 800a41e:	b508      	push	{r3, lr}
 800a420:	f000 fa50 	bl	800a8c4 <raise>
 800a424:	2001      	movs	r0, #1
 800a426:	f7f8 fac0 	bl	80029aa <_exit>
	...

0800a42c <__sflush_r>:
 800a42c:	898a      	ldrh	r2, [r1, #12]
 800a42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a430:	4605      	mov	r5, r0
 800a432:	0710      	lsls	r0, r2, #28
 800a434:	460c      	mov	r4, r1
 800a436:	d457      	bmi.n	800a4e8 <__sflush_r+0xbc>
 800a438:	684b      	ldr	r3, [r1, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc04      	bgt.n	800a448 <__sflush_r+0x1c>
 800a43e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	dc01      	bgt.n	800a448 <__sflush_r+0x1c>
 800a444:	2000      	movs	r0, #0
 800a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d0fa      	beq.n	800a444 <__sflush_r+0x18>
 800a44e:	2300      	movs	r3, #0
 800a450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a454:	682f      	ldr	r7, [r5, #0]
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	d032      	beq.n	800a4c0 <__sflush_r+0x94>
 800a45a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	075a      	lsls	r2, r3, #29
 800a460:	d505      	bpl.n	800a46e <__sflush_r+0x42>
 800a462:	6863      	ldr	r3, [r4, #4]
 800a464:	1ac0      	subs	r0, r0, r3
 800a466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a468:	b10b      	cbz	r3, 800a46e <__sflush_r+0x42>
 800a46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46c:	1ac0      	subs	r0, r0, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	4602      	mov	r2, r0
 800a472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a474:	4628      	mov	r0, r5
 800a476:	6a21      	ldr	r1, [r4, #32]
 800a478:	47b0      	blx	r6
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	d106      	bne.n	800a48e <__sflush_r+0x62>
 800a480:	6829      	ldr	r1, [r5, #0]
 800a482:	291d      	cmp	r1, #29
 800a484:	d82c      	bhi.n	800a4e0 <__sflush_r+0xb4>
 800a486:	4a29      	ldr	r2, [pc, #164]	; (800a52c <__sflush_r+0x100>)
 800a488:	40ca      	lsrs	r2, r1
 800a48a:	07d6      	lsls	r6, r2, #31
 800a48c:	d528      	bpl.n	800a4e0 <__sflush_r+0xb4>
 800a48e:	2200      	movs	r2, #0
 800a490:	6062      	str	r2, [r4, #4]
 800a492:	6922      	ldr	r2, [r4, #16]
 800a494:	04d9      	lsls	r1, r3, #19
 800a496:	6022      	str	r2, [r4, #0]
 800a498:	d504      	bpl.n	800a4a4 <__sflush_r+0x78>
 800a49a:	1c42      	adds	r2, r0, #1
 800a49c:	d101      	bne.n	800a4a2 <__sflush_r+0x76>
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	b903      	cbnz	r3, 800a4a4 <__sflush_r+0x78>
 800a4a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a6:	602f      	str	r7, [r5, #0]
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	d0cb      	beq.n	800a444 <__sflush_r+0x18>
 800a4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <__sflush_r+0x8e>
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f7ff faa5 	bl	8009a04 <_free_r>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a4be:	e7c2      	b.n	800a446 <__sflush_r+0x1a>
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b0      	blx	r6
 800a4c8:	1c41      	adds	r1, r0, #1
 800a4ca:	d1c7      	bne.n	800a45c <__sflush_r+0x30>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0c4      	beq.n	800a45c <__sflush_r+0x30>
 800a4d2:	2b1d      	cmp	r3, #29
 800a4d4:	d001      	beq.n	800a4da <__sflush_r+0xae>
 800a4d6:	2b16      	cmp	r3, #22
 800a4d8:	d101      	bne.n	800a4de <__sflush_r+0xb2>
 800a4da:	602f      	str	r7, [r5, #0]
 800a4dc:	e7b2      	b.n	800a444 <__sflush_r+0x18>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	e7ae      	b.n	800a446 <__sflush_r+0x1a>
 800a4e8:	690f      	ldr	r7, [r1, #16]
 800a4ea:	2f00      	cmp	r7, #0
 800a4ec:	d0aa      	beq.n	800a444 <__sflush_r+0x18>
 800a4ee:	0793      	lsls	r3, r2, #30
 800a4f0:	bf18      	it	ne
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	680e      	ldr	r6, [r1, #0]
 800a4f6:	bf08      	it	eq
 800a4f8:	694b      	ldreq	r3, [r1, #20]
 800a4fa:	1bf6      	subs	r6, r6, r7
 800a4fc:	600f      	str	r7, [r1, #0]
 800a4fe:	608b      	str	r3, [r1, #8]
 800a500:	2e00      	cmp	r6, #0
 800a502:	dd9f      	ble.n	800a444 <__sflush_r+0x18>
 800a504:	4633      	mov	r3, r6
 800a506:	463a      	mov	r2, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	6a21      	ldr	r1, [r4, #32]
 800a50c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a510:	47e0      	blx	ip
 800a512:	2800      	cmp	r0, #0
 800a514:	dc06      	bgt.n	800a524 <__sflush_r+0xf8>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	e790      	b.n	800a446 <__sflush_r+0x1a>
 800a524:	4407      	add	r7, r0
 800a526:	1a36      	subs	r6, r6, r0
 800a528:	e7ea      	b.n	800a500 <__sflush_r+0xd4>
 800a52a:	bf00      	nop
 800a52c:	20400001 	.word	0x20400001

0800a530 <_fflush_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b913      	cbnz	r3, 800a540 <_fflush_r+0x10>
 800a53a:	2500      	movs	r5, #0
 800a53c:	4628      	mov	r0, r5
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	b118      	cbz	r0, 800a54a <_fflush_r+0x1a>
 800a542:	6983      	ldr	r3, [r0, #24]
 800a544:	b90b      	cbnz	r3, 800a54a <_fflush_r+0x1a>
 800a546:	f000 f887 	bl	800a658 <__sinit>
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <_fflush_r+0x6c>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d11b      	bne.n	800a588 <_fflush_r+0x58>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0ef      	beq.n	800a53a <_fflush_r+0xa>
 800a55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a55c:	07d0      	lsls	r0, r2, #31
 800a55e:	d404      	bmi.n	800a56a <_fflush_r+0x3a>
 800a560:	0599      	lsls	r1, r3, #22
 800a562:	d402      	bmi.n	800a56a <_fflush_r+0x3a>
 800a564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a566:	f000 f915 	bl	800a794 <__retarget_lock_acquire_recursive>
 800a56a:	4628      	mov	r0, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7ff ff5d 	bl	800a42c <__sflush_r>
 800a572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a574:	4605      	mov	r5, r0
 800a576:	07da      	lsls	r2, r3, #31
 800a578:	d4e0      	bmi.n	800a53c <_fflush_r+0xc>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	059b      	lsls	r3, r3, #22
 800a57e:	d4dd      	bmi.n	800a53c <_fflush_r+0xc>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f000 f908 	bl	800a796 <__retarget_lock_release_recursive>
 800a586:	e7d9      	b.n	800a53c <_fflush_r+0xc>
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_fflush_r+0x70>)
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d101      	bne.n	800a592 <_fflush_r+0x62>
 800a58e:	68ac      	ldr	r4, [r5, #8]
 800a590:	e7df      	b.n	800a552 <_fflush_r+0x22>
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <_fflush_r+0x74>)
 800a594:	429c      	cmp	r4, r3
 800a596:	bf08      	it	eq
 800a598:	68ec      	ldreq	r4, [r5, #12]
 800a59a:	e7da      	b.n	800a552 <_fflush_r+0x22>
 800a59c:	0800af24 	.word	0x0800af24
 800a5a0:	0800af44 	.word	0x0800af44
 800a5a4:	0800af04 	.word	0x0800af04

0800a5a8 <std>:
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5b6:	6083      	str	r3, [r0, #8]
 800a5b8:	8181      	strh	r1, [r0, #12]
 800a5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a5bc:	81c2      	strh	r2, [r0, #14]
 800a5be:	6183      	str	r3, [r0, #24]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	2208      	movs	r2, #8
 800a5c4:	305c      	adds	r0, #92	; 0x5c
 800a5c6:	f7fb fe0f 	bl	80061e8 <memset>
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <std+0x38>)
 800a5cc:	6224      	str	r4, [r4, #32]
 800a5ce:	6263      	str	r3, [r4, #36]	; 0x24
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <std+0x3c>)
 800a5d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <std+0x40>)
 800a5d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <std+0x44>)
 800a5da:	6323      	str	r3, [r4, #48]	; 0x30
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800a8fd 	.word	0x0800a8fd
 800a5e4:	0800a91f 	.word	0x0800a91f
 800a5e8:	0800a957 	.word	0x0800a957
 800a5ec:	0800a97b 	.word	0x0800a97b

0800a5f0 <_cleanup_r>:
 800a5f0:	4901      	ldr	r1, [pc, #4]	; (800a5f8 <_cleanup_r+0x8>)
 800a5f2:	f000 b8af 	b.w	800a754 <_fwalk_reent>
 800a5f6:	bf00      	nop
 800a5f8:	0800a531 	.word	0x0800a531

0800a5fc <__sfmoreglue>:
 800a5fc:	2268      	movs	r2, #104	; 0x68
 800a5fe:	b570      	push	{r4, r5, r6, lr}
 800a600:	1e4d      	subs	r5, r1, #1
 800a602:	4355      	muls	r5, r2
 800a604:	460e      	mov	r6, r1
 800a606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a60a:	f7ff fa63 	bl	8009ad4 <_malloc_r>
 800a60e:	4604      	mov	r4, r0
 800a610:	b140      	cbz	r0, 800a624 <__sfmoreglue+0x28>
 800a612:	2100      	movs	r1, #0
 800a614:	e9c0 1600 	strd	r1, r6, [r0]
 800a618:	300c      	adds	r0, #12
 800a61a:	60a0      	str	r0, [r4, #8]
 800a61c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a620:	f7fb fde2 	bl	80061e8 <memset>
 800a624:	4620      	mov	r0, r4
 800a626:	bd70      	pop	{r4, r5, r6, pc}

0800a628 <__sfp_lock_acquire>:
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <__sfp_lock_acquire+0x8>)
 800a62a:	f000 b8b3 	b.w	800a794 <__retarget_lock_acquire_recursive>
 800a62e:	bf00      	nop
 800a630:	200004a5 	.word	0x200004a5

0800a634 <__sfp_lock_release>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__sfp_lock_release+0x8>)
 800a636:	f000 b8ae 	b.w	800a796 <__retarget_lock_release_recursive>
 800a63a:	bf00      	nop
 800a63c:	200004a5 	.word	0x200004a5

0800a640 <__sinit_lock_acquire>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__sinit_lock_acquire+0x8>)
 800a642:	f000 b8a7 	b.w	800a794 <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	200004a6 	.word	0x200004a6

0800a64c <__sinit_lock_release>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__sinit_lock_release+0x8>)
 800a64e:	f000 b8a2 	b.w	800a796 <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	200004a6 	.word	0x200004a6

0800a658 <__sinit>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	4604      	mov	r4, r0
 800a65c:	f7ff fff0 	bl	800a640 <__sinit_lock_acquire>
 800a660:	69a3      	ldr	r3, [r4, #24]
 800a662:	b11b      	cbz	r3, 800a66c <__sinit+0x14>
 800a664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a668:	f7ff bff0 	b.w	800a64c <__sinit_lock_release>
 800a66c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a670:	6523      	str	r3, [r4, #80]	; 0x50
 800a672:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <__sinit+0x68>)
 800a674:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <__sinit+0x6c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	62a2      	str	r2, [r4, #40]	; 0x28
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	bf08      	it	eq
 800a67e:	2301      	moveq	r3, #1
 800a680:	4620      	mov	r0, r4
 800a682:	bf08      	it	eq
 800a684:	61a3      	streq	r3, [r4, #24]
 800a686:	f000 f81f 	bl	800a6c8 <__sfp>
 800a68a:	6060      	str	r0, [r4, #4]
 800a68c:	4620      	mov	r0, r4
 800a68e:	f000 f81b 	bl	800a6c8 <__sfp>
 800a692:	60a0      	str	r0, [r4, #8]
 800a694:	4620      	mov	r0, r4
 800a696:	f000 f817 	bl	800a6c8 <__sfp>
 800a69a:	2200      	movs	r2, #0
 800a69c:	2104      	movs	r1, #4
 800a69e:	60e0      	str	r0, [r4, #12]
 800a6a0:	6860      	ldr	r0, [r4, #4]
 800a6a2:	f7ff ff81 	bl	800a5a8 <std>
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	2109      	movs	r1, #9
 800a6aa:	68a0      	ldr	r0, [r4, #8]
 800a6ac:	f7ff ff7c 	bl	800a5a8 <std>
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	2112      	movs	r1, #18
 800a6b4:	68e0      	ldr	r0, [r4, #12]
 800a6b6:	f7ff ff77 	bl	800a5a8 <std>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	61a3      	str	r3, [r4, #24]
 800a6be:	e7d1      	b.n	800a664 <__sinit+0xc>
 800a6c0:	0800aabc 	.word	0x0800aabc
 800a6c4:	0800a5f1 	.word	0x0800a5f1

0800a6c8 <__sfp>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	4607      	mov	r7, r0
 800a6cc:	f7ff ffac 	bl	800a628 <__sfp_lock_acquire>
 800a6d0:	4b1e      	ldr	r3, [pc, #120]	; (800a74c <__sfp+0x84>)
 800a6d2:	681e      	ldr	r6, [r3, #0]
 800a6d4:	69b3      	ldr	r3, [r6, #24]
 800a6d6:	b913      	cbnz	r3, 800a6de <__sfp+0x16>
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7ff ffbd 	bl	800a658 <__sinit>
 800a6de:	3648      	adds	r6, #72	; 0x48
 800a6e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	d503      	bpl.n	800a6f0 <__sfp+0x28>
 800a6e8:	6833      	ldr	r3, [r6, #0]
 800a6ea:	b30b      	cbz	r3, 800a730 <__sfp+0x68>
 800a6ec:	6836      	ldr	r6, [r6, #0]
 800a6ee:	e7f7      	b.n	800a6e0 <__sfp+0x18>
 800a6f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f4:	b9d5      	cbnz	r5, 800a72c <__sfp+0x64>
 800a6f6:	4b16      	ldr	r3, [pc, #88]	; (800a750 <__sfp+0x88>)
 800a6f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6fc:	60e3      	str	r3, [r4, #12]
 800a6fe:	6665      	str	r5, [r4, #100]	; 0x64
 800a700:	f000 f847 	bl	800a792 <__retarget_lock_init_recursive>
 800a704:	f7ff ff96 	bl	800a634 <__sfp_lock_release>
 800a708:	2208      	movs	r2, #8
 800a70a:	4629      	mov	r1, r5
 800a70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a714:	6025      	str	r5, [r4, #0]
 800a716:	61a5      	str	r5, [r4, #24]
 800a718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a71c:	f7fb fd64 	bl	80061e8 <memset>
 800a720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a728:	4620      	mov	r0, r4
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a72c:	3468      	adds	r4, #104	; 0x68
 800a72e:	e7d9      	b.n	800a6e4 <__sfp+0x1c>
 800a730:	2104      	movs	r1, #4
 800a732:	4638      	mov	r0, r7
 800a734:	f7ff ff62 	bl	800a5fc <__sfmoreglue>
 800a738:	4604      	mov	r4, r0
 800a73a:	6030      	str	r0, [r6, #0]
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d1d5      	bne.n	800a6ec <__sfp+0x24>
 800a740:	f7ff ff78 	bl	800a634 <__sfp_lock_release>
 800a744:	230c      	movs	r3, #12
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	e7ee      	b.n	800a728 <__sfp+0x60>
 800a74a:	bf00      	nop
 800a74c:	0800aabc 	.word	0x0800aabc
 800a750:	ffff0001 	.word	0xffff0001

0800a754 <_fwalk_reent>:
 800a754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a758:	4606      	mov	r6, r0
 800a75a:	4688      	mov	r8, r1
 800a75c:	2700      	movs	r7, #0
 800a75e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a766:	f1b9 0901 	subs.w	r9, r9, #1
 800a76a:	d505      	bpl.n	800a778 <_fwalk_reent+0x24>
 800a76c:	6824      	ldr	r4, [r4, #0]
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d1f7      	bne.n	800a762 <_fwalk_reent+0xe>
 800a772:	4638      	mov	r0, r7
 800a774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a778:	89ab      	ldrh	r3, [r5, #12]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d907      	bls.n	800a78e <_fwalk_reent+0x3a>
 800a77e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a782:	3301      	adds	r3, #1
 800a784:	d003      	beq.n	800a78e <_fwalk_reent+0x3a>
 800a786:	4629      	mov	r1, r5
 800a788:	4630      	mov	r0, r6
 800a78a:	47c0      	blx	r8
 800a78c:	4307      	orrs	r7, r0
 800a78e:	3568      	adds	r5, #104	; 0x68
 800a790:	e7e9      	b.n	800a766 <_fwalk_reent+0x12>

0800a792 <__retarget_lock_init_recursive>:
 800a792:	4770      	bx	lr

0800a794 <__retarget_lock_acquire_recursive>:
 800a794:	4770      	bx	lr

0800a796 <__retarget_lock_release_recursive>:
 800a796:	4770      	bx	lr

0800a798 <__swhatbuf_r>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	460e      	mov	r6, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	2900      	cmp	r1, #0
 800a7a4:	461d      	mov	r5, r3
 800a7a6:	b096      	sub	sp, #88	; 0x58
 800a7a8:	da08      	bge.n	800a7bc <__swhatbuf_r+0x24>
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7b0:	602a      	str	r2, [r5, #0]
 800a7b2:	061a      	lsls	r2, r3, #24
 800a7b4:	d410      	bmi.n	800a7d8 <__swhatbuf_r+0x40>
 800a7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ba:	e00e      	b.n	800a7da <__swhatbuf_r+0x42>
 800a7bc:	466a      	mov	r2, sp
 800a7be:	f000 f903 	bl	800a9c8 <_fstat_r>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	dbf1      	blt.n	800a7aa <__swhatbuf_r+0x12>
 800a7c6:	9a01      	ldr	r2, [sp, #4]
 800a7c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7d0:	425a      	negs	r2, r3
 800a7d2:	415a      	adcs	r2, r3
 800a7d4:	602a      	str	r2, [r5, #0]
 800a7d6:	e7ee      	b.n	800a7b6 <__swhatbuf_r+0x1e>
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	2000      	movs	r0, #0
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	b016      	add	sp, #88	; 0x58
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7e4 <__smakebuf_r>:
 800a7e4:	898b      	ldrh	r3, [r1, #12]
 800a7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e8:	079d      	lsls	r5, r3, #30
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	d507      	bpl.n	800a800 <__smakebuf_r+0x1c>
 800a7f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	6163      	str	r3, [r4, #20]
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	466a      	mov	r2, sp
 800a802:	ab01      	add	r3, sp, #4
 800a804:	f7ff ffc8 	bl	800a798 <__swhatbuf_r>
 800a808:	9900      	ldr	r1, [sp, #0]
 800a80a:	4605      	mov	r5, r0
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff f961 	bl	8009ad4 <_malloc_r>
 800a812:	b948      	cbnz	r0, 800a828 <__smakebuf_r+0x44>
 800a814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a818:	059a      	lsls	r2, r3, #22
 800a81a:	d4ef      	bmi.n	800a7fc <__smakebuf_r+0x18>
 800a81c:	f023 0303 	bic.w	r3, r3, #3
 800a820:	f043 0302 	orr.w	r3, r3, #2
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	e7e3      	b.n	800a7f0 <__smakebuf_r+0xc>
 800a828:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <__smakebuf_r+0x7c>)
 800a82a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	6020      	str	r0, [r4, #0]
 800a830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	9b00      	ldr	r3, [sp, #0]
 800a838:	6120      	str	r0, [r4, #16]
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	9b01      	ldr	r3, [sp, #4]
 800a83e:	b15b      	cbz	r3, 800a858 <__smakebuf_r+0x74>
 800a840:	4630      	mov	r0, r6
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	f000 f8d1 	bl	800a9ec <_isatty_r>
 800a84a:	b128      	cbz	r0, 800a858 <__smakebuf_r+0x74>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	f043 0301 	orr.w	r3, r3, #1
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	89a0      	ldrh	r0, [r4, #12]
 800a85a:	4305      	orrs	r5, r0
 800a85c:	81a5      	strh	r5, [r4, #12]
 800a85e:	e7cd      	b.n	800a7fc <__smakebuf_r+0x18>
 800a860:	0800a5f1 	.word	0x0800a5f1

0800a864 <_malloc_usable_size_r>:
 800a864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a868:	1f18      	subs	r0, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	bfbc      	itt	lt
 800a86e:	580b      	ldrlt	r3, [r1, r0]
 800a870:	18c0      	addlt	r0, r0, r3
 800a872:	4770      	bx	lr

0800a874 <_raise_r>:
 800a874:	291f      	cmp	r1, #31
 800a876:	b538      	push	{r3, r4, r5, lr}
 800a878:	4604      	mov	r4, r0
 800a87a:	460d      	mov	r5, r1
 800a87c:	d904      	bls.n	800a888 <_raise_r+0x14>
 800a87e:	2316      	movs	r3, #22
 800a880:	6003      	str	r3, [r0, #0]
 800a882:	f04f 30ff 	mov.w	r0, #4294967295
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a88a:	b112      	cbz	r2, 800a892 <_raise_r+0x1e>
 800a88c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a890:	b94b      	cbnz	r3, 800a8a6 <_raise_r+0x32>
 800a892:	4620      	mov	r0, r4
 800a894:	f000 f830 	bl	800a8f8 <_getpid_r>
 800a898:	462a      	mov	r2, r5
 800a89a:	4601      	mov	r1, r0
 800a89c:	4620      	mov	r0, r4
 800a89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a2:	f000 b817 	b.w	800a8d4 <_kill_r>
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d00a      	beq.n	800a8c0 <_raise_r+0x4c>
 800a8aa:	1c59      	adds	r1, r3, #1
 800a8ac:	d103      	bne.n	800a8b6 <_raise_r+0x42>
 800a8ae:	2316      	movs	r3, #22
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7e7      	b.n	800a886 <_raise_r+0x12>
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8be:	4798      	blx	r3
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e7e0      	b.n	800a886 <_raise_r+0x12>

0800a8c4 <raise>:
 800a8c4:	4b02      	ldr	r3, [pc, #8]	; (800a8d0 <raise+0xc>)
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f7ff bfd3 	b.w	800a874 <_raise_r>
 800a8ce:	bf00      	nop
 800a8d0:	2000003c 	.word	0x2000003c

0800a8d4 <_kill_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4d06      	ldr	r5, [pc, #24]	; (800a8f4 <_kill_r+0x20>)
 800a8da:	4604      	mov	r4, r0
 800a8dc:	4608      	mov	r0, r1
 800a8de:	4611      	mov	r1, r2
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	f7f8 f852 	bl	800298a <_kill>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d102      	bne.n	800a8f0 <_kill_r+0x1c>
 800a8ea:	682b      	ldr	r3, [r5, #0]
 800a8ec:	b103      	cbz	r3, 800a8f0 <_kill_r+0x1c>
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	bd38      	pop	{r3, r4, r5, pc}
 800a8f2:	bf00      	nop
 800a8f4:	200004a0 	.word	0x200004a0

0800a8f8 <_getpid_r>:
 800a8f8:	f7f8 b840 	b.w	800297c <_getpid>

0800a8fc <__sread>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	460c      	mov	r4, r1
 800a900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a904:	f000 f894 	bl	800aa30 <_read_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	bfab      	itete	ge
 800a90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a90e:	89a3      	ldrhlt	r3, [r4, #12]
 800a910:	181b      	addge	r3, r3, r0
 800a912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a916:	bfac      	ite	ge
 800a918:	6563      	strge	r3, [r4, #84]	; 0x54
 800a91a:	81a3      	strhlt	r3, [r4, #12]
 800a91c:	bd10      	pop	{r4, pc}

0800a91e <__swrite>:
 800a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	461f      	mov	r7, r3
 800a924:	898b      	ldrh	r3, [r1, #12]
 800a926:	4605      	mov	r5, r0
 800a928:	05db      	lsls	r3, r3, #23
 800a92a:	460c      	mov	r4, r1
 800a92c:	4616      	mov	r6, r2
 800a92e:	d505      	bpl.n	800a93c <__swrite+0x1e>
 800a930:	2302      	movs	r3, #2
 800a932:	2200      	movs	r2, #0
 800a934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a938:	f000 f868 	bl	800aa0c <_lseek_r>
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	4632      	mov	r2, r6
 800a940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	4628      	mov	r0, r5
 800a948:	463b      	mov	r3, r7
 800a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	f000 b817 	b.w	800a984 <_write_r>

0800a956 <__sseek>:
 800a956:	b510      	push	{r4, lr}
 800a958:	460c      	mov	r4, r1
 800a95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95e:	f000 f855 	bl	800aa0c <_lseek_r>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	bf15      	itete	ne
 800a968:	6560      	strne	r0, [r4, #84]	; 0x54
 800a96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a972:	81a3      	strheq	r3, [r4, #12]
 800a974:	bf18      	it	ne
 800a976:	81a3      	strhne	r3, [r4, #12]
 800a978:	bd10      	pop	{r4, pc}

0800a97a <__sclose>:
 800a97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97e:	f000 b813 	b.w	800a9a8 <_close_r>
	...

0800a984 <_write_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	2200      	movs	r2, #0
 800a98e:	4d05      	ldr	r5, [pc, #20]	; (800a9a4 <_write_r+0x20>)
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f8 f830 	bl	80029f8 <_write>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_write_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_write_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	200004a0 	.word	0x200004a0

0800a9a8 <_close_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4d05      	ldr	r5, [pc, #20]	; (800a9c4 <_close_r+0x1c>)
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	f7f8 f83c 	bl	8002a30 <_close>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_close_r+0x1a>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_close_r+0x1a>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	200004a0 	.word	0x200004a0

0800a9c8 <_fstat_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	4d06      	ldr	r5, [pc, #24]	; (800a9e8 <_fstat_r+0x20>)
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	602b      	str	r3, [r5, #0]
 800a9d6:	f7f8 f836 	bl	8002a46 <_fstat>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	d102      	bne.n	800a9e4 <_fstat_r+0x1c>
 800a9de:	682b      	ldr	r3, [r5, #0]
 800a9e0:	b103      	cbz	r3, 800a9e4 <_fstat_r+0x1c>
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	bd38      	pop	{r3, r4, r5, pc}
 800a9e6:	bf00      	nop
 800a9e8:	200004a0 	.word	0x200004a0

0800a9ec <_isatty_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4d05      	ldr	r5, [pc, #20]	; (800aa08 <_isatty_r+0x1c>)
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	602b      	str	r3, [r5, #0]
 800a9f8:	f7f8 f834 	bl	8002a64 <_isatty>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_isatty_r+0x1a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_isatty_r+0x1a>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	200004a0 	.word	0x200004a0

0800aa0c <_lseek_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	4611      	mov	r1, r2
 800aa14:	2200      	movs	r2, #0
 800aa16:	4d05      	ldr	r5, [pc, #20]	; (800aa2c <_lseek_r+0x20>)
 800aa18:	602a      	str	r2, [r5, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f7f8 f82c 	bl	8002a78 <_lseek>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_lseek_r+0x1e>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_lseek_r+0x1e>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	200004a0 	.word	0x200004a0

0800aa30 <_read_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	4611      	mov	r1, r2
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4d05      	ldr	r5, [pc, #20]	; (800aa50 <_read_r+0x20>)
 800aa3c:	602a      	str	r2, [r5, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f7f7 ffbd 	bl	80029be <_read>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_read_r+0x1e>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_read_r+0x1e>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	200004a0 	.word	0x200004a0

0800aa54 <_init>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_fini>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr
